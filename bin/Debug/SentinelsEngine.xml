<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SentinelsEngine</name>
    </assembly>
    <members>
        <member name="T:Handelabra.Sentinels.Engine.Controller.VossTakeoverAction">
            <summary>
            GameAction that causes Rainek Kel'Voss to overthrow OblivAeon!
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.VossTakeoverAction.VossCard">
            <summary>
            The card for Voss taking over OA
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.VossTakeoverAction.OblivAeonBookletCard">
            <summary>
            The old card for the OA booklet being replaced
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.VossTakeoverAction.OriginalVossBattleZone">
            <summary>
            The BattleZone Voss was in originally
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.VossTakeoverAction.OblivAeonTurnTaker">
            <summary>
            The OblivAeon TurnTaker
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ModifyKeywordsAction">
            <summary>
            GameAction that is executed when the keywords of Cards change so that Triggers can respond to the change.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ModifyKeywordsAction.AddingOrRemoving">
            <summary>
            True if we are adding the keyword, false if we are removing it
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CardController">
            <summary>
            CardController is responsible for everything a Card does. 
            That can include effects when it enters play, effects while it's in play, powers, hit points, and so on. 
            Individual card logic is contained within a subclass of CardController for that card.
            </summary>
            <summary>
            A large collection of Helper methods that individual CardControllers can call whenever they need to.
            </summary>
            <summary>
            A small collection of common Responses to Triggers that a CardController can use as appropriate.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardController.AllowFastCoroutinesDuringPretend">
            <summary>
            Card controller subclasses need to override and return false if they can present decisions during damage calculations.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardController.Card">
            <summary>
            The Card object that is controlled by this object.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardController.UseDecisionMakerAsCardOwner">
            <summary>
            In special cases, you want the decision maker of a decision to be considered a card's owner instead of its actual owner.
            Otherwise it is usually false.
            Ex. When "Lemme See That..." is on an equipment card that returns a card to its owner's hand, we want Guise to make the
            decision and for it to go to his hand instead of its actual owner.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetSpecialStrings(System.Boolean,System.Boolean)">
            <summary>
            Returns all SpecialStrings for this CardController, according to parameters.
            </summary>
            <param name="forEffectsList">Whether or not to return SpecialStrings that appear in the EffectsList (the lightning bolt).</param>
            <param name="forCardView">Whether or not to return SpecialStrings that appear in the CardView (when the Card is viewed as a full Card).</param>
            <returns>All SpecialStrings for this CardController, according to parameters.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetSpecialStringsForOtherCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns additional SpecialStrings that this CardController wants to add to the provided Card's SpecialStrings, if any.
            By default, it will returns any SpecialStrings that this CardController has where the SpecialString's RelatedCards includes the provided Card.
            </summary>
            <param name="card">The Card for which this CardController will return any additional SpecialStrings.</param>
            <returns>Additional SpecialStrings that this CardController wants to add to the provided Card's SpecialStrings, if any.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddDependentSpecialStrings">
            <summary>
            Adds SpecialStrings that are dependent on other Cards.
            Normally SpecialStrings are added from this CardController's constructor. 
            However, if the SpecialStrings depend on other Cards, those Cards may not yet exist.
            Therefore, they should be added by overriding this method instead.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardIsIndestructible(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card is indestructible.
            Returns false by default.
            Overriding this method and returning true will make the provided Card indestructible.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanOtherCardGoNextToThisCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card is allowed to go next to this Card.
            Returns true by default.
            Overriding this method and returning false will make it so that the provided Card cannot go next to this Card.
            </summary>
            <param name="card">The Card that may or may not be able to go next to this Card.</param>
            <returns>Whether or not the provided Card is allowed to go next to this Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCardPropertyJournalEntry(System.String,System.Nullable{System.Boolean},Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Adds a new boolean CardProperty to this Card.
            </summary>
            <param name="key">The key of the CardProperty to be added.</param>
            <param name="boolValue">The boolean value of the CardProperty to be added.</param>
            <param name="overrideCard">If not null, will add the CardProperty to the provided Card instead of THIS Card.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCardPropertyJournalEntry(System.String,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Adds a new Card CardProperty to this Card.
            </summary>
            <param name="key">The key of the CardProperty to be added.</param>
            <param name="card">The Card value of the CardProperty to be added.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCardPropertyJournalEntry(System.String,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Adds a new TurnTaker CardProperty to this Card.
            </summary>
            <param name="key">The key of the CardProperty to be added.</param>
            <param name="tt">The TurnTaker value of the CardProperty to be added.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.SetCardPropertyToTrueIfRealAction(System.String,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Sets a boolean CardProperty to true if the provided GameAction is a "real" GameAction (ie. not in pretend or preview mode).
            </summary>
            <param name="key">The key of the boolean CardProperty.</param>
            <param name="overrideCard">If not null, sets the Card property on the provided Card instead of THIS Card.</param>
            <param name="gameAction">The GameAction that must be a real GameAction to have the CardProperty set.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCardPropertyJournalEntryBoolean(System.String)">
            <summary>
            Returns the nullable boolean value of the CardProperty with the provided key.
            Null is returned if the CardProperty does not exist.
            </summary>
            <param name="key">The key of the boolean CardProperty to be returned.</param>
            <returns>The nullable boolean value of the CardProperty with the provided key.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCardPropertyJournalEntryInteger(System.String)">
            <summary>
            Returns the nullable integer value of the CardProperty with the provided key.
            Null is returned if the CardProperty does not exist.
            </summary>
            <param name="key">The key of the integer CardProperty to be returned.</param>
            <returns>The nullable integer value of the CardProperty with the provided key.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCardPropertyJournalEntryCard(System.String)">
            <summary>
            Returns the Card value of the CardProperty with the provided key.
            Null is returned if the CardProperty does not exist.
            </summary>
            <param name="key">The key of the Card CardProperty to be returned.</param>
            <returns>The Card value of the CardProperty with the provided key.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCardPropertyJournalEntryTurnTaker(System.String)">
            <summary>
            Returns the TurnTaker value of the CardProperty with the provided key.
            Null is returned if the CardProperty does not exist.
            </summary>
            <param name="key">The key of the TurnTaker CardProperty to be returned.</param>
            <returns>The TurnTaker value of the CardProperty with the provided key.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsThisCardNextToCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not THIS Card is next to the provided Card.
            </summary>
            <param name="otherCard">The Card that THIS Card may or may not be next to.</param>
            <returns>Whether or not THIS Card is next to the provided Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsThisCardNextToCard(Handelabra.Sentinels.Engine.Controller.DamageSource)">
            <summary>
            Returns whether or not this Card is next to the provided DamageSource.
            </summary>
            <param name="source">The DamageSource that this Card may or may not be next to.</param>
            <returns>Whether or not this Card is next to the provided DamageSource.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfContributesPowersToCardController(Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Returns all Powers that this CardController contributes to the provided CardController.
            Returns null by default, indicating that no Powers are contributed to the other CardController.
            Override to add additional Poweres to other CardControllers.
            </summary>
            <param name="cardController">The CardController to which THIS CardController is adding Powers, if any.</param>
            <returns>A collection of all Powers that this CardController contributes to the provided CardController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetActivatableAbilities(System.String,Handelabra.Sentinels.Engine.Controller.TurnTakerController)">
            <summary>
            Returns all ActivatableAbility objects that this CardController has, if any.
            </summary>
            <param name="key">If not null, only returns ActivatableAbility objects with this key.</param>
            <param name="activatingTurnTaker">The TurnTakerController that is activating the ActivatableAbility.</param>
            <returns>All ActivatableAbility objects that this CardController has.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCardSource(Handelabra.Sentinels.Engine.Model.StatusEffect)">
            <summary>
            Returns a new CardSource object for this CardController.
            Called each time another method is called that requires a CardSource.
            </summary>
            <param name="statusEffectSource">The StatusEffect that is getting the CardSource, if any.</param>
            <returns>A new CardSource object for this CardController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ActivateAbility(System.String)">
            <summary>
            This method is executed when the ActivatableAbility is used with the provided abilityKey.
            Please override ActivateAbilityEx() instead of this method.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ActivateAbilityEx(Handelabra.Sentinels.Engine.Model.CardDefinition.ActivatableAbilityDefinition)">
            <summary>
            This method is executed when the ActivatableAbility is used with the provided ActivatableAbilityDefinition.
            By default, calls this CardController's ActivateAbility(string abilityKey) method, where "abilityKey" is the ActivatableAbilityDefinition's "Name" property.
            Override this method with the logic for each ActivatableAbility this CardController has.
            </summary>
            <param name="definition">The ActivatableAbilityDefinition of the ActivatableAbility to activate.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.BeforeFlipCardImmediateResponse(Handelabra.Sentinels.Engine.Controller.FlipCardAction)">
            <summary>
            This method is executed immediately BEFORE this CardController is flipped.
            By default, it does nothing.
            </summary>
            <param name="flip">The FlipCardAction of this CardController being flipped.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AfterFlipCardImmediateResponse">
            <summary>
            This method is executed immediately AFTER this CardController has flipped.
            This method executes BEFORE other Triggers that react to FlipCardAction.
            By default, it removes all Triggers from the other side of the CardController when flipping to its back side, or adds Card Triggers if flipping to its front side.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardIsVisibleToCardSource(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided Card is allowed to be selected by a Decision created by the provided CardSource.
            By default, this will return null.
            Example: When a Hero has Isolated Hero next to them, their Cards cannot be selected by another Hero's Decisions.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfTurnTakerIsVisibleToCardSource(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided TurnTaker is allowed to selected by any Decision created by the provided CardSource.
            By default, this will return null.
            Example: When a Hero has Isolated Hero next to them, they cannot select nor be selected by any other Hero.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBaseTriggers">
            <summary>
            Automatically adds the "increase damage to nemesis" Trigger to the Game if applicable for this Card.
            This method does not need to be called directly by CardControllers.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAllTriggers">
            <summary>
            Adds Base Triggers, Card Triggers, and Last Triggers.
            </summary>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBaseTriggers"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCardTriggers"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.AddLastTriggers"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DeterminePlayLocation(System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.IDecision},Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria)">
            <summary>
            When a TurnTaker tries to play this Card, we must first determine which Location the Card will be moved to before the Card is moved.
            By default, this will be the OwnerTurnTaker's PlayArea, but it could be somewhere else. Example: Next to a target Card in another PlayArea.
            To change the Card's play Location, override this method and store the new Location as a MoveCardDestination, then add it to "storedResults" of this method.
            Helper methods, such as "SelectCardThisCardWillMoveNextTo()" can be used within this method to simplify the process.
            Note: Only Cards that actually go to a location that is considered to be "in play" will actually "enter play", which will cause Triggers on PlayCardAction to take effect.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RunIfUnableToEnterPlay">
            <summary>
            This is code that is run if this Card is unable to enter play. 
            Example: This Card goes next to a target Card, but it has no valid targets to attach to.
            By default, this method does nothing. Overriding this method will allow code to be executed instead.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBeforeDestroyAction(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator})">
            <summary>
            Adds coroutines that will be executed immediately BEFORE this Card is destroyed.
            Cards that are being destroyed do not execute Triggers on their own destruction, so this method is used instead.
            Example: Replacing this Card with another Card.
            </summary>
            <param name="action">A Func with GameAction as its only parameter (it will always be DestroyCardAction) and executes the code prior to the Card being fully destroyed.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBeforeRemovedFromPlayAction(System.Func{Handelabra.Sentinels.Engine.Controller.MoveCardAction,System.Collections.IEnumerator})">
            <summary>
            Adds a Trigger that will execute BEFORE this Card is removed from play for any reason.
            </summary>
            <param name="action">The Trigger that executes when this Card leaves play.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBeforeFlippedFaceDownAction(System.Func{Handelabra.Sentinels.Engine.Controller.FlipCardAction,System.Collections.IEnumerator})">
            <summary>
            Adds a Trigger that will execute BEFORE this Card is flipped face-down.
            </summary>
            <param name="action">The Trigger that executes when this Card flips face-down.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAfterDestroyedAction(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator})">
            <summary>
            Adds coroutines that will be executed immediately AFTER this Card is destroyed.
            Cards that are being destroyed do not execute Triggers on their own destruction, so this method is used instead.
            Example: Cards that add a StatusEffect to the Game when they are destroyed.
            </summary>
            <param name="action">A Func with GameAction as its only parameter (it will always be DestroyCardAction) and executes the code prior to the Card being fully destroyed.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAfterDestroyedAction(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator})">
            <summary>
            Manually removes coroutines that have been added be executed immediately AFTER this Card is destroyed.
            </summary>
            <param name="action">The Func to remove.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAfterLeavesPlayAction(System.Func{System.Collections.IEnumerator})">
            <summary>
            Adds coroutines that will be executed immediately AFTER this Card leaves play.
            Cards that have left play do not execute Triggers on their own, so this method is used instead.
            Example: Cards that reset their CardProperties after they leave play.
            </summary>
            <param name="action">A Func that executes after this Card has left play.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveDestroyAction(Handelabra.Sentinels.Engine.Model.BeforeOrAfter,System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator})">
            <summary>
            Manually removes coroutines that have been added be executed immediately before or after this Card is destroyed (ie. ones added by AddBeforeDestroyedAction() and AddAfterDestroyedAction()).
            </summary>
            <param name="beforeOrAfter">Whether the Func being removed is categorized as Before or After the Destroy action.</param>
            <param name="action">The Func to remove.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveDestroyActions">
            <summary>
            Removes all Destroy actions from this Card (ie. ones added by AddBeforeDestroyedAction() and AddAfterDestroyedAction()).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetWhenDestroyedTriggers">
            <summary>
            Returns all ITriggers that react when this Card is destroyed.
            </summary>
            <returns>All ITriggers that react when this Card is destroyed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddWhenDestroyedTrigger(System.Func{Handelabra.Sentinels.Engine.Controller.DestroyCardAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Model.TriggerType[],System.Func{Handelabra.Sentinels.Engine.Controller.DestroyCardAction,System.Boolean},System.Nullable{Handelabra.Sentinels.Engine.Controller.TriggerPriority})">
            <summary>
            Adds a SelfDestructTrigger that reacts WHEN this Card is destroyed, rather than BEFORE or AFTER. This affects timing order.
            </summary>
            <param name="response">The SelfDestructTrigger's reponse, executed on the DestroyCardAction for this Card.</param>
            <param name="triggerTypes">The TriggerTypes of the created SelfDestructTrigger.</param>
            <param name="additionalCriteria">Any additional criteria applied to the DestroyCardAction in order for the SelfDestructTrigger to react.</param>
            <param name="priority">The Priority of the SelfDestructTrigger in the TriggerManager.</param>
            <returns>The SelfDestructTrigger that is created by the call to this method.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveWhenDestroyedTriggers">
            <summary>
            Removes all SelfDestructTriggers that execute WHEN this Card is destroyed (rather than BEFORE or AFTER).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveWhenDestroyedTrigger(Handelabra.Sentinels.Engine.Controller.SelfDestructTrigger)">
            <summary>
            Removes the provided SelfDestructTrigger from this Card that executes WHEN this Card is destroyed (rather than BEFORE or AFTER).
            </summary>
            <param name="trigger">The SelfDestructTrigger to remove.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddWhenDestroyedTrigger(System.Func{Handelabra.Sentinels.Engine.Controller.DestroyCardAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Model.TriggerType)">
            <summary>
            Adds a SelfDestructTrigger that reacts WHEN this Card is destroyed, rather than BEFORE or AFTER. This affects timing order.
            </summary>
            <param name="response">The SelfDestructTrigger's reponse, executed on the DestroyCardAction for this Card.</param>
            <param name="triggerType">The TriggerType of the created SelfDestructTrigger.</param>
            <returns>The SelfDestructTrigger that is created by the call to this method.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddWhenDestroyedTrigger(Handelabra.Sentinels.Engine.Controller.SelfDestructTrigger)">
            <summary>
            Adds the provided SelfDestructTrigger that executes WHEN this Card is destroyed (rather than BEFORE or AFTER).
            </summary>
            <param name="trigger">The SelfDestructTrigger to add.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAfterLeavesPlayAction(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Model.TriggerType)">
            <summary>
            Adds coroutines that will be executed immediately AFTER this Card leaves play.
            Cards that have left play do not execute Triggers on their own, so this method is used instead.
            Example: Cards that reset their CardProperties after they leave play.
            </summary>
            <param name="response">A Func that executes after this Card has left play. The GameAction will be the MoveCardAction of this Card leaving play.</param>
            <param name="triggerType">Originally this was a Trigger, but it no longer is, so this parameter is no longer used.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddBeforeLeavesPlayAction(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Model.TriggerType)">
            <summary>
            Adds coroutines that will be executed immediately BEFORE this Card leaves play.
            Cards that are leaving play do not execute Triggers on their own, so this method is used instead.
            Example: Cards that have other Cards under it are returned to their Owner TurnTaker's Trashes.
            </summary>
            <param name="response">A Func that executes before this Card leaves play.</param>
            <param name="triggerType">Originally this was a Trigger, but it no longer is, so this parameter is no longer used.</param>
            <returns>The same Func that was passed as a parameter.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddLastTriggers">
            <summary>
            Adds Triggers to this CardController after all other Triggers have been added.
            This is rarely used, but needs to be overridden in some cases.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCardTriggers">
            <summary>
            Adds Triggers specific to this Card by calling AddTriggers() ONLY if they have not already been added.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddTriggers">
            <summary>
            Is overridden by individual CardControllers to add Triggers to this Card.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddStartOfGameTriggers">
            <summary>
            Adds any Triggers at the start of the Game, even if this Card is not in play.
            Only used in rare circumstances, as most Cards do not have any Triggers when they are not in play.
            Ex. Shinobi Assassin, which comes into play when it would be revealed or drawn.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ResetTriggers(System.Boolean)">
            <summary>
            Removes all Triggers from this Card, then readds ONLY Card Triggers (ie. those provided in the overridden AddTriggers() method).
            </summary>
            <param name="includingOutOfPlayTriggers"></param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.BasePlay">
            <summary>
            Is automatically executed when this Card is played before its Play() method is called.
            This automatically resets this Card to its Maximum HP, if it is a target Card.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfTurnTakerCanPerformAction``1(Handelabra.Sentinels.Engine.Controller.TurnTakerController)">
            <summary>
            Returns whether or not the provided TurnTakerController is allowed to perform the GameAction type (T) provided.
            Returns true by default, unless this Card has already called one of the "Cannot" methods on that TurnTaker. Example: CannotPlayCards().
            </summary>
            <typeparam name="T">The GameAction type that may or may not be performable by the provided TurnTakerController.</typeparam>
            <param name="ttc">The TurnTakerController that may or may not be able to perform the provided GameAction.</param>
            <returns>Whether or not the provided TurnTakerController is allowed to perform the GameAction type (T) provided.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfHeroCharacterCardControllerCanUsePowers(Handelabra.Sentinels.Engine.Controller.HeroCharacterCardController)">
            <summary>
            Retruns whether or not the provided HeroCharacterCardController is able to use powers right now.
            Returns null by default, unless CannotUsePowers() has already been called by this CardController on that HeroCharacterCardController.
            </summary>
            <param name="hero">The HeroCharacterCardController that may or may not be able to use powers.</param>
            <returns>Whether or not the provided HeroCharacterCardController is able to use powers right now.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardContainsKeyword(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Boolean,System.Boolean)">
            <summary>
            Asks this CardController if the provided Card has the given keyword.
            By default, it just returns whether or not the Card itself has those keywords.
            Overriding this method can allow this CardController to return that the provided Card has a keyword that it does not normally have.
            </summary>
            <param name="card">The Card that may or may not have the provided keyword.</param>
            <param name="keyword">The keyword that may or may not be on the provided Card.</param>
            <param name="evenIfUnderCard">Whether or not to consider keywords on the Card even if it is under another Card.</param>
            <param name="evenIfFaceDown">Whether or not to consider keywords on the Card even if it is face-down.</param>
            <returns>Whether or not the provided Card has the given keyword.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskForCardAdditionalKeywords(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Asks this CardController for all additional keywords to add to the provided Card.
            By default, it returns an empty string array.
            Overriding this method can allow this CardController to add additional keywords to the provided Card.
            </summary>
            <param name="card"></param>
            <returns>Any additional keywords this CardController wants to add to the provided Card, if any.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardCanDealDamage(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Asks this CardController whether or not the provided Card can deal damage.
            By default, this method returns true.
            However, if this CardController has any effects that prevent the Card from dealing damage, it will return false instead.
            </summary>
            <param name="card">The Card that may or may not be able to deal damage.</param>
            <returns>Whether or not the provided Card can deal damage.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PerformBeforeDestroyActions(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Allows this CardController to perform any of its "Before Destroy" actions that have been added via AddBeforeDestroyAction() methods.
            </summary>
            <param name="gameAction">The DestroyCardAction that this method is responding to.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PerformAfterDestroyedActions(Handelabra.Sentinels.Engine.Controller.DestroyCardAction)">
            <summary>
            Allows this CardController to perform any of its "After Destroy" actions that have been added via AddAfterDestroyAction() methods.
            </summary>
            <param name="destroy">The DestroyCardAction that this method is responding to.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PerformBeforeLeavesPlayActions">
            <summary>
            Allows this CardController to perform any of its "Before Leaves Play" actions that have been added via AddBeforeLeavesPlayAction() methods.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PerformAfterLeavesPlayActions">
            <summary>
            Allows this CardController to perform any of its "Before Leaves Play" actions that have been added via AddAfterLeavesPlayAction() methods.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DestroyAttempted(Handelabra.Sentinels.Engine.Controller.DestroyCardAction)">
            <summary>
            Whenever a DestroyCardAction tries to destroy this Card, but this Card cannot be destroyed, then this method will execute instead.
            Override this method so that it can respond to its attempted destruction.
            Example: Whenever this Card would be destroyed, flip it instead.
            </summary>
            <param name="destroyCard">The DestroyCardAction that attempted to destroy this Card.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FindTriggersWhere(System.Func{Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean})">
            <summary>
            Returns all Triggers that match the provided Func criteria.
            </summary>
            <param name="criteria">A criteria for the kinds of Triggers that should be returned.</param>
            <returns>All Triggers that match the provided Func criteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.Play">
            <summary>
            Executed whenever this CardController is played or put into play.
            By default, it does nothing. Override this method with the intended "When Played" behaviour.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAllTriggers(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes all Triggers from this CardController.
            The parameters can restrict which kinds of Triggers are removed.
            </summary>
            <param name="includingOutOfPlay">Whether or not to remove "out of play" Triggers.</param>
            <param name="includeUnresolvedOnDestroyTriggers">Whether or not to remove "On Destroy" Triggers tht have not yet resolved.</param>
            <param name="includeNemesisTriggers">Whether or not to remove the +1 damage to nemesis Triggers.</param>
            <param name="includingSelfDestructTriggers">Whether or not to remove "self-destrcut" Triggers.</param>
            <param name="includePretendGameOverTriggers">Whether or not to remove Triggers that cause a pretend Game Over. Example: Spite: Agent of Gloom (Challenge Mode)</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveFromAllLists">
            <summary>
            Removes this CardController from all CardControllerListTypes, thereby it will not have any of its "Ask()" methods called.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAllTriggersAndRemoveFromLists(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes all Triggers from this CardController, and removes it from all CardControllerListTypes, thereby it will not have any of its "Ask()" methods called.
            </summary>
            <param name="includeOutOfPlayTriggers">Whether or not to remove "out of play" Triggers.</param>
            <param name="includeUnresolvedOnDestroyTriggers">Whether or not to remove "On Destroy" Triggers tht have not yet resolved.</param>
            <param name="includeSelfDestructTriggers">Whether or not to remove "self-destrcut" Triggers.</param>
            <param name="includePretendGameOverTriggers">Whether or not to remove Triggers that cause a pretend Game Over. Example: Spite: Agent of Gloom (Challenge Mode)</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean)">
            <summary>
            Removes a specific Trigger from this CardController.
            </summary>
            <param name="trigger">The Trigger to remove from this CardController.</param>
            <param name="includeOutOfPlay">Whether or not to remove the Trigger even if it is an out-of-play Trigger.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.UsePower(System.Int32)">
            <summary>
            Executed whenever this CardController uses a power.
            By default it does nothing. Override this method with the intended "Use Power" effect.
            </summary>
            <param name="index">For Powers with multiple effects, this index indicate which Power is being used. 0 = First Power, 1 = Second Power, etc.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddStatusEffect(Handelabra.Sentinels.Engine.Model.StatusEffect,System.Boolean)">
            <summary>
            Adds a StatusEffect to this CardController.
            </summary>
            <param name="effect">The StatusEffect to be added.</param>
            <param name="showMessage">Whether or not to show a message to the players indicating that this StatusEffect has been added.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddTrigger``1(System.Func{``0,System.Boolean},System.Func{``0,System.Collections.IEnumerator},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.TriggerType},Handelabra.Sentinels.Engine.Controller.TriggerTiming,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.ActionDescription},System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Boolean},System.Nullable{Handelabra.Sentinels.Engine.Controller.TriggerPriority},System.Boolean,System.Boolean)">
            <summary>
            Adds a new Trigger to this CardController with the provided parameters.
            </summary>
            <typeparam name="T">The Type of GameAction to which this Trigger responds.</typeparam>
            <param name="criteria">The criteria of the Trigger, indicating whether or not it should respond to the incoming GameAction of type T.</param>
            <param name="response">The response when the Trigger is responding to a GameAction that meets criteria.</param>
            <param name="types">The TriggerTypes for the new Trigger, classifying it in the TriggerManager.</param>
            <param name="timing">The TriggerTiming for the new Trigger, indicating whether to respond before or after the GameAction.</param>
            <param name="actionTypes">All ActionDescriptions that apply to this Trigger. Either Unspecified or DamageTaken.</param>
            <param name="isConditional">An obsolete parameter that can remain false.</param>
            <param name="requireActionSuccess">Whether or not the Trigger should only respond of the GameAction that it applies to has its IsSuccessful property set to true.</param>
            <param name="isActionOptional">Whether or not the response to the Trigger is optional. Example: Whenever damage *may* be redirected, rather than  that it *always* is.</param>
            <param name="outOfPlayTrigger">Whether or not this Trigger is an "out-of-play" Trigger.</param>
            <param name="orderMatters">Whether or not the order of resolution matters between this Trigger and other, Triggers that would respond at the same time.</param>
            <param name="priority">The TriggerPriority of this Trigger compared to other Triggers. Can be left to null if it has no priority.</param>
            <param name="ignoreBattleZone">Whether or not this Trigger should respond even if the GameAction occurs in a different BattleZone than this CardController.</param>
            <param name="respondEvenIfPlayedAfterAction">Whether or not this Trigger should respond even if came into effect *after* the GameAction to which it responds. Example: If this Trigger responds "at the end of the villain turn", should this CardController still respond when it comes into play *during* the villain's EndOfTurn Phase?</param>
            <returns>The Trigger that has been added to the CardController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddTrigger``1(System.Func{``0,System.Boolean},System.Func{``0,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Model.TriggerType,Handelabra.Sentinels.Engine.Controller.TriggerTiming,Handelabra.Sentinels.Engine.Controller.ActionDescription,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Boolean},System.Nullable{Handelabra.Sentinels.Engine.Controller.TriggerPriority},System.Boolean,System.Boolean)">
            <summary>
            Adds a new Trigger to this CardController with the provided parameters.
            </summary>
            <typeparam name="T">The Type of GameAction to which this Trigger responds.</typeparam>
            <param name="criteria">The criteria of the Trigger, indicating whether or not it should respond to the incoming GameAction of type T.</param>
            <param name="response">The response when the Trigger is responding to a GameAction that meets criteria.</param>
            <param name="type">A TriggerType for the new Trigger, classifying it in the TriggerManager.</param>
            <param name="timing">The TriggerTiming for the new Trigger, indicating whether to respond before or after the GameAction.</param>
            <param name="actionType">An ActionDescription that applies to this Trigger. Either Unspecified or DamageTaken.</param>
            <param name="isConditional">An obsolete parameter that can remain false.</param>
            <param name="requireActionSuccess">Whether or not the Trigger should only respond of the GameAction that it applies to has its IsSuccessful property set to true.</param>
            <param name="isActionOptional">Whether or not the response to the Trigger is optional. Example: Whenever damage *may* be redirected, rather than  that it *always* is.</param>
            <param name="outOfPlayTrigger">Whether or not this Trigger is an "out-of-play" Trigger.</param>
            <param name="orderMatters">Whether or not the order of resolution matters between this Trigger and other, Triggers that would respond at the same time.</param>
            <param name="priority">The TriggerPriority of this Trigger compared to other Triggers. Can be left to null if it has no priority.</param>
            <param name="ignoreBattleZone">Whether or not this Trigger should respond even if the GameAction occurs in a different BattleZone than this CardController.</param>
            <param name="respondEvenIfPlayedAfterAction">Whether or not this Trigger should respond even if came into effect *after* the GameAction to which it responds. Example: If this Trigger responds "at the end of the villain turn", should this CardController still respond when it comes into play *during* the villain's EndOfTurn Phase?</param>
            <returns>The Trigger that has been added to the CardController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Adds the provided Trigger to this CardController.
            </summary>
            <param name="trigger">The Trigger to add.</param>
            <returns>The Trigger that was added.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddToTemporaryTriggerList(Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Adds the provided Trigger to the list of temporary Triggers for this CardController.
            </summary>
            <param name="trigger">The Trigger that was added as a temporary Trigger.</param>
            <returns>The Trigger that was added as a temporary Trigger.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveTemporaryTriggers">
            <summary>
            Removes all temporary Triggers from both this CardController and the temporary Triggers list. ie. All those added by AddToTemporaryTriggerList().
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveTemporaryTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean)">
            <summary>
            Removes the provided Trigger from both this CardController and the temporary Triggers list. ie. All those added by AddToTemporaryTriggerList().
            </summary>
            <param name="trigger"></param>
            <param name="includingOutOfPlay"></param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveTemporaryVariables">
            <summary>
            Removes all temporary variables.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CancelAction(Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.CancelAction},System.Boolean)">
            <summary>
            Cancels the provided GameAction, preventing it from taking effect.
            </summary>
            <param name="action">The GameAction that is cancelled.</param>
            <param name="showOutput">Whether or not to show message output to the player(s) when the GameAction is cancelled.</param>
            <param name="cancelFutureRelatedDecisions">Whether or not to also cancel any future decisions that hinge on this GameAction.</param>
            <param name="storedResults">Stores all CancelActions that result from the call to this method.</param>
            <param name="isPreventEffect">Whether or not this GameAction is cancelled because of an effect that prevents such actions.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DoAction(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Helper method that performs the GameAction provided by calling GameController.DoAction(action).
            </summary>
            <param name="action">The GameAction that will be performed.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanOrderAffectOutcome(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Returns whether or not the order in which modifiers are applied to the provided GameAction could affect whether or not this one takes effect.
            Generally this is only used for situations in which damage is reduced or increased based on the amount of damage that is being dealt.
            Returns false by default.
            </summary>
            <returns>Whether or not the order in which modifiers are applied to the provided GameAction could affect whether or not this one takes effect.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsActionConditionForRedirect(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Returns whether or not this Card depends on the provided GameAction to decide whether or not to redirect damage.
            Example: If this Card says "Redirect all Fire damage", and the action provided is "ChangeDamageType", then it could affect whether or not the damage is redirected.
            Returns false by default.
            </summary>
            <returns>Whether or not this Card depends on the provided GameAction to decide whether or not to redirect damage.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardCanBePlayed(Handelabra.Sentinels.Engine.Controller.CardController,Handelabra.Sentinels.Engine.Model.Location)">
            <summary>
            Returns whether or not the provided CardController can be played.
            Only returns false if this particular CardController is preventing another Card (or type of Card) from being played.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanBePlayedInTurnPhase(Handelabra.Sentinels.Engine.Model.TurnPhase)">
            <summary>
            Returns whether or not this CardController can be played in the provided TurnPhase.
            Returns true by default.
            Override to return a conditional response.
            Example: Mechanical Golems cannot be played during Unity's PlayCard phase.
            </summary>
            <param name="turnPhase">The TurnPhase in which this CardController may or may not be played.</param>
            <returns>Whether or not this CardController can be played in the provided TurnPhase.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanBePlayedFromLocation">
            <summary>
            Returns whether or not this CardController can be played from its current Location.
            Returns true by default.
            Override to return a conditional response.
            Example: Magmaria's Crystals cannot be played while in a player's Hand.
            </summary>
            <returns>Whether or not this CardController can be played from its current Location.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfContributesSpecialStringToCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Contributes special strings to another card. Ex. Adaptive Plating Subroutine to Omnitron.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfActionCanBePerformed(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Asks this CardController if the given GameAction can be performed.
            If this returns false, the GameAction will not be performed. 
            This is slightly different than using a CancelAction on the GameAction, in that the GameAction will never even be initiated.
            This is helpful for Cards like Isolated Hero, which cancel too many actions to be worth showing them.
            </summary>
            <param name="gameAction">The GameAction that may or may not be performable.</param>
            <returns>Whether or not the provided GameAction can be performed. True by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.BulkMoveCard(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean)">
            <summary>
            Moves many Card objects to a Location all at once, rather than individually.
            This is used for things like moving all cards out of game, or reshuffling.
            </summary>
            <remarks>Triggers cannot fire on each individual move, just on the bulk move.</remarks>
            <param name="ttc">The TurnTakerController that is moving the Card objects.</param>
            <param name="cards">The Card objects that will be moved to the destination Location.</param>
            <param name="destination">The Location that the Card objects will be moved to.</param>
            <param name="toBottom">Whether or not to place the Card objects on the bottom of the destination Location. False by default.</param>
            <param name="performBeforeDestroyActions">If the Card objects are moving from in play to out of play, whether or not to send a signal that those Card objects are being destroyed.</param>
            <param name="responsibleTurnTaker">Which TurnTaker is responsible for causing the Card objects to be moved, if different that the "taker" TurnTakerController.</param>
            <param name="isDiscard">Whether or not the Card objects being moved counts as a Discard action.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FindTurnTakerController(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns the TurnTakerController of the provided TurnTaker.
            </summary>
            <param name="tt">The TurnTaker of the TurnTakerController that will be returned.</param>
            <returns>The TurnTakerController of the provided TurnTaker.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FindTurnTakerController(System.String)">
            <summary>
            Returns the TurnTakerController that has the provided "identifier".
            </summary>
            <param name="identifier">The identifier of the TurnTakerController that will be returned.</param>
            <returns>The TurnTakerController that has the provided "identifier".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ShouldBeDestroyedNow">
            <summary>
            Returns true only if this card is in a special situation in which it should be destroyed.
            This is checked whenever this card was indestructible but is not indestructible any longer, for example Omnitron's component cards from Fixed Point.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DoesAnyCardControllerMakeAnotherCardIndestructible(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns a CardController if it makes the provided Card object industructible.
            </summary>
            <param name="card">The Card that may or may not be indestructible.</param>
            <returns>If not null, the CardController that makes the provided Card object indestructible.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAsPowerContributor">
            <summary>
            Lets the GameController know that this CardController adds Powers to other Cards.
            This CardController should override AskIfContributesPowersToCardController() to actually perform the Power contribution.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAsPowerContributor">
            <summary>
            Lets the GameController know that this CardController no longer adds Powers to other Cards.
            Assumes that AddAsPowerContributor() had been called in the past.s
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddInhibitorException(System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean})">
            <summary>
            When this CardController is inhibited via AddInhibitor(), this method adds an exception, allowing this CardController to perform very specific GameActions.
            </summary>
            <param name="permittedActions">The type of GameActions that are permitted for the "inhibitedCard".</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddPlayCardInhibitorException">
            <summary>
            Helper method that adds Inhibitor Exceptions to this CardController, allowing it to Play Cards and Enter Play.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveInhibitorException">
            <summary>
            Removes the inhibitor exception previously added by this CardController.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveInhibitor">
            <summary>
            Removes the inhibitor on this CardController.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PrepareToUsePower(Handelabra.Sentinels.Engine.Controller.Power)">
            <summary>
            Automatically called immediately BEFORE the provided Power is to be used.
            </summary>
            <param name="power">The Power that will be used.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FinishUsingPower(Handelabra.Sentinels.Engine.Controller.Power)">
            <summary>
            Automatically called immediately AFTER the provided Power was just used.
            </summary>
            <param name="power">The Power that has just been used.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddPowerInUse(Handelabra.Sentinels.Engine.Controller.Power)">
            <summary>
            Adds the provided Power to the list of Powers currently in use by this CardController.
            </summary>
            <param name="power">The Power to add to the list of Powers currently in use by this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemovePowerInUse(Handelabra.Sentinels.Engine.Controller.Power)">
            <summary>
            Removes the provided Power from the list of Powers currently in use by this CardController.
            </summary>
            <param name="power">The Power to remove from the list of Powers currently in use by this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PrepareToUseAbility(Handelabra.Sentinels.Engine.Controller.ActivatableAbility)">
            <summary>
            Called immediately BEFORE this CardController uses the provided ActivatableAbility.
            </summary>
            <param name="ability">The ActivatableAbility that this CardController will use.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FinishUsingAbility(Handelabra.Sentinels.Engine.Controller.ActivatableAbility)">
            <summary>
            Called immediately AFTER this CardController used the provided ActivatableAbility.
            </summary>
            <param name="ability">The ActivatableAbility that this CardController just used.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAbilityInUse(Handelabra.Sentinels.Engine.Controller.ActivatableAbility)">
            <summary>
            Adds the provided ActivatableAbility to the list of ActivatableAbility objects in use by this CardController.
            </summary>
            <param name="ability">The ActivatableAbility to add to the list of ActivatableAbility objects currently in use by this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAbilityInUse(Handelabra.Sentinels.Engine.Controller.ActivatableAbility)">
            <summary>
            Removes the provided ActivatableAbility from the list of ActivatableAbility objects in use by this CardController.
            </summary>
            <param name="ability">The ActivatableAbility to remove from the list of ActivatableAbility objects currently in use by this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardIsReplaced(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns the Card that should replace the provided Card, if any.
            NOTE: AddThisCardControllerToList(CardControllerListType.ReplacesCards) must be called in this CardController's constructor for this method to be called.
            </summary>
            <param name="card">The Card that may or may not be replaced.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The Card that should replace the provided Card, if any.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardSourceIsReplaced(Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Returns the CardSource that should replace the provided CardSource, if any.
            NOTE: AddThisCardControllerToList(CardControllerListType.ReplacesCardSource) must be called in this CardController's constructor for this method to be called.
            </summary>
            <param name="cardSource">The CardSource that may or may not be replaced.</param>
            <param name="gameAction">The GameAction that is checking if the CardSource should be replaced, if any.</param>
            <param name="trigger">The Trigger that is checking if the CardSource should be replaced, if any.</param>
            <returns>The CardSource that should replace the provided CardSource, if any.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfTurnTakerControllerIsReplaced(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns the TurnTakerController that should replace the provided TurnTakerController, if any.
            NOTE: AddThisCardControllerToList(CardControllerListType.ReplacesTurnTaker) must be called in this CardController's constructor for this method to be called.
            </summary>
            <param name="ttc">The TurnTakerController that may or may not be replaced.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The TurnTakerController that should replace the provided TurnTakerController, if any.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddThisCardControllerToList(Handelabra.Sentinels.Engine.Controller.CardControllerListType)">
            <summary>
            Adds this CardController to the Ask list of type CardControllerListType.
            Whenever the appropriate "Ask" method is called, it will include this CardController.
            </summary>
            <param name="list">The CardControllerListType type of the Ask to be included.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveThisCardControllerFromList(Handelabra.Sentinels.Engine.Controller.CardControllerListType)">
            <summary>
            Removes this CardController from the Ask list of type CardControllerListType.
            </summary>
            <param name="list">The CardControllerListType type of the Ask to be removed.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAssociatedCardSource(Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Adds the provided CardSource to this CardController's stack of AssociatedCardSources.
            </summary>
            <param name="cardSource">The CardSource to add to this CardController's stack of AssociatedCardSources.</param>
            <param name="newLayer">If true, adds a pushes a new "layer" of AssociatedCardSources to the stack. Otherwise, it is added to the most recently layer.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAssociatedCardSources(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.CardSource})">
            <summary>
            Adds the provided CardSources to this CardController's stack of AssociatedCardSources, pushed as a new layer.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAssociatedCardSource(Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Removes the top-most layer from this CardController's stack of AssociatedCardSources.
            </summary>
            <param name="cardSource">Does not do anything.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAssociatedCardSources(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.CardSource})">
            <summary>
            Removes the top-most layer from this CardController's stack of AssociatedCardSources.
            </summary>
            <param name="cardSources">Does not do anything.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ReplaceAssociatedCardSources(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.CardSource})">
            <summary>
            Removes the top-most layer from this CardController's stack of AssociatedCardSources, then pushes the provided CardSources as a new layer onto that stack.
            </summary>
            <param name="cardSources">The CardSources to push to this CardController's stack of AssociatedCardSources.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddActionSource(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Adds the provided GameAction as an Action Source for this CardController.
            </summary>
            <param name="gameAction">The GameAction to add as an Action Source for this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveActionSource(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Removes the provided GameAction from the Action Sources for this CardController.
            </summary>
            <param name="gameAction">The GameAction to remove from the Action Sources for this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddAssociatedTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Adds the provided ITrigger as an Associated Trigger for this CardController.
            </summary>
            <param name="trigger">The ITrigger to add as an Associated Trigger for this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.SetCardSourceLimitation(System.Object,Handelabra.Sentinels.Engine.Controller.CardSource.Limitation)">
            <summary>
            Sets a Limitation of the provided type to this CardController's CardSources, with the provided "source" object as the one responsible for this limitation.
            This method is rarely used.
            </summary>
            <param name="source">The source object that is adding the Limitation to this CardController's CardSources.</param>
            <param name="limitation">The Limitation to impose on this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveCardSourceLimitation(System.Object)">
            <summary>
            Removes all Limitations on this CardController's CardSources imposed by the "source" object.
            This method is rarely used.
            </summary>
            <param name="source">The source object that is removing its Limitations from this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveCardSourceLimitation(Handelabra.Sentinels.Engine.Controller.CardSource.Limitation)">
            <summary>
            Removes the provided Limitation from being imposed on this CardController's CardSources.
            This method is rarely used.
            </summary>
            <param name="limitation">The Limitation that is removed from the CardController's CardSources</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAllCardSourceLimitations">
            <summary>
            Removes all CardSource Limitations from this CardController's CardSources.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.RemoveAssociatedTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Removes the provided ITrigger from the list of AssociatedTriggers on this CardController.
            </summary>
            <param name="trigger">The ITrigger to remove from the list of AssociatedTriggers on this CardController.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfTurnPhaseShouldBeChanged(Handelabra.Sentinels.Engine.Model.TurnPhase,Handelabra.Sentinels.Engine.Model.TurnPhase)">
            <summary>
            Returns the TurnPhase that this CardController wants the Game to move to next, if any. Returns null by default.
            NOTE: AddThisCardControllerToList(CardControllerListType.ChangesPhaseOrder) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="fromPhase">The TurnPhase that the Game is leaving.</param>
            <param name="toPhase">The TurnPhase that the Game would normally enter next.</param>
            <returns>The TurnPhase that this CardController wants the Game to move to next, if any. Null by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskForLastPhase(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Ask method that returns the last Phase of a TurnTaker's turn.
            Returns Phase.End by default, but can be overridden to return any Phase.
            NOTE: AddThisCardControllerToList(CardControllerListType.ChangesPhaseOrder) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="tt">The TurnTaker whose last Phase is being returned.</param>
            <returns>The last Phase of a TurnTaker's turn.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfTurnTakerOrderShouldBeChanged(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Ask method that returns the TurnTaker that should take the next turn, if different than the "toTurnTaker". Returns null otherwise.
            NOTE: AddThisCardControllerToList(CardControllerListType.ChangesTurnTakerOrder) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="fromTurnTaker">The TurnTaker who is ending their turn.</param>
            <param name="toTurnTaker">The TurnTaker that would normally take the next turn.</param>
            <returns>The TurnTaker that should take the next turn, if different than the "toTurnTaker". Null otherwise.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsTurnTakerActiveInThisGame(System.String)">
            <summary>
            Returns whether or not a TurnTaker with the provided identifier is active in the Game.
            Active means not incapacitated or out of the game.
            </summary>
            <param name="identifier">The identifier of the TurnTaker that may or may not be in the Game.</param>
            <returns>Whether or not a TurnTaker with the provided identifier is active in the Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsHeroActiveInThisGame(System.String)">
            <summary>
            Returns whether or not a HeroCharacterCard with the provided identifier is active in the Game.
            Active means the HeroCharacterCard is not incapacitated and not out of the game.
            </summary>
            <param name="identifier">The identifier of the HeroCharacterCard that may or may not be in the Game.</param>
            <returns>Whether or not a HeroCharacterCard with the provided identifier is active in the Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FindCharacterCard(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction})">
            <summary>
            Finds the CharacterCard of the provided TurnTaker and stores it in the provided "storedResults".
            </summary>
            <param name="tt">The TurnTaker whose CharacterCard will be found.</param>
            <param name="selectionType">When a Decision must be made by the players to determine which CharacterCard to consider to be THE CharacterCard, this is the SelectionType for that Decision.</param>
            <param name="storedResults">The List that stores the CharacterCard of the TurnTaker as its first element.</param>
            <param name="activeOnly">Whether or not only active CharacterCards should be considered, that is CharacterCards that are not incapaciated and not out of game.</param>
            <param name="additionalCriteria">Additional criteria that must be true about the CharacterCard, if any.</param>
            <param name="damageInfo">When a Decision must be made by the players to determine which CharacterCard to consider to be THE Charactercard, this provides damage-related information for that Decision.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.FindCharacterCardToTakeDamage(Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean)">
            <summary>
            Finds the CharacterCard that will take damage of the provided TurnTaker and stores it in the provided "storedResults".
            </summary>
            <param name="tt">The TurnTaker whose CharacterCard will take damage.</param>
            <param name="storedResults">The List that stores the CharacterCard of the TurnTaker as its first element.</param>
            <param name="damageSource">The source of the damage to be dealt to the CharacterCard. Assumes it is a Card.</param>
            <param name="amount">The amount of damage to be dealt to the CharacterCard.</param>
            <param name="damageType">The type of damage to be dealt to the CharacterCard.</param>
            <param name="isIrreducible">Whether or not the damage dealt to the CharacterCard is irreducible.</param>
            /// <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.IsInfected(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns whether or not the provided TurnTaker is considered to be "infected".
            This game mechanic is only used by Plague Rat in the official game.
            </summary>
            <param name="tt">The TurnTaker that may or may not be infected.</param>
            <returns>Whether or not the provided TurnTaker is considered to be "infected".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfActivatesEffect(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.String)">
            <summary>
            Returns whether or not this Card can activate the effect with the provided "effectKey". Null by default.
            Ex. For The Naturalist, "The Formidable Rhinoceros" can activate effects with the "Rhinoceros" key. 
            NOTE: AddThisCardControllerToList(CardControllerListType.ActivatesEffects) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="turnTakerController">The TurnTakerController that may or may not be able to activate the effect with the provided "effectKey".</param>
            <param name="effectKey">The effect that may or may not be activatable by the TurnTakerController.</param>
            <returns>Whether or not this Card can activate the effect with the provided "effectKey". Null by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanActivateEffect(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.String)">
            <summary>
            Returns whether or not the provided TurnTakerController is able to activate effects of the provided string "effectKey".
            NOTE: This is just a helper method that actually calls GameController.CanActivateEffect(). It cannot be overridden to return anything else.
            To do so, override AskIfActivatesEffect() instead.
            </summary>
            <param name="turnTakerController">The TurnTakerController that may or may not be able to activate the effect.</param>
            <param name="effectKey">The key of the effect that may or may not be activable by the provided TurnTakerController.</param>
            <returns>Whether or not the provided TurnTakerController is able to activate effects of the provided string "effectKey".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CanActivateEffect(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns whether or not the provided Card is able to activate effects of the provided string "effectKey".
            </summary>
            <param name="card">The Card that may or may not be able to activate the effect.</param>
            <param name="effectKey">The key of the effect that may or may not be activable by the provided Card.</param>
            <returns>Whether or not the provided Card is able to activate effects of the provided string "effectKey".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfCardMayPreventAction``1(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Asks this Card if another Card is allowed to prevent the provided TurnTakerController from performing the specificed GameAction. Returns true by default. 
            Example: Some Mode Cards prevent Bunker from drawing Cards. Ammo Drop allows him to draw Cards even if a Mode Card would prevent him. 
            So in Ammo Drop, this method would return false if the TurnTakerController were Bunker and the CardController were a Mode Card.
            </summary>
            <typeparam name="T">The type of GameAction that may be prevented.</typeparam>
            <param name="ttc">The TurnTakerController that may normally be prevented from performing the GameAction.</param>
            <param name="preventer">The CardController that may be trying to prevent the TurnTakerController from performing the GameAction.</param>
            <returns>Returns whether or not another Card is allowed to prevent the provided TurnTakerController from performing the specificed GameAction.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfIsVillain(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks this Card if the provided Card is considered to be a Villain for gameplay purposes. Returns null by default.
            NOTE: AddThisCardControllerToList(CardControllerListType.ModifiedDeckKind) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="card">The Card that may or may not be considered a Villain.</param>
            <param name="cardSource">The CardSource of the Card that is asking whether or not the provided Card is a Villain.</param>
            <returns>Whether or the provided Card is considered to be a Villain for gameplay purposes. Null by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfIsVillain(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks this Card if the provided TurnTaker is considered to be a Villain for gameplay purposes. Returns null by default.
            NOTE: AddThisCardControllerToList(CardControllerListType.ModifiedDeckKind) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="tt">The TurnTaker that may or may not be considered a Villain.</param>
            <param name="cardSource">The CardSource of the Card that is asking whether or not the provided TurnTaker is a Villain.</param>
            <returns>Whether or the provided TurnTaker is considered to be a Villain for gameplay purposes. Null by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfIsVillainTarget(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks this Card if the provided Card is considered to be a Villain Target for gameplay purposes. Returns null by default.
            NOTE: AddThisCardControllerToList(CardControllerListType.ModifiedDeckKind) must be added to this CardController's constructor in order for this method to be called.
            </summary>
            <param name="card">The Card that may or may not be considered a Villain Target.</param>
            <param name="cardSource">The CardSource of the Card that is asking whether or not the provided Card is a Villain Target.</param>
            <returns>Whether or the provided Card is considered to be a Villain Target for gameplay purposes. Null by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumeral(System.Int32,System.Int32)">
            <summary>
            Returns the provided "expectedValue" to be used in a Power.
            In order to be compatible with The Harpy's Applied Numerology, all Powers with numbers in them must use this method instead of simply defining the variable.
            This number can then be increased or decreased by one.
            </summary>
            <param name="numeralIndex">The index order in which it appears on the Card's text. 0 is the first number that appears on the Card, 1 is the second, etc.</param>
            <param name="expectedValue">The actual number that the Card's text has when unaltered.</param>
            <returns>The provided "expectedValue" to be used in a Power.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddPowerNumeralModification(System.String,System.Int32,System.Int32)">
            <summary>
            Modifies a the numbers within the Power text on another Card.
            </summary>
            <param name="identifierKey">The identifier of the Card with the Power to modify.</param>
            <param name="numeralIndex">The index of the number to modify on the Card's Power text. 0 is the first number that appears on the Card, 1 is the second, etc.</param>
            <param name="modValue">The modification to apply to the Power Numeral. Positive numbers increase the number by that amount, negative numbers decrease the number by that amount.</param>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumeral(System.Int32,System.Int32)"></seealso>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumeralStrings(Handelabra.Sentinels.Engine.Controller.Power,System.Int32)">
            <summary>
            Returns text that represents the Power Numerals on the provided Power.
            Only needs to be called by a Card that modifies numerals on another Card, such as The Harpy's Applied Numerology.
            </summary>
            <param name="power">The Power that contains the numerals to be modified.</param>
            <param name="powerIndex">The index of the Power that will have its numerals modified. Usually 0, unless the Power has more than 1 option.</param>
            <returns>Text that represents the Power Numerals on the provided Power.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumeral(System.Int32,System.Int32)"></seealso>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumerals(Handelabra.Sentinels.Engine.Controller.Power,System.Int32)">
            <summary>
            Returns the Power Numerals on the provided Power in the order they appear on the text of the Card.
            </summary>
            <param name="power">The Power whose Power Numerals will be returned.</param>
            <param name="powerIndex">The index of the Power that will have its numerals modified. Usually 0, unless the Power has more than 1 option.</param>
            <returns>The Power Numerals on the provided Power in the order they appear on the text of the Card.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.CardController.GetPowerNumeral(System.Int32,System.Int32)"></seealso>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.HasPowerNumerals(System.Int32)">
            <summary>
            Returns whether or not this Card has Power Numerals.
            Power Numerals are any numbers that appear in the Power text of the Card, used for Cards like The Harpy's Applied Numerology.
            </summary>
            <param name="powerIndex">The index of the Power. Usually 0, unless the Power has more than 1 option.</param>
            <returns>Whether or not this Card has Power Numerals.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetDeckDestination">
            <summary>
            Returns the MoveCardDestination that this Card should go to when it goes to its "associated Deck". Unless overridden, this will return its OwnerTurnTaker's Deck.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetTrashDestination">
            <summary>
            Returns the MoveCardDestination that this Card should go to when it goes to "the Trash". Unless overridden, this will return its OwnerTurnTaker's Trash.
            </summary>
            <returns>The MoveCardDestination that this Card should go to when it goes to "the Trash". Unless overridden, this will return its OwnerTurnTaker's Trash.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PerformEnteringGameResponse">
            <summary>
            Executes any code that should be executed when entering a Game. 
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetOverridePlayLocation">
            <summary>
            Returns the Location to which this Card should be played. Returns null by default, allowing the GameController to determine the Location.
            </summary>
            <value>The Location to which this Card should be played. </value>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.KeepUnderCardOnIncapacitation(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Assuming that the provided Card is under this Card, returns whether or not that Card should stay there even if this Card is incapacitated.
            </summary>
            <param name="card">The Card under this Card.</param>
            <returns>Whether or not that Card should stay there even if this Card is incapacitated.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AskIfIncreasingCurrentPhaseActionCount">
            <summary>
            Asks this Card whether or not it plans to increase the PhaseActionCount of the current Phase.
            Requires adding AddCardControllerToList(CardControllerListType.IncreasePhaseActionCount to the constructor of this Card.
            </summary>
            <returns>Whether or not it plans to increase the PhaseActionCount of the current Phase.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCustomDecisionText(Handelabra.Sentinels.Engine.Controller.IDecision)">
            <summary>
            Override this if using <see cref="F:Handelabra.Sentinels.Engine.Controller.SelectionType.Custom"/> in order to provide custom decision text.
            </summary>
            <param name="decision">The decision that has <see cref="F:Handelabra.Sentinels.Engine.Controller.SelectionType.Custom"/> and the UI wants text for.</param>
            <returns>A populated CustomDecisionText object for UI display, or null to let the UI show whatever it would by default.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetNativeDeck(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns the Native Deck to the Card provided (that is, the Deck to which the Card originally belonged).
            Some cards, such as Mission Cards, are special, in that their Native Deck is the Mission Deck while they are Missions, and their Hero deck when they become rewards.
            </summary>
            <param name="card">The Card whose NativeDeck will be returned.</param>
            <returns>The Native Deck to the Card provided.</returns>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardController.DoesHaveActivePlayMethod">
            <summary>
            Returns true only if this card overrides the base class' "Play()" method, and that Play method has a tangible effect to the player.
            The reason this exists is because of "Uh, Yeah, I'm That Guy", which runs each of the cards it copies' Play methods.
            However, we only wanted the player to choose between effects that have an obvious effect.
            </summary>
            <value><c>true</c> if does have active play method; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ResetFlagsAfterLeavesPlay(System.String)">
            <summary>
            Resets per-target key flags set
            </summary>
            <returns>The flags after leaves play.</returns>
            <param name="baseKey">Base key.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CleanupRevealedCards(Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            Call this method after revealing cards and doing things with them, in case you were destroyed.
            This avoids cards getting orphaned in the revealed location.
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CleanupCardsAtLocations(System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Location},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card})">
            Call this method after revealing cards or setting them aside and doing things with them, in case you were destroyed.
            This avoids cards getting orphaned in the revealed location.
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamage(Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction}},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Func{System.Int32},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean)">
            <summary>
            Deal Damage to all of the targets matching the given criteria, each with a damage amount relative to all cards or the chosen target.
            Dynamic value version.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Deal damage to a specific target.
            Fixed value version.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamageToHighestHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{System.Int32},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean)">
            <summary>
            Deals damage to the highest HP.
            Dynamic value version.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamageToLowestHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Int32,Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean)">
            <summary>
            Deal damage to the target matching the criteria who has the lowest HP (or second lowest, etc).
            Dynamic value version.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamage(Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,Handelabra.Sentinels.Engine.Controller.TargetInfo,Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean)">
            <summary>
            Deals Damage to all of the targets matching the given criteria.
            Fixed value version.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.EachPlayerMayDiscardOneCardToPerformAction(Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator,System.String)">
            <summary>
            Each player may discard 1 card each to perform a passed in action
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.EachPlayerLooksAtTheTopCardOfTheirDeckThenReplacesItOrDiscardsItEx(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Nullable{System.Int32})">
            <summary>
            Reveal the top card of each Hero deck and either discard it or replace it.
            </summary>
            <param name="revealingTurnTaker">The turn taker responsible for the reveal.</param>
            <param name="requiredDecisions">Number of required decisions. Pass null if the reveal is required for all players, or 0 if it can be skipped.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.EachPlayerDiscardsSpecificCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean)">
            <summary>
            All players much discards any of their cards that match the criteria provided.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.MakeUnanimousDecision(System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card})">
            <summary>
            Makes a decision that must be true for all players to succeed.
            In single-player, this will simply be one yes/no decision.
            In multi-player, all players will receive a prompt.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.GetRevealedCard(System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.RevealCardsAction},System.Boolean)">
            <param name="includingPreviouslyRevealed">If set to true, it will also check any cards that have been REMOVED from the revealed cards list. Ex. Shinobi Assassin when it jumps into play.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DetermineIfGivenCardIsTargetWithLowestOrHighestHitPoints(Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.Generic.List{System.Boolean},System.Boolean)">
            <summary>
            Whenever a card takes effect on lowest/highest HP, and there is a tie for that position, 
            ask if the targetted card is considered to be the lowest/highest.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DoNothing">
            <summary>
            Return this instead of null when you want nothing to happen from a coroutine.
            </summary>
            <returns>A coroutine that does nothing.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddMaintainTargetTriggers(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds triggers that makes sure that the criteria stays a target even if other cards try to remove their target.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddFirstTimePerTurnRedirectTrigger(System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Boolean},System.String,Handelabra.Sentinels.Engine.Controller.TargetType,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Boolean)">
            <summary>
            Adds a trigger that redirects damage the first time they would be dealt damage that turn.
            The damage is redirected to the TargetType provided.
            The "firstTimeKey" is the card's property to set to true to indicate that the redirect has been used up already.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddWhenHPDropsToZeroOrBelowRestoreHPTriggers(System.Func{Handelabra.Sentinels.Engine.Model.Card},System.Func{System.Int32},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.IEnumerator},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A helper method for any card with text like "whenever X is reduced to 0 or fewer HP, restore them to N HP and destroy this card."
            </summary>
            <param name="addToHPInsteadOfSet">Determines if the amount of HP should be added to their current HP instead of setting it to a specific amount.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CannotDrawCards(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean})">
            <summary>
            A criteria of HeroTurnTakers may not draw cards.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CannotPlayCards(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean})">
            <summary>
            A criteria of TurnTakers may not play cards, and a type of card that cannot be played (unless by put into play).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CannotUsePowers(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.HeroCharacterCardController,System.Boolean})">
            <summary>
            A criteria of TurnTakers may not use powers.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddPreventPhaseActionTrigger(Handelabra.Sentinels.Engine.Model.Phase,System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean})">
            <summary>
            Adds a "prevent phase action" action for a given phase.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddIfTheTargetThatThisCardIsNextToLeavesPlayDestroyThisCardTrigger(System.Collections.IEnumerator)">
            <summary>
            Adds a trigger such that if the target to which this is next to leaves play, destroy this card.
            </summary>
            <param name="doThisFirst">When this card is destroyed for this reason, do this action first before destroying this card.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.AddCancelActionTrigger``1(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean})">
            <summary>
            Adds a CancelActionTrigger for the given GameAction type T.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.CancelResponse(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Cancels the intended game action.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DealDamageOrDestroyThisCardResponse(Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean)">
            <summary>
            Player may choose to either deal damage, or destroy this card.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.DestroyThisCardResponse(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Destroys this card.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.ImmuneToDamageResponse(Handelabra.Sentinels.Engine.Controller.DealDamageAction)">
            <summary>
            The target is immune to the damage being dealt to it.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PlayTheTopCardOfTheEnvironmentDeckResponse(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Plays the top card of the environment deck, reshuffling if necessary.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PlayTheTopCardOfTheEnvironmentDeckWithMessageResponse(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Plays the top card of the environment deck, with message, reshuffling if necessary.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PlayTheTopCardOfTheVillainDeckResponse(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Plays the top card of the villain deck, reshuffling if necessary.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.PreventPhaseActionResponse(Handelabra.Sentinels.Engine.Controller.PhaseChangeAction)">
            <summary>
            Prevents the phase action from occurring.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardController.YouMayDestroyThisCardResponse(Handelabra.Sentinels.Engine.Controller.PhaseChangeAction)">
            <summary>
            A destroy card decision that is optional.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CardControllerFactory">
            <summary>
            Factory that creates CardControllers of the correct type based on the type of Card passed.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PlayerMode">
            <summary>
            The kind of Game the players are playing: Single-player, Pass-and-Play, or Multiplayer.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CanPlayCardResult">
            <summary>
            A simple enum to return whether or not a Card can be played. If it can, it returns CanPlay. Otherwise, it returns one of the "Cannot" enums.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CardControllerListType">
            <summary>
            The kinds of Ask() methods to add to/remove from the CardControllerList.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.GameController">
            <summary>
            GameController is the main Controller of the entire game, and is primarily in charge of making sure that the rules of the game are followed.
            It contains many methods that you will need to call in order to make your cards do what you want them to do.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.PlayerPolicies">
            <summary>
            Keeps track of the kinds of things that the Player wants taken care of for them automatically, such as drawing Cards.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.AddActionsToPreview">
            <summary>
            Whether or not new GameActions should be added when generating a DamagePreviewResult.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.HasGameStarted">
            <summary>
            Whether or not the Game has actually started. If false, the Game is in the midst of being set up.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.MultipleInstancesOfDamageOutput">
            <summary>
            Used by the Views for situations in which there are multiple instances of Damage for output purposes.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.UnresolvedActions">
            <summary>
            All GameActions that have started but have not yet been fully resolved.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.StatusEffectControllers">
            <summary>
            All StatusEffectControllers currently in the GameController.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.GameOverEndingResult">
            <summary>
            If set, the results of the Game after it has ended. Otherwise it is null.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.PromoCardManager">
            <summary>
            The PromoCardManager, which manages all the Promo (Variant) Cards.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.StatusEffectManager">
            <summary>
            The StatusEffectManager, which manages all the StatuEffects in the Game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.HasPromoCardBeenUnlockedString">
            <summary>
            Key string used by the view's PlayerPrefs to see if a particular Promo (Variant) Card has been unlocked.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.HasVillainBeenDefeatedString">
            <summary>
            Key string used by the view's PlayerPrefs to see if a particular Villain has ever been defeated in any previous Games.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.WasLastHeroStanding">
            <summary>
            Key string used by the view's PlayerPrefs to see whether or not a particular Hero was the "last hero standing", that is, the only one not incapaciated at the end of the Game. 
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.HasLostToVillain">
            <summary>
            Key string used by the view's PlayerPrefs to see whether or not the players have ever lost a Game to a particular Villain.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.GameController.AllowInhibitors">
            <summary>
            Decides whether or not a card that has been destroyed/removed from play can perform actions.
            Turn this on to allow status effects to take place.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.GameController.StartCoroutine">
            <summary>
            The GameController's GameControllerCoroutineRunner that executes coroutines.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.GameController.ExhaustCoroutine">
            <summary>
            The GameController's GameControllerCoroutineExhauster, which iterates through the coroutine without executing them.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.GameController._triggerManager">
            <summary>
            The TriggerManager, which manages all the Triggers in the GameController.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.GameController.PlayerMode">
            <summary>
            The PlayerMode that the Game is in. Single-player by default.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.#ctor(Handelabra.Sentinels.Engine.Model.Game,System.Boolean)">
            <summary>
            The GameController, which control the rules and logic of the Game.
            </summary>
            <param name="game">The Game which will be controlled by this GameController.</param>
            <param name="allowUnityCoroutines">Whether or not to allow coroutines to run "the Unity way".</param>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnDidApplyActionChanges">
            <summary>
            Occurs immediately after a GameAcion has made its changes to the model, and before any "After" triggers occur.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnDidPerformAction">
            <summary>
            Occurs when a GameAction was performed. Used for triggers with "After" timing.
            Note: If an action is cancelled, this will not be called.
            Note: This event is called after all triggers have been resolved and actions performed.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnMakeDecisions">
            <summary>
            Occurs when the GameController requires the View to make decisions.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnSendMessage">
            <summary>
            Occurs when the GameController requires the View to show a message.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnWillApplyActionChanges">
            <summary>
            Occurs when a GameAction has gone past its "Before" triggers and is about to make changes to the model.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnWillPerformAction">
            <summary>
            Occurs when a GameAction will be performed. Used for triggers with "Before" timing.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnGetPersistentValueFromView">
            <summary>
            Event used to get a value stored on the View side.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnSetPersistentValueInView">
            <summary>
            Event used to set a value on the view side.
            </summary>
        </member>
        <member name="E:Handelabra.Sentinels.Engine.Controller.GameController.OnGetHeroCardsInBox">
            <summary>
            Event used when the GameController wants to get a particular Hero Card "from the box".
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.ActiveTurnPhase">
            <summary>
            The current TurnPhase.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.ActiveTurnTaker">
            <summary>
            The TurnTaker that is currently taking a turn.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.ActiveTurnTakerController">
            <summary>
            The TurnTakerController of the ActiveTurnTaker (the one currently taking a turn).
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.AllHeroControllers">
            <summary>
            A List of all HeroTurnTakerControllers in the GameController.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.AllHeroes">
            <summary>
            A collection of all HeroTurnTakers in the Game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.AllTurnTakers">
            <summary>
            A collection of all TurnTakers in the Game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.Game">
            <summary>
            The underlying Game model object that this GameController is controlling.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.IsGameOver">
            <summary>
            Whether or not the Game is over.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.IsRealGameOver">
            <summary>
            Whether or not the Game is REALLY over, in other words, not a Pretend GameOver, which is used when transitioning from one villain to another.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.IsPretendGameOver">
            <summary>
            Whether or not the Game is in a Pretend GameOver, which is used when transitioning from one villain to another.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.PretendMode">
            <summary>
            Whether or not the GameController is currently in Pretend Mode.
            Pretend Mode is used to execute damage-dealing code but not make any changes to the model.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.PreviewMode">
            <summary>
            Whether or not the GameController is currently in Preview Mode.
            Preview Mode is used to generate damage previews by executing damage-dealing code but not making any changes to the model.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.RealMode">
            <summary>
            Whether or not the GameController is in Real Mode, which means it is not in Pretend nor Preview modes.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.TurnTakerControllers">
            <summary>
            A collection of all TurnTakerControllers in the GameController. 
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.HeroTurnTakerControllers">
            <summary>
            A collection of all HeroTurnTakerController in the GameController. 
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.AllowUnityCoroutines">
            <summary>
            Whether or not to allow Coroutines to be executed in "the Unity way".
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.UseUnityCoroutines">
            <summary>
            Whether or not to use Unity Coroutines.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.IsOblivAeonMode">
            <summary>
            Whether or not the game is in OblivAeon mode, which is only used when playing versus OblivAeon.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameController.ShouldIncapacitatedHeroesLoseTheGame">
            <summary>
            Whether or not to end the game in defeat whenever all Heroes have been incapacitated.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoPretendAction(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Sends out a GameAction with the sole intention of activating the triggers.
            The action runs in "pretend" mode.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AskAllCardControllersInPlay(System.Func{Handelabra.Sentinels.Engine.Controller.CardController,System.Nullable{System.Boolean}},System.Boolean)">
            <summary>
            Asks all card controllers in play for a boolean value. 
            If the value does not match the assumption, then that card controller is returned.
            If all values are the same as the assumption, then null is returned.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DetermineTargetWithLowestOrHighestHitPoints(System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Int32,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Gets either the target with either the lowest or highest HP. Ambiguous situations are handled by making a decision.
            </summary>
            <param name="highest">True if we want the highest HP. False if we want the lowest.</param>
            <param name="orderedCards">A list of ordered cards from which to choose. (Ie. already ordered by lowest/highest HP)</param>
            <param name="ranking">The ranking that we want. For example, 1 is the lowest/highest, 2 is the second lowest/highest, etc.</param>
            <param name="storedResults">A list to store the desired card in.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanDealDamageAllPreventers(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.CannotDealDamageReason@,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Determines whether the provided card can deal damage. If it can, the return result will be null. 
            If it cannot, it will return the card that prevents it from dealing the damage.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsTargetable(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided "target" Card is targtable.
            </summary>
            <param name="target">The Card which may or may not be targetable.</param>
            <returns>Whether or not the provided "target" Card is targtable.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoAnyCardsPreventAction``1(Handelabra.Sentinels.Engine.Controller.TurnTakerController)">
            <summary>
            Returns any Card objects that prevent TurnTakerController from performing GameAction of type T.
            If the returned IEnumerable is empty, it means that the GameAction is not prevented.
            </summary>
            <typeparam name="T">The type of GameAction that may or may not be performable by the TurnTakerController.</typeparam>
            <param name="ttc">The TurnTakerController that may or may not be able to perform the GameAction.</param>
            <returns>Any Card objects that prevent TurnTakerController from performing GameAction of type T. If empty, the GameAction is not prevented.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToPlayCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to play a Card.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker will play a Card.</param>
            <param name="optionalSelectHero">Whether or not the selection of a HeroTurnTaker is optional.</param>
            <param name="optionalPlayCard">Whether or not playing a Card is optional for the selected HeroTurnTaker.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="additionalCriteria">If not null, any additional criteria to apply to the HeroTurnTakers that can be selected.</param>
            <param name="storedResultsTurnTaker">Stores all SelectTurnTakerDecisions that result form the call to this method.</param>
            <param name="storedResultsSelectCard">Stores all PlayCardActions that result from the call to this method.</param>
            <param name="isPutIntoPlay">Whether or not the played Card by the selected HeroTurnTaker is to be treated as being "put into play".</param>
            <param name="canBeCancelled">Whether or not selecting a HeroTurnTaker and selecting a Card to play can be cancelled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDestroyTheirCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to destroy one of their Cards.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker will destroy one of their Cards.</param>
            <param name="cardCriteria">The criteria of Cards that may be selected by the selected HeroTurnTaker, based on the HeroTurnTakerController selected.</param>
            <param name="optionalSelectHero">Whether or not the selection of a HeroTurnTaker is optional.</param>
            <param name="optionalDestroyCard">Whether or not destroy one of their Cards is optional for the selected HeroTurnTaker.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="additionalCriteria">If not null, any additional criteria to apply to the HeroTurnTakers that can be selected.</param>
            <param name="storedResultsTurnTaker">Stores all SelectTurnTakerDecisions that result form the call to this method.</param>
            <param name="storedResultsAction">Stores all DestroyCardActions that result from the call to this method.</param>
            <param name="responsibleCard">The Card that is responsible for the need to select a HeroTurnTaker to destroy one of their Cards, if different than the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDestroyTheirCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to destroy one of their Cards.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects which HeroTurnTaker will destroy one of their Cards.</param>
            <param name="cardCriteria">The criteria of Cards that may be selected by the selected HeroTurnTaker, based on the HeroTurnTakerController selected.</param>
            <param name="optionalSelectHero">Whether or not the selection of a HeroTurnTaker is optional.</param>
            <param name="optionalDestroyCard">Whether or not destroy one of their Cards is optional for the selected HeroTurnTaker.</param>
            <param name="heroCriteria">If not null, any additional criteria to apply to the HeroTurnTakers that can be selected.</param>
            <param name="storedResults">Stores all DestroyCardActions that result from the call to this method.</param>
            <param name="responsibleCard">The Card that is responsible for the need to select a HeroTurnTaker to destroy one of their Cards, if different than the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToUsePower(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.UsePowerDecision},Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to use a Power.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker will use a Power.</param>
            <param name="optionalSelectHero">Whether or not the selection of a HeroTurnTaker is optional.</param>
            <param name="optionalUsePower">Whether or not using a Power is optional for the selected HeroTurnTaker.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="storedResultsDecision">Stores all SelectTurnTakerDecisions that result form the call to this method.</param>
            <param name="storedResultsAction">Stores all UsePowerDecisions that result from the call to this method.</param>
            <param name="additionalCriteria">If not null, any additional criteria to apply to the HeroTurnTakers that can be selected.</param>
            <param name="omitHeroesWithNoUsablePowers">Whether or not to omit HeroTurnTakers from the SelectTurnTakerDecision if they have no Powers that are currently usable.</param>
            <param name="canBeCancelled">Whether or not selecting a HeroTurnTaker and selecting a Card to play can be cancelled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToSelectTargetAndDealDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker. That HeroTurnTaker selects a target Card, and the HeroTurnTaker's CharacterCard deals damage to the selected Card.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker will select a target and deal damage.</param>
            <param name="amount">The amount of damage that the selected HeroTurnTaker's CharacterCard will deal to the selected target Card.</param>
            <param name="type">The DamageType of the damage that the selected HeroTurnTaker's CharacterCard will deal to the selected target Card.</param>
            <param name="isIrreducible">Whether or not the damage that the selected HeroTurnTaker's CharacterCard will deal to the selected target Card is irreducible.</param>
            <param name="optionalSelectHero">Whether or not the selection of a HeroTurnTaker is optional.</param>
            <param name="optionalDealDamage">Whether or not dealing damage is optional for the selected HeroTurnTaker.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker and when dealing damage.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result form the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroTurnTaker(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker and stores it for future use.
            </summary>
            <param name="hero">The DecisionMaker that selects a HeroTurnTaker.</param>
            <param name="selectionType">The SelectionType of the SelectTurnTakerDecision.</param>
            <param name="optional">Whether or not selecting a HeroTurnTaker is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="heroCriteria">If not null, additional criteria to applied to which HeroTurnTakers are selectable.</param>
            <param name="numberOfCards">If the SelectionType has to do with Cards, such as selecting them, provides the number of Cards involved.</param>
            <param name="allowIncapacitatedHeroes">Whether or not incapacitated heroes are allowed to be selected.</param>
            <param name="gameAction">If not null, the GameAction that is responsible for the SelectTurnTakerDecision.</param>
            <param name="dealDamageInfo">Any damage-related information related to the SelectTurnTakerDecision for presentation purposes.</param>
            <param name="canBeCancelled">Whether or the SelectTurnTakerDecision is allowed to be cancelled by other effects.</param>
            <param name="associatedCards">Any additional Cards related to the SelectTurnTakerDecision, other than the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetAndIncreaseNextDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Int32,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a target Card and increases its next damage by the provided amount.
            </summary>
            <param name="hero">The DecisionMaker that selects which target Card will increase its next damage amount.</param>
            <param name="amountToIncrease">The amount by which the selected target Card's next damage will be increased.</param>
            <param name="numberOfUses">The number of times that the damage increase will be applied before it expires.</param>
            <param name="additionalCriteria">If not null, any additional criteria on which target Cards can be selected.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroAndIncreaseNextDamageDealt(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Int32,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker and increases its CharacterCard's next damage by the provided amount.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker's CharacterCard will have their next damage amount increased.</param>
            <param name="amountToIncrease">The amount by which the selected HeroTurnTaker's CharacterCard's next damage will be increased.</param>
            <param name="numberOfUses">The number of times that the damage increase will be applied before it expires.</param>
            <param name="additionalCriteria">If not null, any additional criteria on which HeroTurnTakers can be selected.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroCharacterCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean})">
            <summary>
            The DecisionMaker selects a HeroCharacterCard and stores it in the provided "storedResults" for future use.
            </summary>
            <param name="hero">The DecisionMaker that selects a HeroCharacterCard.</param>
            <param name="selectionType">The SelectionType of the SelectCardDecision.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a HeroCharacterCard is optional.</param>
            <param name="includeIncapacitated">Whether or not to include incapacitated HeroCharacterCards in the SelectCardDecision.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="additionalCriteria">If not null, any additional criteria to apply to the selection of HeroCharacterCards.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroAndReduceNextDamageTaken(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Int32,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker and reduces the next damage to their CharacterCard.
            </summary>
            <param name="hero">The DecisionMaker that selects which HeroTurnTaker's CharacterCard will have their damage reduced.</param>
            <param name="amountToReduce">The amount by which the selected HeroTurnTaker's CharacterCard damage will be reduced.</param>
            <param name="numberOfUses">The number of uses this reduction is applied before it expires.</param>
            <param name="additionalCriteria">If not null, any additional criteria applied to the HeroTurnTakers that can be selected.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectNumber(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Func{System.Int32,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectNumberDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a number between the provided min and max numbers and stores it in "storedResults".
            </summary>
            <param name="hero">The DecisionMaker that selects a number.</param>
            <param name="selectionType">The SelectionType of the SelectNumberDecision.</param>
            <param name="min">The minimum number that can be selected.</param>
            <param name="max">The maximum number that can be selected.</param>
            <param name="optional">Whether or not selecting a number is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="additionalCriteria">If not null, additional criteria to apply to the selectable numbers.</param>
            <param name="storedResults">Stores all SelectNumberDecisions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetAndRedirectDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a target Card meeting criteria and redirects the provided DealDamageAction to that target.
            </summary>
            <param name="hero">The DecisionMaker that selects a target Card to which damage will be redirected.</param>
            <param name="criteria">The criteria of target Cards that are selectable.</param>
            <param name="dealDamageAction">The incoming DealDamageAction that will be redirected to the selected target.</param>
            <param name="optional">Whether or not the damage being redirected is optional.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetsToDealDamageToSelf(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Nullable{System.Int32},System.Func{System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects multiple target Cards, each which will deal damage to themselves.
            </summary>
            <param name="hero">The DecisionMaker that selects which target Cards will deal damage to themselves.</param>
            <param name="amount">The amount of damage each selected target Card will deal itself.</param>
            <param name="damageType">The DamageType of the damage each selected target Card will deal itself.</param>
            <param name="numberOfTargets">The number of targets that will be selected to deal damage to themselves. Null indicates all targets that match criteria.</param>
            <param name="optional">Whether or not selecting the target Cards is optional.</param>
            <param name="requiredTargets">If not null, the minimum number of target Cards that must be selected, after which the selection becomes optional.</param>
            <param name="isIrreducible">Whether or not the damage each target Card deals themself is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="autoDecide">If true, the target Cards will be decided automatically, as if the "Choose For Me" button had already been clicked.</param>
            <param name="additionalCriteria">If not null, any additional criteria to apply to the target Cards that can be selected.</param>
            <param name="storedResultsDecisions">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsDamage">Stores all DealDamageActions that result from the call to this method.</param>
            <param name="followUpDamageInformation">If not null, Whenever the selected targets will deal themselves damage multiple times, this collection provides details on what the follow-up damage information will be.</param>
            <param name="addStatusEffect">If not null, adds a status effect to each target Card after they deal themselves damage.</param>
            <param name="selectTargetsEvenIfCannotDealDamage">If true, the target Cards will be selected even if they cannot deal themselves damage.</param>
            <param name="overrideSequenceIndex">If not null, overrides the sequence index, which indicates the ordinal number that the SelectTargetDecisions start with. Very rarely used.</param>
            <param name="stopDealingDamage">If this Func returns true, prevents further decision-making.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.EachPlayerDiscardsCards(System.Int32,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},System.Boolean,System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Each non-incapacitated HeroTurnTakerController discards the provided number of Cards from their Hands.
            </summary>
            <param name="minNumberOfCardsPerHero">The minimum number of Cards that each HeroTurnTakerController must discard from their Hands.</param>
            <param name="maxNumberOfCardsPerHero">If not null, the maximum number of Cards that each HeroTurnTakerController may discard.</param>
            <param name="storedResultsDiscard">Stores all DiscardCardActions that result from the call to this method.</param>
            <param name="allowAutoDecideHeroes">If true, allows players to select the "Choose For Me" button when prompted for the order in which HeroTurnTakerControllers discard Cards.</param>
            <param name="requiredNumberOfHeroes">If not null, the minimum number of HeroTurnTakerControllers that MUSt discard Cards, after which discards become optional.</param>
            <param name="showCounter">If true, players will be presented with a counter that keeps track of how many Cards have been discarded so far.</param>
            <param name="cardCriteria">If not null, a criteria on the types of Cards that may be discarded.</param>
            <param name="ignoreBattleZone">If true, HeroTurnTakerControllers discard Cards even if they are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndUseIncapacitatedAbility(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            The provided HeroTurnTakerController selects and uses one of their Incapacitated Abilities.
            </summary>
            <param name="heroController">The HeroTurnTakerController that will select and use one of their Incapacitated Abilities.</param>
            <param name="overrideCharacter">If not null, specifies precisely which Card will use an Incapacitated Ability. The HeroTurnTakerController is still the DecisionMaker.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndUsePower(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Controller.Power,System.Boolean},System.Int32,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.UsePowerDecision},System.Boolean,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController selects and uses one of their Powers.
            </summary>
            <param name="heroController">The HeroTurnTakerController that selects and uses one of their Powers.</param>
            <param name="optional">Whether or not the HeroTurnTakerController using a Power is optional.</param>
            <param name="powerCriteria">If not null, the criteria of Powers that may be used by the HeroTurnTakerController.</param>
            <param name="numberOfPowers">The number of Powers that the HeroTurnTakerController may select to use.</param>
            <param name="eliminateUsedPowers">If true, eliminates used Powers from being selectable to use.</param>
            <param name="storedResults">Stores all UsePowerDecisions that result from the call to this method.</param>
            <param name="showMessage">If true, shows a message that the HeroTurnTakerController will be selecting a Power. Primarily used when the power using event happens at an unusual time.</param>
            <param name="allowAnyHeroPower">If true, allows ANY Hero Power to be selected, not just those on the HeroTurnTakerController.</param>
            <param name="allowReplacements">If true, allows the Hero using the Power to be replaced by other Heroes (ie. Guise).</param>
            <param name="canBeCancelled">Whether or not the selecting and using of the Power is allowed to be cancelled by other effects.</param>
            <param name="associatedCard">Any additional Card that is associated with the Power being selected, other than the CardSource.</param>
            <param name="forceDecision">If true, requires the Hero to select a Power to use, even in situations where it would not normally be necessary (ie. If there is only 1 usable Power and it is not optional).</param>
            <param name="allowOutOfPlayPower">If true, allows Powers to be used on Cards that are out of play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndActivateAbility(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.String,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.ActivateAbilityDecision},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController selects and activates an ability on a Card that has a matching "abilityKey" that they own.
            </summary>
            <param name="hero">The HeroTurnTakerController that selects and activates one of their abilities.</param>
            <param name="abilityKey">The abilityKey to match against other Cards, to discover which ones are activatable. (Example: Argent Adept's "Perform" and "Accompany".)</param>
            <param name="cardCriteria">If not null, additional criteria on the types of Cards that may be selected.</param>
            <param name="storedResults">Stores all ActivateAbilityDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting and activating an ability is optional.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardAndDoAction(Handelabra.Sentinels.Engine.Controller.SelectCardDecision,System.Func{Handelabra.Sentinels.Engine.Controller.SelectCardDecision,System.Collections.IEnumerator},System.Boolean)">
            <summary>
            Selects a Card with the provided SelectCardDecision and then performs an action on the selected Card.
            </summary>
            <param name="selectCardDecision">The SelectCardDecision from which a Card will be selected.</param>
            <param name="actionWithCard">The action that will be performed on the selected Card.</param>
            <param name="canBeCancelled">Whether or not selecting a Card can be cancelled by other effects.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardAndDoAction_ManyPlayers(System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Func{Handelabra.Sentinels.Engine.Controller.SelectCardDecision,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Many players each select a Card. Each Card selected has an action performed on it.
            </summary>
            <param name="heroCriteria">The criteria of HeroTurnTakerControllers that will each select a Card, on which the actions will be performed.</param>
            <param name="heroSelectCardDecision">Func that returns the SelectCardDecision tp present based on the HeroTurnTakerController.</param>
            <param name="actionWithCard">The action that will be performed on each selected Card.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectFunction_ManyPlayers(System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.String},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Many players each select a Function to perform.
            </summary>
            <param name="heroCriteria">The criteria of HeroTurnTakerControllers that will each select a Function to perform.</param>
            <param name="selectFunction">Func that results a SelectFunctionDecision to make, based on the HeroTurnTakerController.</param>
            <param name="optional">Depreciated and not used. The returned SelectFunctionDecisions can be made optional, however.</param>
            <param name="storedResults">Stores all SelectFunctionDecisions that reslut from the call to this method.</param>
            <param name="outputIfCannotChooseFunction">A Func that results a string Message to display to each HeroTurnTakerController that cannot choose a Function.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.YesNoDoAction_ManyPlayers(System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.YesNoDecision},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.YesNoDecision,System.Collections.IEnumerator},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.YesNoDecision,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.YesNoDecision},System.Nullable{Handelabra.Sentinels.Engine.Controller.SelectionType},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Many players each make a YesNoDecision, after which an action may be performed depending on their answer.
            </summary>
            <param name="heroCriteria">The criteria of HeroTurnTakerControllers that each make a YesNoDecision.</param>
            <param name="heroYesNoDecision">Func that returns a YesNoDecision based on the HeroTurnTakerController.</param>
            <param name="yesAction">Func that returns the action to perform for each HeroTurnTakerController that answers Yes to the YesNoDecision.</param>
            <param name="noAction">If not null, a Func that returns the action to perform for each HeroTurnTakerController that answers No to the YesNoDecision.</param>
            <param name="storedResults">Stores all YesNoDecisions that result from the call to this method.</param>
            <param name="selectionType">The SelectionType of the YesNoDecisions.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardAndStoreResults(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided DecisionMaker selects a Card meeting provided criteria. The selected Card is stored for future use.
            </summary>
            <param name="hero">The DecisionMaker that selects a Card.</param>
            <param name="selectionType">The SelectionType of the SelectCardDecision presented to the HeroTurnTakerController.</param>
            <param name="cardCriteria">The criteria of Cards to include in the SelectCardDecision.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not the SelectCardDecision is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available for the SelectCardDecision.</param>
            <param name="gameAction">If not null, the GameAction that is responsible for the SelectCardDecision.</param>
            <param name="includeRealCardsOnly">If true, only includes "real" Cards in the SelectCardDecision (ie. not instruction Cards).</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardAndStoreResults(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Nullable{Handelabra.Sentinels.Engine.Controller.SelectionType},System.Nullable{System.Int32},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided DecisionMaker selects a Card from a provided collection of Cards. The selected Card is stored for future use.
            </summary>
            <param name="hero">The DecisionMaker that selects a Card.</param>
            <param name="selectionType">The SelectionType of the SelectCardDecision presented to the HeroTurnTakerController.</param>
            <param name="choices">The selection of Cards to choose from.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not the SelectCardDecision is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available for the SelectCardDecision.</param>
            <param name="additionalCriteria">If not null, additional criteria applied to the provided choices of which Cards can be chosen.</param>
            <param name="gameAction">If not null, the GameAction that is responsible for the SelectCardDecision.</param>
            <param name="dealDamageInfo">Any additional damage-dealing information to include with the SelectCardDecision.</param>
            <param name="secondarySelectionType">An optional, secondary SelectionType for the SelectCardDecision for those primary SelectionTypes that support it.</param>
            <param name="selectionTypeOrdinal">If not null, the ordinal number in which this SelectCardDecision appears in a series of SelectCardDecisions (ie. "First", "Second", etc)</param>
            <param name="maintainCardOrder">Whether or not the Cards in "choices" must be kept in the same order.</param>
            <param name="ignoreBattleZone">Whether or not the SelectCardDecision must be made in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetAndStoreResults(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTargetDecision},System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction}},System.Func{System.String},Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a target Card from a collection of Cards and stores the result for future use.
            </summary>
            <param name="hero">The DecisionMaker that selects a target Card.</param>
            <param name="choices">The Cards that the resulting SelectTargetDecision may choose from.</param>
            <param name="storedResults">Stores all SelectTargetDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a target Card is optional.</param>
            <param name="allowAutoDecide">Whether or not to show players the "Choose For Me" button.</param>
            <param name="additionalCriteria">If not null, additional criteria to apply to the target Cards that may be selected.</param>
            <param name="damageSource">The source of the Damage to be dealt to the selected target Card, if any.</param>
            <param name="damageAmount">The amount of damage that will be dealt to the selected target Card, if any.</param>
            <param name="damageType">The DamageType for the damage that will  be dealt to the selected target Card, if any.</param>
            <param name="isIrreducible">Whether or not the damage dealt to the selected target Card is irreducible.</param>
            <param name="dynamicNumberOfTimes">If not null, the number of times that damage will be dealt to the selected target Card.</param>
            <param name="gameAction">The GameAction that is responsible for the SelectTargetDecision, if any.</param>
            <param name="followUpDamageInformation">If not null, any additional information on future damage that will be dealt to the selected target Card.</param>
            <param name="dynamicFollowUpDamageInformation">If not null, Func that returns any dynamic additional information on future damage that will be dealt to the selected target Card. Overrides the "followUpDamageInformation" parameter.</param>
            <param name="extraInfo">A Func that returns a string of any additional info to include to the player about the SelectTargetDecision.</param>
            <param name="selectionType">The SelectionType of the SelectTargetDecision.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardsAndDoAction(Handelabra.Sentinels.Engine.Controller.SelectCardsDecision,System.Func{Handelabra.Sentinels.Engine.Controller.SelectCardDecision,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Func{System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,Handelabra.Sentinels.Engine.Controller.DamageSource)">
            <summary>
            Cards are selected from the provided SelectCardsDecision, and the provided action is performed on each Card selected.
            </summary>
            <param name="selectCardsDecision">The SelectCardsDecision that will determine the Card on which the action will be performed.</param>
            <param name="actionWithCard">Func that performs the action on each individual SelectCardDecision.</param>
            <param name="storedResults">Stores each individual SelectCardDecision that results from the call to this method.</param>
            <param name="cancelDecisionsIfTrue">If not null, when this Func returns true, any further SelectCardDecisions will be cancelled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="gameAction">The GameAction responsible for the SelectCardsDecision, if any.</param>
            <param name="ignoreBattleZone">If true, allows Cards to be selected even if they are not in the same BattleZone as the CardSource.</param>
            <param name="overrideBattleZoneWithDamageSource">If "ignoreBattleZone" is full, this will override the CardSource's BattleZone with the a DamageSource's BattleZone instead for the SelectCardDecisions.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndDiscardCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController selects and discards a single Card from their Hand.
            </summary>
            <param name="hero">The HeroTurnTakerController that will discard a Card their Hand.</param>
            <param name="optional">Whether or not the Card being discarded is optional.</param>
            <param name="additionalCriteria">If not null, provides a criteria of the kinds of Cards that can be discarded.</param>
            <param name="storedResults">Stores all DiscardCardActions resulting from the call to this method.</param>
            <param name="selectionType">The SelectionType that will be used for the SelectCardDecision.</param>
            <param name="dealDamageInfo">Provides any damage information related to the need for the Card being discarded. Example: The damage that would be redirected.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being discarded, if different than the HeroTurnTakerController.</param>
            <param name="ignoreBattleZone">If true, the HeroTurnTakerController does not need to be in the same BattleZone as the CardSource.</param>
            <param name="associatedCards">Any additional Cards that are associated with the need to discard a Card, other than the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndDiscardCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},System.Boolean,System.Func{System.Int32},Handelabra.Sentinels.Engine.Controller.GameAction,System.Func{System.String},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController selects and discards Cards from their Hand.
            </summary>
            <param name="hero">The HeroTurnTakerController that will discard Cards their Hand.</param>
            <param name="numberOfCards">If not null, the exact number of Cards that must be discarded. Otherwise, the HeroTurnTakerController may discard any number of Cards.</param>
            <param name="optional">Whether or not the Cards being discarded are optional.</param>
            <param name="requiredDiscards">If not null, the minimum number of Cards that must be discarded, after which the discards become optional.</param>
            <param name="storedResults">Stores all DiscardCardActions resulting from the call to this method.</param>
            <param name="allowAutoDecide">Whether or not the HeroTurnTakerController can use the "Choose For Me" button for the Decisions.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that returns the number of Cards that must be discarded, which is re-evaluated after each Card is discarded. Overrides the "numberOfCards" parameter.</param>
            <param name="gameAction">The GameAction that is responsible for the need to select and discard Cards, if any.</param>
            <param name="extraInfo">Any additional information to present to the player related to the Cards being discarded.</param>
            <param name="cardCriteria">If not null, the criteria of Cards that can be discarded.</param>
            <param name="selectionType">The SelectionType that will be used for the SelectCardDecisions.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being discarded, if different than the HeroTurnTakerController.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndGainHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects targets to gain a fixed amount of HP.
            </summary>
            <param name="hero">The DecisionMaker that decides which target Cards gain HP..</param>
            <param name="amount">The amount of HP each selected target Card will gain.</param>
            <param name="optional">Whether or not selecting target Cards is optional.</param>
            <param name="additionalCriteria">If not null, provides a criteria of the kinds of target Cards that can gain HP.</param>
            <param name="numberOfTargets">The number of target Cards that will be selected to gain HP.</param>
            <param name="requiredDecisions">If not null, the minimum number of target Cards that must be selected to gain HP, after which the selections become optional.</param>
            <param name="allowAutoDecide">Whether or not the DecisionMaker can use the "Choose For Me" button for the Decisions.</param>
            <param name="storedResults">Stores all GainHPActions resulting from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndMoveCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects and moves a single Card meeting criteria to the provided Location.
            </summary>
            <param name="hero">The DecisionMaker that selects which Card to move.</param>
            <param name="criteria">The criteria of Cards that can be moved.</param>
            <param name="toLocation">The Location to which the selected Card will move.</param>
            <param name="toBottom">If true, will move the selected Card to the bottom of the Location instead of the top.</param>
            <param name="optional">Whether or not the Card being moved is optional.</param>
            <param name="isPutIntoPlay">If the Card is moving to a PlayArea, whether or not to treat the Card as being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, will treat the move as playing the Card if it is moving to a PlayArea.</param>
            <param name="storedResults">Stores all SelectCardDecisions resulting from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToMoveCardFromTrash(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTakerController, who will then select a Card to move from their Trash to their "toLocation".
            </summary>
            <param name="hero">The DecisionMaker that selects a HeroTurnTakerController to move a Card from their Trash to their "toLocation".</param>
            <param name="toLocation">A Func that returns the Location to which the Card will be moved from their Trash. Is specific to the HeroTurnTakerController that is selected.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTakerController to move a Card is optional.</param>
            <param name="optionalMoveCard">When a HeroTurnTakerController is selected, whether or not their selecting of Card to move is optional.</param>
            <param name="allowAutoDecide">Whether or not selecting which HeroTurnTakerController will move a Card is optional.</param>
            <param name="toBottom">If true, will move the selected Card to the bottom of the Location instead of the top.</param>
            <param name="isPutIntoPlay">If the Card is moving to a PlayArea, whether or not to treat the Card as being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, will treat the move as playing the Card if it is moving to a PlayArea.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions resulting from the call to this method.</param>
            <param name="cardCriteria">If not null, a criteria of the kinds of Cards that may be moved from the HeroTurnTakerController's Trash to the their "toLocation".</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndPerformFunction(Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card})">
            <summary>
            Executes the provided SelectFunctionDecision.
            </summary>
            <param name="selectFunction">The SelectFunctionDecision that will be executed.</param>
            <param name="storedResults">Stores the provided SelectFunctionDecision.</param>
            <param name="associatedCards">If not null, any Cards that are associated with the SelectFunctionDecision.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndPlayCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,System.String,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},System.Boolean)">
            <summary>
            The DecisionMaker selects and plays a Card meeting criteria.
            </summary>
            <param name="hero">The DecisionMaker that selects a Card to play.</param>
            <param name="criteria">The criteria of the kinds of Cards that can be played.</param>
            <param name="optional">Whether or not the playing for a Card is optional.</param>
            <param name="isPutIntoPlay">If true, will treat the Card that is being played as being "put into play".</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="noValidCardsMessage">If not null, a custom message to display if there are no valid Cards meeting "criteria" to be played.</param>
            <param name="storedResults">Stores all PlayCardActions that result from the call to this method.</param>
            <param name="ignoreBattleZone">If true, Cards can be played even if they are not in the same BattleZone as the CardSource.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndPlayCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            The DecisionMaker selects and plays a Card from the provided collection of Card choices.
            </summary>
            <param name="hero">The DecisionMaker that selects a Card to play.</param>
            <param name="choices">The collection of Cards that can be played.</param>
            <param name="optional">Whether or not playing a Card is optional.</param>
            <param name="isPutIntoPlay">If true, will treat the played Card as being "put into play".</param>
            <param name="storedResults">Stores all PlayCardActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="ignoreBattleZone">If true, Cards can be played even if they are not in the same BattleZone as the CardSource.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndPlayCardFromHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController selects and plays a Card from their Hand.
            </summary>
            <param name="hero">The HeroTurnTakerController that will select and play a Card from their Hand.</param>
            <param name="optional">Whether or not playing a Card from Hand is optional.</param>
            <param name="storedResults">Stores all PlayCardActions that result from the call to this method.</param>
            <param name="cardCriteria">If not null, a criteria of the kinds of Cards that can be played from the HeroTurnTakerController's Hand.</param>
            <param name="isPutIntoPlay">Whether or not to treat the Card being played as being "put into play".</param>
            <param name="associateCardSource">Whether or not to associate the CardSource to the PlayCardAction that is created by calling this method.</param>
            <param name="canBeCancelled">Whether or not the playing of the Card can be cancelled by other Cards and effects.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndPlayCardsFromHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Boolean,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},Handelabra.Sentinels.Engine.Controller.CardSource,System.Func{System.Int32},System.Func{System.Boolean})">
            <summary>
            The provided HeroTurnTakerController selects and plays a number of Cards from their Hand.
            </summary>
            <param name="hero">The HeroTurnTakerController that will select and play a number of Cards from their Hand.</param>
            <param name="numberOfCards">The number of Cards that the HeroTurnTakerController will select and play from their Hand.</param>
            <param name="optional">Whether or not the HeroTurnTakerController selecting and playing Cards is optional.</param>
            <param name="requiredCards">If not null, the minimum number of Cards that must be played, after which the selection becomes optional.</param>
            <param name="cardCriteria">If not null, the criteria of Cards that are allowed to be played from the HeroTurnTakerController's Hand.</param>
            <param name="isPutIntoPlay">If true, will treat the played Cards as being "put into play".</param>
            <param name="storedResults">Stores all PlayCardActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that returns the number of Cards to be played, re-evaluated after each Card played. Overrides the "numberOfCards" parameter.</param>
            <param name="cancelDecisionsIfTrue">A Func that, when returning true, will cancel any further Cards from being selected and played from this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayCard(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Collections.Generic.List{System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided TurnTakerController plays the given Card.
            </summary>
            <param name="turnTakerController">The TurnTakerController that is playing the Card.</param>
            <param name="cardToPlay">The Card that will be played.</param>
            <param name="isPutIntoPlay">If true, will treat the Card being played as being "put into play".</param>
            <param name="wasCardPlayed">Stores the results as to whether or not the Card play was successful.</param>
            <param name="optional">Whether or not playing the Card is optional.</param>
            <param name="overridePlayLocation">If set, will override the default Location that the Card would be played to, and will instead to go to the provided Location.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being played, if different than the "turnTakerController".</param>
            <param name="evenIfAlreadyInPlay">Plays the Card even if it is already considered to be "in play".</param>
            <param name="reassignPlayIndex">Whenever a Card is played, it is assigned a PlayIndex integer. If this parameter is true, it will reassign the Card with a new PlayIndex.</param>
            <param name="storedResults">Stores and PlayCardActions that result from playing the Card.</param>
            <param name="actionSource">The GameAction that caused the Card to be played.</param>
            <param name="associateCardSource">Whether or not to associate the CardSource to the PlayCardAction that is created by calling this method.</param>
            <param name="fromBottom">If true, indicates that the Card is being played from the Bottom of a Location.</param>
            <param name="canBeCancelled">Whether or not the playing of the Card is allowed to be cancelled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CardEntersPlay(Handelabra.Sentinels.Engine.Model.Card,System.Boolean,Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.CardEntersPlayAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Used to send out a dedicated CardEntersPlayAction so that Triggers can react at the appropriate time.
            CardControllers never need to call this directly.
            </summary>
            <param name="target">The Card that is entering play.</param>
            <param name="isPutIntoPlay">Whether or not the Card is considered to be put into play.</param>
            <param name="ttc">The TurnTakerController responsible for the Card entering play.</param>
            <param name="origin">The Location from which the Card is entering play.</param>
            <param name="storedResults">Stores the CardEntersPlayAction created by the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayCardIfAble(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Boolean[],System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Plays the provided Card, as long as it is allowed to be played.
            </summary>
            <param name="turnTakerController">The TurnTakerController that is playing the Card.</param>
            <param name="cardToPlay">The Card to try and play.</param>
            <param name="wasSuccessful">Stores whether or not playing the Card was successful.</param>
            <param name="isPutIntoPlay">If true, considers the played Card to be </param>
            <param name="storedResults">Stores all PlayCardActions created as a result of calling this method.</param>
            <param name="associateCardSource">Any other CardSources that are associated with playing the Card.</param>
            <param name="canBeCancelled">Whether or not the Card being played can be cancelled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.OrderTargetsByHighestHitPoints(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns target Cards in order of highest to lowest HP.
            </summary>
            <param name="additionalCriteria">Any additional criteria to apply to the Cards to order by highest HP.</param>
            <param name="ignoreBattleZone">If true, looks across all BattleZones, not just those visible to the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.OrderTargetsByLowestHitPoints(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns target Cards in order of lowest to highest HP.
            </summary>
            <param name="additionalCriteria">Any additional criteria to apply to the Cards to order by lowest HP.</param>
            <param name="ignoreBattleZone">If true, looks across all BattleZones, not just those visible to the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayTopCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean,System.Int32,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.PlayCardAction},Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Plays the top Card of the provided TurnTakerController's Deck.
            </summary>
            <param name="decisionMaker">If the Card being played is optional, this is the HeroTurnTakerController that makes the decision as to whether or not it is played.</param>
            <param name="turnTakerController">The TurnTakerController whose Deck will have the top Card of their Deck played.</param>
            <param name="optional">Whether or not playing the top Card of the Deck is optional.</param>
            <param name="numberOfCards">The number of Cards to play from the top of the Deck.</param>
            <param name="upTo">If true, plays "up to" the "numberOfCards", instead of always the "numberOfCards" exactly.</param>
            <param name="playedCards">Stores all Cards that are played as result of calling this method.</param>
            <param name="isLimitedAndInPlay">Returns whether or not the Cards that were played were prevented because they were Limited and already in play.</param>
            <param name="optionalAnswerWasYes">If the top Card playing is optional, stores whether or not the "decisionMaker" decided to play the Card.</param>
            <param name="isPutIntoPlay">If true, treats the played Card as being "put into play" instead of just played normally.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being played, if different than the "turnTakerController".</param>
            <param name="playBottomInstead">If true, will play the bottom Card of the Deck instead of the Top.</param>
            <param name="playAnotherIfLimitedAndInPlay">If true, if the Card that would be played is a limited Card that is already in play, will play another Card afterwards from the top of the same Deck.</param>
            <param name="showMessage">If true, shows a message that the top Card of the Deck will be played. Used when the Card is played in an unusual situation.</param>
            <param name="storedResults">Stores all PlayCardAction that result from the call to this method.</param>
            <param name="overrideDeck">If not null, overrides the Deck from which the Card will have its top Card played.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayTopCardOfLocation(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Int32,System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.CardSource,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,System.Boolean)">
            <summary>
            Plays the top Card of the provided Location.
            </summary>
            <param name="ttc">The TurnTakerController whose Location will be played.</param>
            <param name="location">The Location from which the top Card will be played.</param>
            <param name="optional">If true, asks all players to decide whether or not the Card should be played.</param>
            <param name="numberOfCards">The number of Cards to play off the top of the provided Location.</param>
            <param name="requiredNumberOfCards">If not null, the minimum number of Cards that must be played from the top of the provided Location, after which it becomes optional.</param>
            <param name="isPutIntoPlay">If true, treats the played Card as being "put into play" instead of just played normally.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being played, if different than the "turnTakerController".</param>
            <param name="overridePlayLocation">If set, overrides the Location to which the Card will be played.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="playedCards">Stores all Cards that were played as a result of the call to this method.</param>
            <param name="showMessage">If true, shows a message that the top Card of the Location will be played.</param>
            <param name="showMessageCardSource">If "showMessage" message is true, whether or not to also show the CardSource when the message is displayed.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.String,System.Func{System.Int32},Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Plays the Cards that match the provided "cardCriteria".
            </summary>
            <param name="hero">The HeroTurnTakerController that decides which Cards are played, if not all of them automatically.</param>
            <param name="cardCriteria">The criteria of Cards to be played.</param>
            <param name="optional">Whether or not the playing of the Cards is optional.</param>
            <param name="isPutIntoPlay">If true, treats the played Cards as being "put into play" instead of just played normally.</param>
            <param name="numberOfCards">If not null, indicates the number of Cards to play.</param>
            <param name="requiredDecision">If not null, the minimum number of Cards that must be played, after which it becomes optional.</param>
            <param name="allowAutoDecide">Whether or not the HeroTurnTakerController DecisionMaker is allowed to use the "Choose For Me" button.</param>
            <param name="storedResults">Stores any SelectCardDecisions that result from the call to this method.</param>
            <param name="cardTypeDescription">A text description of the Cards that are attempting to be played, for message purposes.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that returns an integer as to how many Cards to play, which is re-evaluated after each Card played.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being played.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PreventPhaseAction(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Prevents the provided TurnPhase from performing its usual action. This essentially skips the TurnPhase.
            Example: The PlayCard phase will not play any Cards.
            </summary>
            <param name="turnPhase">The TurnPhase to skip.</param>
            <param name="showMessage">Whether or not to show a message about the TurnPhase being skipped.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RedirectDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Redirects the provided DealDamageAction to another target Card.
            </summary>
            <param name="dealDamage">The DealDamageAction to redirect the damage of.</param>
            <param name="newTarget">The new target Card that the damage will be redirected to.</param>
            <param name="isOptional">Whether or not the damage redirection is optional.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReduceDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Int32,Handelabra.Sentinels.Engine.Controller.ITrigger,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reduces a fixed amount of damage of the provided DealDamageAction.
            </summary>
            <param name="dealDamage">The DealDamageAction to reduce the damage of.</param>
            <param name="amountToReduce">The amount of damage reduction to apply to the provided DealDamageAction.</param>
            <param name="trigger">The ITrigger that is causing the damage amount to be reduced.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.ReduceDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Int32},Handelabra.Sentinels.Engine.Controller.ITrigger,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReduceDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Int32},Handelabra.Sentinels.Engine.Controller.ITrigger,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reduces a dynamic amount of damage of the provided DealDamageAction.
            </summary>
            <param name="dealDamage">The DealDamageAction to reduce the damage of.</param>
            <param name="dynamicAmountToReduce">A Func returning the dynamic amount of damage reduction to apply to the provided DealDamageAction, based on the DealDamageAction itself.</param>
            <param name="triggerSource">The ITrigger that is causing the damage amount to be reduced.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReducePhaseActionCount(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reduces the phase action count of the provided TurnPhase by the provided amount.
            The phase action count determines the number of times a TurnPhase can perform its action.
            Example: Reduce the number of Cards that can be played in the PlayCard phase.
            </summary>
            <param name="phase">The TurnPhase whose phase action count will be reduced.</param>
            <param name="amount">The amount of reduction to apply to the provided TurnPhase.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveInhibitor(Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Removes the inhibitors on the provided CardController.
            </summary>
            <param name="cardController">The CardController to remove inhibitors from.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveInhibitorException(Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Removes the inhibitor exceptions on the provided CardController.
            </summary>
            <param name="cardController">The CardController to remove the inhibitor exceptions from.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean)">
            <summary>
            Marks a Trigger for removal, so that it will no longer take effect.
            </summary>
            <param name="trigger">The ITrigger to remove.</param>
            <param name="includeOutOfPlay">Removes the Trigger even if it is an out-of-play Trigger.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTriggers(System.Func{Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean},System.Boolean)">
            <summary>
            Removes all triggers matching the given criteria.
            </summary>
            <param name="criteria">The criteria of ITriggers to be removed.</param>
            <param name="includingOutOfPlay">If true, even removes out-of-play Triggers.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RevealCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.RevealCardsAction},Handelabra.Sentinels.Engine.Controller.RevealedCardDisplay,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reveals Cards from the provided Location until either a Card has been revealed meeting the "revealUntil" criteria, or the Location runs out of Cards to reveal.
            </summary>
            <param name="revealingTurnTaker">The TurnTakerController that is revealing the Cards.</param>
            <param name="location">The Location from which Cards are revealed.</param>
            <param name="revealUntil">Reveals Cards from the Location until a Card matching this criteria is revealed.</param>
            <param name="numberOfMatches">The number of Cards that must match the "revealUntil" criteria for the Card revealing to stop.</param>
            <param name="storedResults">Stores all RevealCardsActions resulting from the call to this method.</param>
            <param name="revealedCardDisplay">The style of message to display to the players when revealing Cards. 
            None: No message. 
            Message: Just a text message. 
            ShowMatchingCards: Only shows the revealed Cards that match the "revealUntil" criteria. 
            ShowRevealedCards: Shows all Cards that are revealed.
            </param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RevealCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,Handelabra.Sentinels.Engine.Controller.RevealedCardDisplay,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.RevealCardsAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reveals a certain number of Cards from the provided Location.
            </summary>
            <param name="revealingTurnTaker">The TurnTakerController that is revealing Cards.</param>
            <param name="location">The Location from which Cards will be revealed.</param>
            <param name="numberOfCards">The number of Cards to reveal from the Location.</param>
            <param name="storedResults">All Cards that are revealed as a result of calling this method.</param>
            <param name="fromBottom">If true, reveals Cards from the bottom of the provided Location instead of the top.</param>
            <param name="revealedCardDisplay">The style of message to display to the players when revealing Cards. 
            None: No message. 
            Message: Just a text message. 
            ShowMatchingCards: Only shows the revealed Cards that match the "revealUntil" criteria. 
            ShowRevealedCards: Shows all Cards that are revealed.
            </param>
            <param name="storedResultsAction">Stores all RevealCardsActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndDestroyCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a Card matching the LinqCardCriteria to be destroyed.
            </summary>
            <param name="hero">The HeroTurnTakerController that selects which Card to destroy.</param>
            <param name="cardCriteria">The types of Cards that are able to be destroyed.</param>
            <param name="optional">Whether or not the destruction of a Card meeting LinqCardCriteria is optional.</param>
            <param name="storedResultsAction">Stores all DestroyCardActions that result from the call to this method.</param>
            <param name="responsibleCard">The Card that is responsible for selecting a Card to destroy, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndDestroyCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Func{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},System.Func{System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Boolean},System.Func{System.String},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects and destroys one or more Cards. 
            </summary>
            <param name="hero">The HeroTurnTakerController that is the DecisionMaker.</param>
            <param name="cardCriteria">The criteria of Cards that can be selected for destruction.</param>
            <param name="numberOfCards">If set, the number of Cards to select to be destroyed.</param>
            <param name="optional">Whether or not destroying the Cards is optional.</param>
            <param name="requiredDecisions">If set, the minimum number of Cards that must be destroyed.</param>
            <param name="dynamicNumberOfCards">If set, a dynamic number of Cards to select to be destroyed.</param>
            <param name="storedResultsAction">Stores all DestroyCardActions that result from the call to this method.</param>
            <param name="cancelDecisionsIfTrue">If this Func is ever true, will stop selecting Cards to destroy.</param>
            <param name="ignoreBattleZone">If true, can select Cards in any BattleZone, even if they are not normally visisble to the CardSource.</param>
            <param name="responsibleCard">The Card that is responsible for selecting and destroying Cards.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available. If null, this method will try to infer whether it should be available.</param>
            <param name="extraInfo">A string containing any extra information to display to the player regarding the selection of Cards to destroy.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves many Cards to a single Location, one at a time.
            </summary>
            <param name="taker">The TurnTakerController that is moving the Cards.</param>
            <param name="cardsToMove">The Cards to move to the destination Location.</param>
            <param name="destination">The Location to which the Cards will be moved.</param>
            <param name="toBottom">If true, will put the Cards on the bottom of the destination Location instead of the top.</param>
            <param name="isPutIntoPlay">If true, and the Card is moving into a PlayArea, it treats the move as if the Card were being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and the Card is moving into a PlayArea, will treat the Card as if it were being played.</param>
            <param name="responsibleTurnTaker">The TurnTakerController that is responsible for the Cards being moved, if different than the "taker" TurnTakerController.</param>
            <param name="showIndividualMessages">If true, shows an individual message for each Card being moved.</param>
            <param name="isDiscard">If true, treats the movement of the Card as if the Card were being discarded.</param>
            <param name="storedResultsAction">Stores all MoveCardActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Func{Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves many Cards to a dynamic Location based on the Card being moved, one at a time.
            </summary>
            <param name="taker">The TurnTakerController that is moving the Cards.</param>
            <param name="cardsToMove">The Cards to move to the destination Location.</param>
            <param name="destinationBasedOnCard">A Func that returnns the MoveCardDestination to move the Card to, based on the Card itself.</param>
            <param name="toBottom">If true, will put the Cards on the bottom of the destination Location instead of the top.</param>
            <param name="isPutIntoPlay">If true, and the Card is moving into a PlayArea, it treats the move as if the Card were being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and the Card is moving into a PlayArea, will treat the Card as if it were being played.</param>
            <param name="responsibleTurnTaker">The TurnTakerController that is responsible for the Cards being moved, if different than the "taker" TurnTakerController.</param>
            <param name="showIndividualMessages">If true, shows an individual message for each Card being moved.</param>
            <param name="isDiscard">If true, treats the movement of the Card as if the Card were being discarded.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Func{Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location},System.Boolean,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Func{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.MoveCardDisplay,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves chosen Cards meeting the LinqCardCriteria to a dynamic Location based on the Card being moved.
            </summary>
            <param name="hero">The HeroTurnTakerController DecisionMaker that chooses the Cards to move.</param>
            <param name="cardCriteria">The LinqCardCriteria that determines the kinds of Cards that can be moved.</param>
            <param name="locationBasedOnCard">A Func that returnns the Location to move the Card to, based on the Card itself.</param>
            <param name="toBottom">If true, will put the Cards on the bottom of the destination Location instead of the top.</param>
            <param name="selectionType">The SelectionType of the Decision that is presented when choosing which Cards to move.</param>
            <param name="numberOfCards">The number of Cards to be chosen to move. If null, all applicable Cards can be chosen.</param>
            <param name="optional">Whether or not the moving of the Cards is optional.</param>
            <param name="requiredDecisions">If set, the minimum number of Cards that MUST be moved, after which the moves become optional.</param>
            <param name="allowAutoDecide">Whether or not the "hero" DecisionMaker is allowed to use the "Choose For Me" button to determine which Cards to move.</param>
            <param name="isPutIntoPlay">If true, and the Card is moving into a PlayArea, it treats the move as if the Card were being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and the Card is moving into a PlayArea, will treat the Card as if it were being played.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that returns a dynamic number of Cards to move. Will be called in between each Card moved to see if it has changed.</param>
            <param name="autoDecide">If true, the Game will automatically choose the Cards to be moved, and their order.</param>
            <param name="moveCardDisplay">If set to ShowEachCard, will show a message after each Card moves. If OnlyIfNoMatches, will only show a message if no matching Cards were found.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves Cards from one Location to another Location.
            </summary>
            <param name="taker">The TurnTakerController that is moving the Cards.</param>
            <param name="fromLocation">The Location from which the Cards will be moved.</param>
            <param name="toLocation">The Location to which the Cards will be moved.</param>
            <param name="numberOfCards">The number of Cards to move from the "fromLocation" to the "toLocation".</param>
            <param name="toBottom">If true, will put the Cards on the bottom of the destination Location instead of the top.</param>
            <param name="isPutIntoPlay">If true, and the Card is moving into a PlayArea, it treats the move as if the Card were being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and the Card is moving into a PlayArea, will treat the Card as if it were being played.</param>
            <param name="responsibleTurnTaker">The TurnTakerController that is responsible for the Cards being moved, if different than the "taker" TurnTakerController.</param>
            <param name="showIndividualMessages">If true, shows an individual message for each Card being moved.</param>
            <param name="isDiscard">If true, treats the movement of the Card as if the Card were being discarded.</param>
            <param name="storedResults">Stores all MoveCardActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndReturnCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            A HeroTurnTakerController selects Cards matching the LinqCardCriteria and returns them either to their Hand or their Deck.
            </summary>
            <param name="hero">The HeroTurnTakerController that selects the Cards to return.</param>
            <param name="numberOfCards">If set, the number of cards that the HeroTurnTakerController will select to retrun. If null, all Cards will be returned.</param>
            <param name="cardCriteria">The LinqCardCriteria describing the criteria of Cards that can be returned.</param>
            <param name="toHand">If true, returns the Cards to the HeroTurnTakerController's Hand. If "toDeck" is also true, gives a choice between Hand and Deck.</param>
            <param name="toDeck">If true, returns the Cards to the HeroTurnTakerController's Deck. If "toHand" is also true, gives a choice between Hand and Deck.</param>
            <param name="optional">Whether or not the returning of the Cards is optional.</param>
            <param name="requiredDecisions">If set, the minimum number of Cards that MUST be returned, after which the moves become optional.</param>
            <param name="storedResults">Stores all MoveCardActions that result from the call to this method.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that returns a dynamic number of Cards to move. Will be called in between each Card moved to see if it has changed.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoAction(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Executes the provided GameAction, including allowing Before and After Triggers to respond to it. 
            This is called by the engine but not directly by CardControllers.
            </summary>
            <param name="action">The GameAction to execute.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns a collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage from a given DamageSource if the target were the provided "target" Card.
            This is the dynamic amount version, whereby the damage amount to deal depends on the Target.
            </summary>
            <param name="damageSource">The source of the damage that would be dealt.</param>
            <param name="target">The target that would be dealt damage.</param>
            <param name="amount">A function which takes in a "target" and returns an amount of damage to be dealt based on that target Card.</param>
            <param name="type">An optional DamageType for the damage.</param>
            <param name="isIrreducible">Whether or not the damage being dealt is irreducible.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>A collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage from a given DamageSource if the target were the provided "target" Card.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Model.Card)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.SelectTargetDecision,Handelabra.Sentinels.Engine.Model.Card)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns a collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage if the provided DealDamageAction had its target Card changed to be "target".
            </summary>
            <param name="dealDamage">The DealDamageAction to modify with a new target.</param>
            <param name="target">The new target Card, for which the DamagePreviewResults will be generated</param>
            <returns>A collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage if the provided DealDamageAction had its target Card changed to be "target".</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.SelectTargetDecision,Handelabra.Sentinels.Engine.Model.Card)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns a collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage from a given DamageSource if the target were the provided "target" Card.
            </summary>
            <param name="damageSource">The source of the damage that would be dealt.</param>
            <param name="target">The target that would be dealt damage.</param>
            <param name="amount">The fixed amount of damage that would be dealt. Only "amount" OR "dynamicAmount" are necessary.</param>
            <param name="dynamicAmount">A function which takes in a "target" and returns an amount of damage to be dealt based on that target Card. Only "amount" OR "dynamicAmount" are necessary.</param>
            <param name="type">An optional DamageType for the damage.</param>
            <param name="isIrreducible">Whether or not the damage being dealt is irreducible.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>A collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage from a given DamageSource if the target were the provided "target" Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.IDecision},Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            A specific HeroTurnTakerController discards a specific Card.
            </summary>
            <param name="player">The HeroTurnTakerController that will discard the Card.</param>
            <param name="cardToDiscard">The Card to be discarded.</param>
            <param name="decisionSources">Any Decisions which led to the Card being discarded.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the discard, if any.</param>
            <param name="storedResults">Stores all DiscardCardAction that are produced by the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            A specific HeroTurnTakerController discards ALL cards matching the LinqCardCriteria.
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that will discards the Cards.</param>
            <param name="cardCriteria">The LinqCardCriteria of Cards the HeroTurnTakerController must discard.</param>
            <param name="storedResults">Stores all DiscardCardAction that are produced by the call to this method.</param>
            <param name="allowAutoDecide">Whether or not to allow the "Choose For Me" button. True by default.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            A specific HeroTurnTakerController discards a specific set of Cards.
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that will discard the Cards.</param>
            <param name="cards">The Cards to be discarded.</param>
            <param name="storedResults">Stores all DiscardCardAction that are produced by the call to this method.</param>
            <param name="allowAutoDecide">Whether or not to allow the "Choose For Me" button. True by default.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardTopCard(Handelabra.Sentinels.Engine.Model.Location,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Discards the top Card at the specified Location (Deck, Trash, etc)
            </summary>
            <param name="location">The Location from which the top Card will be discarded.</param>
            <param name="storedResults">Stores any MoveCardAction that result from the call to this method.</param>
            <param name="showCard">If not null, will show players a message for any top cards discarded that match the criteria.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the discard, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardTopCardsOfLocations(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Location},System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Discards the specified number of Cards from the top of the specified Locations.
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that gets to choose the order of Locations that are discarded from. All players decide together if null.</param>
            <param name="locations">The Locations that have Cards discarded from the top of them.</param>
            <param name="amount">The number of Cards to discard from each Location.</param>
            <param name="storedResults">Stores any MoveCardAction that result from the call to this method.</param>
            <param name="showCards">If not null, will show players a message for any top cards discarded that match the criteria.</param>
            <param name="optional">If true, each Location must answer a YesNoAmountDecision as to whether or not that Location should have its Cards discarded.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the discard, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardTopCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Func{System.String},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Discards the provided fixed number of Cards from the provided Location.
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that decides whether or not to discard if it is optional.</param>
            <param name="location">The Location that will have Cards discarded from it.</param>
            <param name="amount">The number of Cards to discard from the provided Location.</param>
            <param name="storedResults">Stores any MoveCardAction that result from the call to this method.</param>
            <param name="showCards">If not null, will show players a message for any top cards discarded that match the criteria.</param>
            <param name="optional">If true, each Location must answer a YesNoAmountDecision as to whether or not that Location should have its Cards discarded.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the discard, if any.</param>
            <param name="extraInfo">If not null, an extra string that will be shown to the "decisionMaker" in association with a YesNoDecision created if the discard is "optional".</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardTopCardsOfDecks(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Boolean},System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectLocationDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Discards the provided number of Cards from the top of all Locations matching the "locationCriteria".
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that gets to choose the order of Locations that are discarded from. All players decide together if null.</param>
            <param name="locationCriteria">The criteria of Locations to discard from.</param>
            <param name="amount">The number of Cards to discard from the top of each Location matching the "locationCriteria".</param>
            <param name="storedResultsLocations">Stores all SelectLocationDecisions created by calling this method.</param>
            <param name="storedResultsMove">Stores all MoveCardActions created by calling this method.</param>
            <param name="showCards">If not null, will show players a message for any top cards discarded that match the criteria.</param>
            <param name="requiredDecisions">If defined, the minimum number of locations that must be discarded from before it becomes optional. Set this to 0 for fully-optional discards.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the discard, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DrawCard(Handelabra.Sentinels.Engine.Model.HeroTurnTaker,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DrawCardAction},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.YesNoDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTaker draws a single Card from their Deck.
            </summary>
            <param name="heroTurnTaker">The HeroTurnTaker that draws a Card.</param>
            <param name="optional">Whether or not the drawing of a Card is optional.</param>
            <param name="storedResults">Stores any DrawCardActions resulting from calling this method.</param>
            <param name="allowAutoDraw">Whether or not to permit the Card to be automatically drawn.</param>
            <param name="storedResultsDecision">Stores any YesNoDecisions resulting from calling this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DrawCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DrawCardAction},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            All HeroTurnTakers matching LinqTurnTakerCriteria draw a single Card.
            </summary>
            <param name="decisionMaker">The HeroTurnTakerController that decides the order in which Cards are drawn, and whether or not they are drawn if "optional" is true.</param>
            <param name="heroCriteria">The criteria of HeroTurnTakerControllers that draw a Card.</param>
            <param name="optional">Whether or not drawing a Card is optional for each Hero.</param>
            <param name="requiredDraws">If set, indicates the minimum number of HeroTurnTakers that MUST draw cards.</param>
            <param name="allowAutoDraw">Whether or not the heroes are allowed to automatically draw cards without being prompted, even if they are optional. True by default.</param>
            <param name="storedResults">Stores all DrawCardActions resulting from calling this method.</param>
            <param name="allowAutoDrawOrder">Whether or not the heroes are allowed to have the order of Card draws automatically determined by the game. True by default.</param>
            <param name="dealDamageInfo"></param>
            <param name="ignoreBattleZone">If true, heroes in all battle zones draw Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DrawCards(Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DrawCardAction},System.Boolean,System.Func{System.Boolean},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            All HeroTurnTakers matching LinqTurnTakerCriteria draw a specific numbre of Cards.
            </summary>
            <param name="heroCriteria">The criteria of HeroTurnTakers that will draw Cards.</param>
            <param name="numberOfCards">The number of Cards each matching HeroTurnTaker will draw.</param>
            <param name="optional">Whether or not the drawing of Cards is optional for the heroes.</param>
            <param name="upTo">If true, makes each individual Card draw optional.</param>
            <param name="allowAutoDecide">Whether or not the heroes are allowed to have the order of Card draws automatically determined by the game. True by default.</param>
            <param name="storedResults">Stores all DrawCardActions resulting from calling this method.</param>
            <param name="allowAutoDraw">Whether or not the heroes are allowed to automatically draw cards without being prompted, even if they are optional. True by default.</param>
            <param name="stopCondition">If defined, drawing Cards will stop immediately if the provided Func returns true.</param>
            <param name="allowAutoDrawOrder">Whether or not the heroes are allowed to have the order of Card draws automatically determined by the game. True by default.</param>
            <param name="dealDamageInfo"></param>
            <param name="cardSource"></param>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DrawCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DrawCardAction},System.Boolean,System.Func{System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController will draw the specified number of Cards.
            </summary>
            <param name="hero">The HeroTurnTakerController that will draw Cards.</param>
            <param name="numberOfCards">The number of Cards the HeroTurnTakerController will draw.</param>
            <param name="optional">Whether or not the drawing of Cards is optional for the HeroTurnTakerController.</param>
            <param name="upTo">If true, makes each individual Card draw optional.</param>
            <param name="storedResults">Stores all DrawCardActions resulting from calling this method.</param>
            <param name="allowAutoDraw">Whether or not the HeroTurnTakerController is allowed to automatically draw Cards without being prompted, even if they are optional. True by default.</param>
            <param name="stopCondition">If defined, drawing Cards will stop immediately if the provided Func returns true.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoAnyTriggersRespondToAction(Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean)">
            <summary>
            Returns whether or not there are any Triggers that respond to the provided GameAction.
            </summary>
            <param name="action">The GameAction that will be evaluated for responding Triggers.</param>
            <param name="excludeCancelledAndHidden">If true, will not evaluate Triggers with TriggerType.CancelAction nor TriggerType.Hidden.</param>
            <returns>Whether or not there are any Triggers that respond to the provided GameAction.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.WillDrawCauseReshuffle(Handelabra.Sentinels.Engine.Model.HeroTurnTaker,System.Int32)">
            <summary>
            Returns whether or not the next Card that HeroTurnTaker draws will cause their Trash to be reshuffled into their Deck.
            </summary>
            <param name="hero">The HeroTurnTaker to evaluate for draw causing a reshuffle.</param>
            <param name="numberOfCardsToDraw">The number of Cards the HeroTurnTaker would be drawing.</param>
            <returns>Whether or not the next Card that HeroTurnTaker draws will cause their Trash to be reshuffled into their Deck.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.EnterNextTurnPhase">
            <summary>
            Enters the next TurnPhase after the current one. Should only be called by the PhaseChangeAction and Views, not directly by CardControllers!
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindNextTurnPhase(Handelabra.Sentinels.Engine.Model.TurnPhase)">
            <summary>
            Finds out what the next TurnPhase will be without actually going to it.
            This method takes anything related into consideration, such as starting a game, overridden TurnPhases, etc.
            Is called primarily by the View and not directly by CardControllers.
            </summary>
            <param name="currentPhase">The current TurnPhase, from which the next TurnPhase will be determined.</param>
            <returns>The next TurnPhase after the provided TurnPhase.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindLastTurnPhase(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Finds the last turn phase of the given turn taker's turn. 99% of the time this will be their End phase, 
            but in case a card like Breaking the Rules is out, it could be different.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindAllTargetsWithLowestHitPoints(System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource,System.Int32,System.Boolean)">
            <summary>
            Finds all the Targets in play that would be considered as having the Nth lowest HP.
            This is the non-coroutine version, so the players will not make any decisions regarding which targets are considered to have the highest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Lowest, 2 = Second Lowest, 3 = Third Lowest, etc.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="numberOfTargets">The number of targets to look for before stopping.</param>
            <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <returns>The Targets in play that would be considered as having the Nth lowest HP.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindAllTargetsWithHighestHitPoints(System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource,System.Int32,System.Boolean)">
            <summary>
            Finds all the Targets in play that would be considered as having the Nth highest HP.
            This is the non-coroutine version, so the players will not make any decisions regarding which targets are considered to have the highest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Highest, 2 = Second Highest, 3 = Third Highest, etc.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="numberOfTargets">The number of targets to look for before stopping.</param>
            <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <returns>The Targets in play that would be considered as having the Nth lowest HP.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetsWithHighestHitPoints(System.Int32,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCardController(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Finds the CardController for the provided Card model object.
            </summary>
            <param name="card">The Card model object to look for.</param>
            <returns>The CardController for the provided Card model object.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCardController(System.String)">
            <summary>
            Returns the first-found CardController that matches the provided "identifier".
            </summary>
            <param name="identifier">The identifier of the CardController to find.</param>
            <returns>The first-found CardController that matches the provided "identifier".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCard(System.String)">
            <summary>
            Returns the first-found Card that matches the provided "identifier".
            </summary>
            <param name="identifier">The identifier of the Card to find.</param>
            <returns>The first-found Card that matches the provided "identifier".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCardControllersWhere(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all CardControllers that match the provided "where" critiera.
            </summary>
            <param name="where">The criteria of Cards to return CardControllers for.</param>
            <param name="realCardsOnly">If true, this method will ignore any Cards that are not considered "real" Cards, such as instruction Cards.</param>
            <param name="battleZone">If specified, only will return CardControllers that are within the provided BattleZone.</param>
            <returns>All CardControllers that match the provided "where" critiera.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCardsWhere(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all Cards that match the provided "where" criteria.
            </summary>
            <param name="where">The criteria of Cards to return.</param>
            <param name="realCardsOnly">If true, this method will ignore any Cards that are not considered "real" Cards, such as instruction Cards.</param>
            <param name="visibleToCard">If provided, will only return Cards that are "visible" to the provided CardSource. See "CardController.AskIfCardIsVisibleToCardSource()" for more details.</param>
            <param name="battleZone">If specified, only will return CardControllers that are within the provided BattleZone.</param>
            <returns>All Cards that match the provided "where" criteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCardsWhere(Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all Cards that match the provided LinqCardCriteria.
            </summary>
            <param name="cardCriteria">The criteria of Cards to return.</param>
            <param name="realCardsOnly">If true, this method will ignore any Cards that are not considered "real" Cards, such as instruction Cards.</param>
            <param name="visibleToCard">If provided, will only return Cards that are "visible" to the provided CardSource. See "CardController.AskIfCardIsVisibleToCardSource()" for more details.</param>
            <param name="battleZone">If specified, only will return CardControllers that are within the provided BattleZone.</param>
            <returns>All Cards that match the provided LinqCardCriteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindEnvironmentTurnTakerController(Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns the TurnTakerController of the Environment.
            </summary>
            <param name="bz">If not null, will return the Environment at the provided BattleZone.</param>
            <returns>The TurnTakerController of the Environment.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindHeroTurnTakerController(Handelabra.Sentinels.Engine.Model.HeroTurnTaker)">
            <summary>
            Returns the HeroTurnTakerController of the provided HeroTurnTaker model object.
            </summary>
            <param name="heroTurnTaker">The HeroTurnTaker whose HeroTurnTakerController will be returned.</param>
            <returns>The HeroTurnTakerController of the provided HeroTurnTaker model object.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindHeroTurnTakerControllers(Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all HeroTurnTakerControllers.
            </summary>
            <param name="battleZone">If provided, will only return HeroTurnTakerControllers that are at the specified BattleZone.</param>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindLocationsWhere(System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Boolean})">
            <summary>
            Returns all Locations matching the "where" criteria.
            </summary>
            <param name="where">The criteria of Locations to return.</param>
            <returns>All Locations matching the "where" criteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetsInPlay(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Finds all targets in play, returned as Cards, with optional additional criteria.
            </summary>
            <param name="criteria">Any criteria applied to the targets to find.</param>
            <param name="battleZone">If not null, restricts to only finding Cards that are in the provided BattleZone.</param>
            <returns>All targets in play, returned as Cards, with optional additional criteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetsWithHighestHitPoints(System.Int32,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the Targets in play that would be considered as having the Nth highest HP.
            This is the coroutine version, which can involve a player-made decision over which target is considered to have the highest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Highest, 2 = Second Highest, 3 = Third Highest, etc.</param>
            /// <param name="numberOfTargets">The number of targets to look for before stopping.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="storeHighest">Stores all Cards with highest HP found.</param>
            <param name="gameAction">The GameAction that is trying to determine the target with the highest HP, if any.</param>
            <param name="dealDamageInfo">If trying to find the target with the highest HP so that damage can be dealt, this is information on the damage that will be dealt.</param>
            <param name="evenIfCannotDealDamage">If true, will find the targets with the highest HP even if damage won't be dealt. Otherwise, the search may be prevented.</param>
            <param name="optional">Whether or not determining which target is considered to be the highest HP is optional or not.</param>
            <param name="beforeDecisionAction">If not null, executes the IEnumerator coroutine prior to any Decisions determining which which target is considered to have the highest HP.</param>
            /// <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The Targets in play that would be considered as having the Nth highest HP.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.FindAllTargetsWithHighestHitPoints(System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetsWithLowestHitPoints(System.Int32,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the Targets in play that would be considered as having the Nth lowest HP.
            This is the coroutine version, which can involve a player-made decision over which target is considered to have the lowest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Lowest, 2 = Second Lowest, 3 = Third Lowest, etc.</param>
            <param name="numberOfTargets">The number of targets to look for before stopping.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="storeHighest">Stores all Cards with lowest HP found.</param>
            <param name="gameAction">The GameAction that is trying to determine the target with the lowest HP, if any.</param>
            <param name="dealDamageInfo">If trying to find the target with the lowest HP so that damage can be dealt, this is information on the damage that will be dealt.</param>
            <param name="evenIfCannotDealDamage">If true, will find the targets with the lowest HP even if damage won't be dealt. Otherwise, the search may be prevented.</param>
            <param name="optional">Whether or not determining which target is considered to be the lowest HP is optional or not.</param>
            <param name="beforeDecisionAction">If not null, executes the IEnumerator coroutine prior to any Decisions determining which which target is considered to have the lowest HP.</param>
            <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The Targets in play that would be considered as having the Nth lowest HP.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetWithHighestHitPoints(System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the single Target in play that will be considered as having the Nth highest HP.
            This is the coroutine version, which may involve a player-made decision over which target is considered to have the highest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Highest, 2 = Second Highest, 3 = Third Highest, etc.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="storeHighest">Store the Card with highest HP found.</param>
            <param name="gameAction">The GameAction that is trying to determine the target with the highest HP, if any.</param>
            <param name="dealDamageInfo">If trying to find the target with the highest HP so that damage can be dealt, this is information on the damage that will be dealt.</param>
            <param name="evenIfCannotDealDamage">If true, will find the targets with the highest HP even if damage won't be dealt. Otherwise, the search may be prevented.</param>
            <param name="optional">Whether or not determining which target is considered to be the highest HP is optional or not.</param>
            <param name="beforeDecisionAction">If not null, executes the IEnumerator coroutine prior to any Decisions determining which which target is considered to have the highest HP.</param>
            <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The single Target in play that will be considered as having the Nth highest HP.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTargetWithLowestHitPoints(System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Collections.IEnumerator,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the single Target in play that will be considered as having the Nth lowest HP.
            This is the coroutine version, which can involve a player-made decision over which target is considered to have the lowest HP in ambiguous situations.
            </summary>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Lowest, 2 = Second Lowest, 3 = Third Lowest, etc.</param>
            <param name="additionalCriteria">Any criteria limitations on the type of targets to look at, such as villain targets.</param>
            <param name="lowestCard">Stores the Card with lowest HP found.</param>
            <param name="gameAction">The GameAction that is trying to determine the target with the lowest HP, if any.</param>
            <param name="dealDamageInfo">If trying to find the target with the lowest HP so that damage can be dealt, this is information on the damage that will be dealt.</param>
            <param name="evenIfCannotDealDamage">If true, will find the targets with the lowest HP even if damage won't be dealt. Otherwise, the search may be prevented.</param>
            <param name="optional">Whether or not determining which target is considered to be the lowest HP is optional or not.</param>
            <param name="beforeDecisionAction">If not null, executes the IEnumerator coroutine prior to any Decisions determining which which target is considered to have the lowest HP.</param>
            <param name="ignoreBattleZone">If true, looks through all BattleZones, not just the current one.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The single Target in play that will be considered as having the Nth lowest HP.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnTakerController(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns the TurnTakerController of the provided TurnTaker.
            </summary>
            <param name="turnTaker">The TurnTaker of the TurnTakerController that will be returned.</param>
            <returns>The TurnTakerController of the provided TurnTaker.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnTakerController(System.String)">
            <summary>
            Returns the TurnTakerController that has the provided "identifier".
            </summary>
            <param name="identifier">The identifier of the TurnTakerController that will be returned.</param>
            <returns>The TurnTakerController that has the provided "identifier".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnTakerController(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean})">
            <summary>
            Returns a single TurnTakerController that matches "criteria".
            If there are multiple TurnTakerControllers matchin "criteria", the first one will be returned.
            </summary>
            <param name="criteria">The criteria of the TurnTakerController that will be returned.</param>
            <returns>A single TurnTakerController that matches "criteria".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnTakersWhere(System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all TurnTaker objects that match "turnTakerCriteria".
            </summary>
            <param name="turnTakerCriteria">The criteria of TurnTaker that will be returned.</param>
            <param name="battleZone">If not null, restricts search to TurnTakers in the provided BattleZone.</param>
            <returns>All TurnTaker objects that match "turnTakerCriteria".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnTakerControllersWhere(System.Func{Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns all TurnTakerControllers that match "criteria".
            </summary>
            <param name="turnTakerCriteria">The criteria of TurnTakerControllers that will be returned.</param>
            <param name="ignoreBattleZone">If false, restricts the search to TurnTakerControllers that are in the same BattleZone as the CardSource.</param>
            <returns>All TurnTakerControllers that match "criteria".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindVillainTurnTakerControllers(System.Boolean)">
            <summary>
            Finds all villain TurnTakerControllers in play.
            </summary>
            <param name="activeOnly">If true, only returns the villain TurnTakerControllers if they are not incapacitated or out of the game.</param>
            <returns>All villain TurnTakerControllers in play.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindVillainTurnTakerController(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.TurnTakerController},System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the single villain TurnTakerController.
            </summary>
            <param name="decisionMaker">If there is more than one villain TurnTakerController, this is the HeroTurnTakerController that decides which one is considered "the villain".</param>
            <param name="selectionType">If there is more than one villain TurnTakerController, this is the SelectionType of the Decision that will determine which one is considered "the villain".</param>
            <param name="storedResults">Stores the determined villain TurnTakerController.</param>
            <param name="additionalCriteria">If not null, gives additional criteria on the villain TurnTaker to search for.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FlipCard(Handelabra.Sentinels.Engine.Controller.CardController,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.FlipCardAction},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Flips the provided CardController to its opposite side.
            </summary>
            <param name="cardToFlip">The CardController to flip.</param>
            <param name="treatAsPlayed">If true, will treat the Card as if it was just played after it flips, if flipped face-up.</param>
            <param name="treatAsPutIntoPlay">If true, will treat the Card as if it was just put into play after it flips, if flipped face-up.</param>
            <param name="actionSource">If not null, the GameAction that causes the Card to flip.</param>
            <param name="storedResults">Stores any FlipCardActions that are created as a result of calling this method.</param>
            <param name="allowBackToFront">If true, allows Cards that are flipped face-down to flip back face-up. Otherwise, will prevent this from being possible.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FlipCards(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.CardController},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Flips a collection of Cards in an arbitrary order.
            Do not use if the order of the flips is important.
            </summary>
            <param name="cardsToFlip">The Cards to flip.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GainHP(Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32},System.Func{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            A specific target Card regains HP.
            </summary>
            <param name="hpGainer">The target Card that will regain HP.</param>
            <param name="amount">If not null, the fixed amount of HP that the target Card will regain.</param>
            <param name="dynamicAmount">If not null, a dynamic amount of HP for the target Card to regain. Overrides the "amount" parameter.</param>
            <param name="storedResults">Stores any GainHPActions that result from calling this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GainHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Multiple target Cards meeting criteria regain a fixed amount of HP.
            </summary>
            <param name="hero">The HeroTurnTakerController that decides the order in which target Cards regain HP, and/or which target Cards regain HP if only a limited number of Cards will regain HP.</param>
            <param name="criteria">The criteria of Cards that will regain HP.</param>
            <param name="amount">The amount of HP that the target Cards will regain.</param>
            <param name="numberOfCardsToHeal">If set, limits the number of target Cards that will regain HP.</param>
            <param name="optional">If true, makes target Cards regaining HP optional.</param>
            <param name="requiredHpGainers">If not null, the minimum number of target Cards that MUST regain HP (if possible).</param>
            <param name="storedResultsDecision">Stores any SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsAction">Stores any GainHPAction that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GainHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Int32},System.Func{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GainHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Int32},System.Func{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Multiple target Cards meeting criteria regain a dynamic amount of HP, based on the target Card that is regaining the HP.
            </summary>
            <param name="hero">The HeroTurnTakerController that decides the order in which target Cards regain HP, and/or which target Cards regain HP if only a limited number of Cards will regain HP.</param>
            <param name="criteria">The criteria of Cards that will regain HP.</param>
            <param name="amountBasedOnTarget">The amount of HP that the target Cards will regain, based on the Card that is regaining the HP.</param>
            <param name="numberOfCardsToHeal">If set, limits the number of target Cards that will regain HP.</param>
            <param name="optional">If true, makes target Cards regaining HP optional.</param>
            <param name="requiredHpGainers">If not null, the minimum number of target Cards that MUST regain HP (if possible).</param>
            <param name="storedResultsDecision">Stores any SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsAction">Stores any GainHPAction that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GainHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Int32},System.Func{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GainHPAction},Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GameOver(Handelabra.Sentinels.Engine.Controller.EndingResult,System.String,System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Model.BattleZone,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Ends the game. The provided EndingResult determines whether the game is over because of a victory or a defeat.
            </summary>
            <param name="victoryOrDefeat">The EndingResult of the game. Those ending in Victory are a win for the heroes, and those ending in Defeat are a loss for the heroes.</param>
            <param name="ending">An additional ending string that shows up in the console view, and additionally in the UI if "showEndingTextAsMessage" is true.</param>
            <param name="showEndingTextAsMessage">If true, displays the "ending" text as a Critical priority message in the UI.</param>
            <param name="actionSource">The GameAction that caused the game to end.</param>
            <param name="overrideBattleZone">If not null, overrides the BattleZone in which the game is ending. Otherwise, the BattleZone of the CardSource is used.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAllCardControllers">
            <summary>
            Returns all CardControllers in the game.
            </summary>
            <returns>All CardControllers in the game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAllCards(System.Boolean,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns all Cards in the game.
            </summary>
            <param name="realCardsOnly">If true, restricts the Cards returned to only "real" cards (ie. not instruction Cards).</param>
            <param name="battleZone">If not null, only returns Cards in the provided BattleZone.</param>
            <returns>All Cards in the game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAllCardsInHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            Returns all Cards in the Hand of the provided HeroTurnTakerController.
            </summary>
            <param name="heroController">The HeroTurnTakerController from whom all Cards in their Hand will be returned.</param>
            <returns>All Cards in the Hand of the provided HeroTurnTakerController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardCount(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns a Dictionary of Card-int pairs, counting all Cards in the Game matching "criteria" and the number of copies of that same Card are in the Game.
            Example: Key=Thokk Value=4 ("Thokk" matches the provided criteria and there are 4 copies of it in the Game).
            </summary>
            <param name="criteria">The criteria of Cards in the Game to count.</param>
            <param name="battleZone">If not null, only counts Cards if they are in the provided BattleZone.</param>
            <returns>A Dictionary of Card-int pairs, counting all Cards in the Game matching "criteria" and the number of copies of that same Card are in the Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPercentages(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns a Dictionary containing the percentage of Cards in the Game that match criteria, with a breakdown for each Card.
            Example: If the criteria is "c.IsOngoing", the first Card-int pair might be the Card for "DangerSense" and the int might be 4, meaning that 4% of the Ongoing Cards in the Game are Danger Sense Cards.
            </summary>
            <param name="criteria">The criteria of Cards in the Game to include in the percentage breakdown.</param>
            <param name="battleZone">If not null, only includes Cards that are in the provided BattleZone.</param>
            <returns>A Dictionary containing the percentage of Cards in the Game that match criteria, with a breakdown for each Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetLimitedCardsInPlay(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            Returns all Cards belonging to the provided HeroTurnTakerController in play that are Limited.
            </summary>
            <param name="heroController">The HeroTurnTakerController whose Limited Cards in play will be considered.</param>
            <returns>All Cards belonging to the provided HeroTurnTakerController in play that are Limited.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetPlayableCardsInHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean)">
            <summary>
            Returns all Cards in the provided HeroTurnTakerController's Hand that are currently playable.
            </summary>
            <param name="heroController">The HeroTurnTakerController whose Hand this method will look at.</param>
            <param name="isPutIntoPlay">Whether or not playing the Card would be considered "put into play".</param>
            <param name="turnPhase">If provided, specifies which TurnPhase the Card must be playable in.</param>
            <param name="canBeCancelled">Whether or not the Card being played is allowed to be cancelled.</param>
            <returns>All Cards in the provided HeroTurnTakerController's Hand that are currently playable.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTriggersWhere(System.Func{Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean})">
            <summary>
            Returns all ITrigger objects that match "criteria".
            </summary>
            <param name="criteria">The criteria of ITrigger to find.</param>
            <returns>All ITrigger objects that match "criteria".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetUsablePowersThisTurn(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns all Powers belonging to the provided HeroTurnTakerController that are still usable this turn.
            </summary>
            <param name="heroController">The HeroTurnTakerController whose Powers will be evaluated.</param>
            <param name="eliminateUsedPowers">If true, removes any Powers that have already been used this turn.</param>
            <param name="allowAnyHeroPower">If true, allows ANY Hero Power to be selected, not just those on the HeroTurnTakerController.</param>
            <param name="allowReplacements">If true, allows the HeroTurnTakerController to be replaced by another HeroTurnTakerController (ie. Guise).</param>
            <param name="canBeCancelled">Whether or not the HeroTurnTakerController using a Power can be cancelled by another effect.</param>
            <param name="allowOutOfPlayPower">If true, also includes any Powers that are currently out of play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetActivatableAbilitiesInPlay(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.String,System.Boolean)">
            <summary>
            Returns all ActivatableAbility that belong to TurnTakerController and have the "abilityKey" ability key.
            </summary>
            <param name="ttc">The TurnTakerController whose ActivatableAbility objects will be returned.</param>
            <param name="abilityKey">The key of the ActivatableAbility objects to search for.</param>
            <param name="ignoreBattleZone">If true, searches all ActivatableAbility objects without considering the BattleZone it is in. Otherwise, returns only ActivatableAbility objects in the same BattleZone as the provided TurnTakerController.</param>
            <returns>All ActivatableAbility that belong to TurnTakerController and have the "abilityKey" ability key.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAllPowersForCardController(Handelabra.Sentinels.Engine.Controller.CardController,Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean)">
            <summary>
            Returns all Powers that the provided CardController has access to, include Powers contributed from other CardControllers (Example: Kismet's "The Talisman").
            </summary>
            <param name="cc">The CardController for which the Powers will be returned.</param>
            <param name="httc">If not null, the HeroTurnTakerController that the Power objects will be created for. Otherwise, the HeroTurnTakerController will be infered by the CardController.</param>
            <param name="allowOutOfPlayPower">If true, also allows out-of-play CardControllers to be considered for contributing Powers to the CardController.</param>
            <returns>All Powers that the provided CardController has access to, include Powers contributed from other CardControllers (Example: Kismet's "The Talisman").</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ImmediatelyEndTurn(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Goes directly to the End TurnPhase of the provided TurnTakerController.
            Ignores turn order rearranging (i.e. Wager Master's "Breaking The Rules")
            </summary>
            <param name="ttc">The TurnTakerController whose End TurnPhase will be gone to.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ImmuneToDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes the target of the provided DealDamageAction immune to damage.
            </summary>
            <param name="action">The DealDamageAction whose target will become immune to its damage.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncreaseDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Int32,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Increases the damage that the provided DealDamageAction will deal by a fixed amount.
            </summary>
            <param name="dealDamage">The DealDamageAction to increase the damage amount of.</param>
            <param name="amountToIncrease">The amount by which the damage will be increased.</param>
            <param name="isNemesisEffect">Whether or not this increase is the result of the nemesis game mechanic.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncreaseDamage(Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Increases the damage that the provided DealDamageAction will deal by a dynamic amount, based on the properties of the DealDamageAction.
            </summary>
            <param name="dealDamage">The DealDamageAction to increase the damage amount of.</param>
            <param name="dynamicAmountToIncrease">The amount by which the damage will be increased, based on the properties of the DealDamageAction.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncreaseHPGain(Handelabra.Sentinels.Engine.Controller.GainHPAction,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Increases the amount of HP that will be gained in the provided GainHPAction.
            </summary>
            <param name="gainHP">The GainHPAction to increase the amount of HP gained.</param>
            <param name="amountToIncrease">The amount by which the amount of HP gained will be increased.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReduceHPGain(Handelabra.Sentinels.Engine.Controller.GainHPAction,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Reduces the amount of HP that will be gained in the provided GainHPAction.
            </summary>
            <param name="gainHP">The GainHPAction to reduce the amount of HP gained.</param>
            <param name="amountToReduce">The amount by which the amount of HP gained will be reduced.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncreasePhaseActionCount(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Increases the number of actions that can be performed in the provided TurnPhase by the "amount".
            Example: If the "PlayCard" TurnPhase is provided, increases the number of Cards that can be played.
            </summary>
            <param name="phase">The TurnPhase to increase the number of actions for.</param>
            <param name="amount">The amount by which to increase the number of actions for the TurnPhase.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncreasePowerNumberOfUses(Handelabra.Sentinels.Engine.Controller.Power,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Increases the number of times the provided Power can be used by the "amount".
            </summary>
            <param name="power">The Power to increase the number of uses for.</param>
            <param name="amount">The amount by which the number of uses of the provided Power will be increased.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsCardInPlayAndNotUnderCard(System.String)">
            <summary>
            Returns whether or not there are ANY Cards in play, and not under another Card, that match the provided "identifier".
            </summary>
            <param name="identifier">The identifier of the Card to look for in play.</param>
            <returns>Whether or not there are ANY Cards in play, and not under another Card, that match the provided "identifier".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsInhibited(Handelabra.Sentinels.Engine.Controller.CardController,Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Returns whether or not the provided CardController is inhibited from performing GameActions.
            </summary>
            <param name="cardController">The CardController to evalute whether or not it is inhibited.</param>
            <param name="action">If provided, the specific GameAction to check if the CardController is inhibited from performing.</param>
            <returns>Whether or not the provided CardController is inhibited from performing GameActions.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeDamageIrreducible(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes the damage for the provided DealDamageAction irreducible.
            </summary>
            <param name="action">The DealDamageAction whose damage will become irreducible.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeDamageUnincreasable(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes the damage for the provided DealDamageAction unincreasable.
            </summary>
            <param name="action">The DealDamageAction whose damage will become unincreasable.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeDamageNotRedirectable(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes the damage for the provided DealDamageAction not redirectable.
            </summary>
            <param name="dd">The DealDamageAction whose damage will become not redirectable.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeDecisionAction(Handelabra.Sentinels.Engine.Controller.IDecision,System.Boolean)">
            <summary>
            Sends out the provided IDecision to be made by the player(s).
            </summary>
            <param name="decision">The Decision to be made by the player(s).</param>
            <param name="canBeCancelled">Whether or not the Decision is allowed to be cancelled by other sources.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeDecisionEvent(Handelabra.Sentinels.Engine.Controller.IDecision)">
            <summary>
            Sends out the actual event of the IDecision to make.
            Not to be called directly by a CardController; use MakeDecisionAction() instead.
            </summary>
            <param name="decision">The Decision to send out an event for.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveCard(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.IDecision},Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves the provided Card to the provided Location.
            </summary>
            <param name="taker">The TurnTakerController this is moving the Card.</param>
            <param name="cardToMove">The Card to move to the new Location.</param>
            <param name="destination">The Location to move the Card to.</param>
            <param name="toBottom">If true, moves the Card to the bottom of the "destination" Location, rather than the top.</param>
            <param name="isPutIntoPlay">If true, treats the move as if the Card were being "put into play".</param>
            <param name="playCardIfMovingToPlayArea">If true, and the Card is moving to a PlayArea, will treat the Card as if it were being played.</param>
            <param name="offset">If set, puts the Card that much below other Cards at the same Location. Example: 2 means 2 from the top of the "destination".</param>
            <param name="showMessage">If true, shows a message to inform the player(s) about the moving of the Card. Used especially in multiplayer when other players would otherwise not see the Card being moved.</param>
            <param name="decisionSources">Any IDecisions that are responsible for the Card being moved.</param>
            <param name="responsibleTurnTaker">The TurnTakerController that is responsible for moving the Card, if different from the "taker" TurnTakerController.</param>
            <param name="storedResults">Stores any MoveCardActions created by the call to this method.</param>
            <param name="evenIfIndestructible">If true, will move the Card even if it is indestructible.</param>
            <param name="flipFaceDown">If true, will flip the Card face-down upon arrival at the "destination".</param>
            <param name="actionSource">Any GameActions that are responsible for the Card being moved.</param>
            <param name="isDiscard">If true, counts the move as the Card being "discarded" for gameplay purposes.</param>
            <param name="evenIfPretendGameOver">Usually, a Card will not be moved if it would cause a pretend GameOverAction (when simulating damage). If this parameter true, it will pretend to move the Card anyway.</param>
            <param name="shuffledTrashIntoDeck">If true, it means that the move required shuffling the a Trash into its associated Deck first. Used for journal-keeping purposes.</param>
            <param name="doesNotEnterPlay">If true, will not cause the Card to "enter play" even if it normally would be caused by the move.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTemporaryInhibitor``1(Handelabra.Sentinels.Engine.Controller.CardController,System.Func{``0,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Temporarily inhibits the provided CardController from performing any GameActions of type T by creating a Trigger that cancels every GameAction of type T it attempts.
            This can be necessary whenever a card's logic interupts everything else that is happening, such as In Medias Res.
            </summary>
            <typeparam name="T">The Type of object that can be evaluated to see if the inhibitor has expired. Usually just GameAction to prevent all GameActions the CardController attempts.</typeparam>
            <param name="cardToInhibit">The CardController that is temporarily inhibited from performing any actions.</param>
            <param name="criteriaToExpire">When this evaluates to true, the inhibitor will expire and the CardController can resume performing actions.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="requireActionSuccess">Whether or not the cancellation must be successful in order to prevent the CardController from performing GameActions of type T.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTrigger(Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Adds an ITrigger to the TriggerManager.
            </summary>
            <param name="trigger">The ITrigger that will be added to the TriggerManager.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTrigger``1(Handelabra.Sentinels.Engine.Controller.Trigger{``0})">
            <summary>
            Adds a Trigger to the TriggerManager.
            </summary>
            <typeparam name="T">The GameAction that the Trigger responds to.</typeparam>
            <param name="trigger">The Trigger that will be added to the TriggerManager.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.BulkMoveCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves many Card objects to a Location all at once, rather than individually.
            This is used for things like moving all cards out of game, or reshuffling.
            </summary>
            <remarks>Triggers cannot fire on each individual move, just on the bulk move.</remarks>
            <param name="taker">The TurnTakerController that is moving the Card objects.</param>
            <param name="cardsToMove">The Card objects that will be moved to the destination Location.</param>
            <param name="destination">The Location that the Card objects will be moved to.</param>
            <param name="toBottom">Whether or not to place the Card objects on the bottom of the destination Location. False by default.</param>
            <param name="performBeforeDestroyActions">If the Card objects are moving from in play to out of play, whether or not to send a signal that those Card objects are being destroyed.</param>
            <param name="responsibleTurnTaker">Which TurnTaker is responsible for causing the Card objects to be moved, if different that the "taker" TurnTakerController.</param>
            <param name="isDiscard">Whether or not the Card objects being moved counts as a Discard action.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UpdateNemesisIdentifiers(Handelabra.Sentinels.Engine.Controller.CardController,System.Collections.Generic.IEnumerable{System.String},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Updates the provided CardController.Card.NemesisIdentifiers property to the provided nemesisIdentifiers.
            </summary>
            <param name="controller">The CardController whose Card.NemesisIdentifiers will be updated.</param>
            <param name="nemesisIdentifiers">The updated list of identifiers, corresponding to the identifiers of the desired nemeses.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CancelAction(Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.CancelAction},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Cancels the provided GameAction, preventing it from ever occurring.
            </summary>
            <param name="action">The GameAction that is cancelled.</param>
            <param name="showOutput">Whether or not to display a message to the player informing them of the cancelled action.</param>
            <param name="cancelRelatedDecisions">If true, also cancels any Decisions that would be caused by the GameAction under normal circumstances.</param>
            <param name="storedResults">Returns the CancelAction that cancelled the GameAction.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanDealDamage(Handelabra.Sentinels.Engine.Controller.DamageSource,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Whether or not the provided DamageSource is able to deal damage.
            </summary>
            <param name="source">The DamageSource to evaluate.</param>
            <param name="considerOutOfPlay">Whether or not the DamageSource can prevent itself from dealing damage, even if it is moving out of play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The CardSource that prevents the DamageSource from dealing damage. Null if nothing prevents DamageSource from dealing damage.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanDealDamage(Handelabra.Sentinels.Engine.Model.Card,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided Card is able to deal damage.
            </summary>
            <param name="card">The Card to evaluate.</param>
            <param name="considerOutOfPlay">Whether or not the Card can prevent itself from dealing damage, even if it is moving out of play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The CardSource that prevents the Card from dealing damage. Null if nothing prevents DamageSource from dealing damage.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanDealDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.CannotDealDamageReason@,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided Card is able to deal damage.
            </summary>
            <param name="card">The Card to evaluate.</param>
            <param name="reason">The reason why damage cannot be dealt.</param>
            <param name="considerOutOfPlay">Whether or not the Card can prevent itself from dealing damage, even if it is moving out of play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The CardSource that prevents the Card from dealing damage. Null if nothing prevents DamageSource from dealing damage.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanDrawCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided HeroTurnTakerController is allowed to draw cards.
            </summary>
            <param name="httc">The HeroTurnTakerController to evaluate for permission to draw Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>Whether or not the provided HeroTurnTakerController is allowed to draw cards.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanPlayCards(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided TurnTakerController is allowed to play cards.
            </summary>
            <param name="ttc">The TurnTakerController to evaluate for permission to play Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>Whether or not the provided TurnTakerController is allowed to play cards.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanUsePowers(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Returns whether or not the provided HeroTurnTakerController is allowed to use powers.
            </summary>
            <param name="httc">The HeroTurnTakerController to evaluate for permission to use powers.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="canBeCancelled">If true, checks whether or not any other CardControllers prevent HeroTurnTakerController from using powers.</param>
            <returns>Whether or not the provided HeroTurnTakerController is allowed to use powers.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanPerformAction``1(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Returns whether or not the provided TurnTakerController can perform GameActions of type T.
            </summary>
            <typeparam name="T">The type of GameAction that may or may not be performable by the TurnTakerController.</typeparam>
            <param name="ttc">The TurnTakerController that may or may not be able to perform the GameAction.</param>
            <param name="canBeCancelled">If true, checks whether or not any other CardControllers prevent TurnTakerController from performing the GameAction.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>Whether or not the provided TurnTakerController can perform GameActions of type T.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesAnyCardPreventCardFromBeingPlayed(Handelabra.Sentinels.Engine.Controller.CardController,Handelabra.Sentinels.Engine.Model.Location)">
            <summary>
            Returns a Card object if it prevents the provided CardController from being played.
            </summary>
            <param name="cardController">The CardController that may or may not be prevented from being played.</param>
            <param name="destinationLocation">If not null, only applies to any CardControllers that would be played to the provided Location.</param>
            <returns>If not null, the Card that prevents the provided CardController from being played.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesAnyCardControllerMakeAnotherCardIndestructible(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns a CardController if it makes the provided Card object industructible.
            </summary>
            <param name="card">The Card that may or may not be indestructible.</param>
            <returns>If not null, the CardController that makes the provided Card object indestructible.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsCardIndestructible(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card is indestructible.
            </summary>
            <param name="card">The Card that may or may not be indestructible.</param>
            <returns>Whether or not the provided Card is indestructible.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanActivateEffect(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.String)">
            <summary>
            Returns whether or not the provided TurnTakerController is able to activate effects of the provided string "effectKey".
            </summary>
            <param name="turnTakerController">The TurnTakerController that may or may not be able to activate the effect.</param>
            <param name="effectKey">The key of the effect that may or may not be activable by the provided TurnTakerController.</param>
            <returns>Whether or not the provided TurnTakerController is able to activate effects of the provided string "effectKey".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanActivateEffect(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns whether or not the provided Card is able to activate effects of the provided string "effectKey".
            </summary>
            <param name="card">The Card that may or may not be able to activate the effect.</param>
            <param name="effectKey">The key of the effect that may or may not be activable by the provided Card.</param>
            <returns>Whether or not the provided Card is able to activate effects of the provided string "effectKey".</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesCardContainKeyword(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns whether or not the provided Card has the keyword provided.
            </summary>
            <param name="card">The Card that may or may not have the provided keyword.</param>
            <param name="keyword">The keyword that may or may not be on the provided Card.</param>
            <param name="evenIfUnderCard">If true, evaluate the Card's keywords even if it is under another Card.</param>
            <param name="evenIfFaceDown">If true, evaluate the Card's keywords even if it is face-down (flipped).</param>
            <returns>Whether or not the provided Card has the keyword provided.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAdditionalKeywords(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns any keywords that are added to the provided Card that are not natively written on the Card.
            </summary>
            <param name="card">The Card to evaluate for additonal keywords.</param>
            <returns>A IEnumerable of any additional keywords to add to the provided Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetAllKeywords(Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Boolean)">
            <summary>
            Returns all keywords for the provided Card, even those that come from external sources (such as effects on other Cards).
            </summary>
            <param name="card">The Card whose keywords are returned.</param>
            <param name="evenIfUnderCard">Returns the keywords of the Card even if it is under another Card.</param>
            <param name="evenIfFaceDown">Returns the keywords of the Card even if it is face-down (flipped).</param>
            <returns>All keywords for the provided Card, even those that come from external sources (such as effects on other Cards).</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanPlayCard(Handelabra.Sentinels.Engine.Controller.CardController,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.Location)">
            <summary>
            Returns a CanPlayCardResult expressing whether or not the provided CardController can be played, considering all the rules, other cards, etc.
            CanPlayCardResult.CanPlay means that the CardController can be played.
            Otherwise, the returned CanPlayCardResult provides a general reason why the Card cannot be played.
            </summary>
            <param name="cc">The CardController to be evaluated for playability.</param>
            <param name="isPutIntoPlay">Whether or not the provided CardController is being "put into play", instead of just being played regularly.</param>
            <param name="turnPhase">If not null, return the CanPlayCardResult based on whether or not it can be played in the provided TurnPhase.</param>
            <param name="evenIfAlreadyInPlay">If true, ignores situations in which the provided Card is already in play. False by default.</param>
            <param name="canBeCancelled">Whether or not the CardController being played is allowed to be cancelled.</param>
            <param name="destinationLocation">If not null, considers on the situation in which the CardController would be played to the provided Location.</param>
            <returns>A CanPlayCardResult enum with the results of whether or not the CardController can be played. CanPlayCardResult.CanPlay means it can be played, otherwise it cannot be played for the reason the CanPlayCardResult expresses.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsLimitedAndInPlay(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or no the provided Card is a Limited card that already has another Card with the same identifier in play.
            </summary>
            <param name="card">The Card that may or may not be Limited and already in play.</param>
            <returns>Whether or no the provided Card is a Limited card that already has another Card with the same identifier in play.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SendMessageAction(System.String,Handelabra.Sentinels.Engine.Controller.Priority,Handelabra.Sentinels.Engine.Controller.CardSource,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Boolean)">
            <summary>
            Sends an output message directly to the player, to be shown on-screen.
            </summary>
            <param name="message">The contents of the message, seen by the player.</param>
            <param name="priority">The importance of the message, which affects the way in which the message is displayed. 
            A message of Critical priority will require acknowledgement from the player.</param>
            <param name="associatedCards">Any Card objects (besudes the CardSource) that are also associated with the message shown.</param>
            <param name="showCardSource">Whether or not to also show the CardSource when showing the message so the player knows the context of the message. False by default.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ChangeDamageType(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Model.DamageType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Changes the DamageType of the provided DealDamageAction.
            </summary>
            <param name="dealDamage">The DealDamageAction to which the change of DamageType will be applied.</param>
            <param name="damageType">The new DamageType to be applied to the DealDamageAction.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ChangeMaximumHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Changes the maximum HP of the provided Card to the provided amount.
            </summary>
            <param name="card">The Card whose maximum HP will be changed.</param>
            <param name="amount">The new amount of maximum HP to set for the provided Card.</param>
            <param name="alsoSetHP">If true, also sets the Card's HP to the maximum amount after the change.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToSelf(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Causes all target Cards that match "targetCriteria" to deal damage to themselves.
            Allows the Heroes to decide the order that damage is dealt.
            This is the fixed version, meaning that the amount of damage, the DamageType etc are all exactly the same for all instances.
            </summary>
            <param name="hero">The HeroTurnTakerController that gets to decide the order in which damage is dealt. If null, players decide together.</param>
            <param name="targetCriteria">The criteria of matching target Cards that will deal damage to themselves.</param>
            <param name="amount">The amount of damage that each target will deal to themselves.</param>
            <param name="type">The type of damage that each target will deal themselves.</param>
            <param name="isIrreducible">Whether or not the damage is irreducible. False by default.</param>
            <param name="storedResults">Stores all DealDamageActions resulting from the call to this method.</param>
            <param name="isOptional">Whether or not the target dealing themself damage is optional.</param>
            <param name="addStatusEffect">If not null, executes the IEnumerator if damage is dealt, intended to be used to add a StatusEffect to the damage.</param>
            <param name="requiredDecisions">If defined, the minimum number of decisions that require an answer (ie they cannot be skipped). After that point, they can be skipped.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToSelf(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToSelf(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Causes all target Cards that match "targetCriteria" to deal damage to themselves.
            Allows the Heroes to decide the order that damage is dealt.
            This is the dynamic version, meaning that the amount of damage can change based on the target that is dealing themself damage.
            If more parameters are needed (eg isIrreducible) use the fixed version instead.
            </summary>
            <param name="hero">The HeroTurnTakerController that gets to decide the order in which damage is dealt. If null, players decide together.</param>
            <param name="targetCriteria">The criteria of matching target Cards that will deal damage to themselves.</param>
            <param name="dynamicAmount">The dynamic amount of damage that each target will deal to themselves. Takes in the target Card as its only parameter, and returns the amount of damage it should deal itself.</param>
            <param name="type">The type of damage that each target will deal themselves.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToSelf(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,Handelabra.Sentinels.Engine.Controller.TargetInfo,Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Deals damage from Card "source" to all targets matching "targetCriteria".
            </summary>
            <param name="hero">The DecisionMaker that chooses the order in which the damage is dealt.</param>
            <param name="source">The source of the damage to be dealt.</param>
            <param name="targetCriteria">The criteria of targets to which damage can be dealt.</param>
            <param name="amount">The amount of damage to deal.</param>
            <param name="type">The DamageType of the damage to be dealt.</param>
            <param name="isIrreducible">Whether or not the damage is irreducible.</param>
            <param name="optional">Whether or not dealing the damage is optional.</param>
            <param name="storedResults">Stores all DealDamageActions caused by the call to this method.</param>
            <param name="followUpDamageInformation">If provided, includes dummy DealDamageAction objects that contain information about future instances of damage to be dealt to each target.
            This is used primarily by the UI to make a preview when there are multiple instances of damage.</param>
            <param name="addStatusEffect">If not null, executes the IEnumerator if damage is dealt, intended to be used to add a StatusEffect to the damage.</param>
            <param name="selectTargetsEvenIfCannotPerformAction">If true, players must select targets, even if the intended follow-up action (usually dealing damage) cannot be performed. Normally, selecting targets is avoided if no damage can be dealt.</param>
            <param name="exceptFor">If not null, removes targets matching the TargetInfo criteria from target selection. Example: "Deal damage to all heroes, except the hero with the lowest HP".</param>
            <param name="damageSourceInfo">If the "source" parameter is null, this is used to determine the source of the damage by its description. Example: "The villain target with the lowest HP", as opposed to a specific Card.</param>
            <param name="evenIfCannotDealDamage">If true, players must select targets, even if the intended follow-up action (usually dealing damage) cannot be performed. Normally, selecting targets is avoided if no damage can be dealt.</param>
            <param name="ignoreBattleZone">If true, in an OblivAeon game, selecting targets does not take Battle Zones into account; targets can be selected in any battle zone.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToTarget(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Deals a dynamic amount of damage from a specific DamageSource "source" to a specific Card "target".
            </summary>
            <param name="source">The source of the damage, as a DamageSource object, which can either have an underlying Card or TurnTaker.</param>
            <param name="target">The specific Card target to which a dynamic amount of damage will be dealt.</param>
            <param name="dynamicAmount">The dynamic amount of damage that the "target" will be dealt. The Func is executed using the "target" as its parameter.</param>
            <param name="type">The type of damage that will be dealt to the "target".</param>
            <param name="isIrreducible">Whether or not the damage is irreducible.</param>
            <param name="optional">Whether or not the damage is optional. If so, the player is presented with a Decision as to whether or not the damage is dealt.</param>
            <param name="storedResults">Stores all DealDamageActions caused by the call to this method.</param>
            <param name="addStatusEffect">If not null, executes the IEnumerator if damage is dealt, intended to be used to add a StatusEffect to the damage.</param>
            <param name="damageSourceInfo">If the "source" parameter is null, this is used to determine the source of the damage by its description. Example: "The villain target with the lowest HP", as opposed to a specific Card.</param>
            <param name="sequenceIndex">Keeps internal track of which instance of damage this particular instance represents if part of a series (for example, "the second target").</param>
            <param name="ignoreBattleZone">If true, in an OblivAeon game, selecting targets does not take Battle Zones into account; targets can be selected in any battle zone.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToTarget(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Nullable{System.Int32},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToTarget(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Nullable{System.Int32},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Deals a fixed amount of damage from a specific DamageSource "source" to a specific Card "target".
            </summary>
            <param name="source">The source of the damage, as a DamageSource object, which can either have an underlying Card or TurnTaker.</param>
            <param name="target">The specific Card target to which a dynamic amount of damage will be dealt.</param>
            <param name="amount">The fixed amount of damage that the "target" will be dealt.</param>
            <param name="type">The type of damage that will be dealt to the "target".</param>
            <param name="isIrreducible">Whether or not the damage is irreducible.</param>
            <param name="optional">Whether or not the damage is optional. If so, the player is presented with a Decision as to whether or not the damage is dealt.</param>
            <param name="storedResults">Stores all DealDamageActions caused by the call to this method.</param>
            <param name="addStatusEffect">If not null, executes the IEnumerator if damage is dealt, intended to be used to add a StatusEffect to the damage.</param>
            <param name="damageSourceInfo">If the "source" parameter is null, this is used to determine the source of the damage by its description. Example: "The villain target with the lowest HP", as opposed to a specific Card.</param>
            <param name="sequenceIndex">Keeps internal track of which instance of damage this particular instance represents if part of a series (for example, "the second target").</param>
            <param name="ignoreBattleZone">If true, in an OblivAeon game, selecting targets does not take Battle Zones into account; targets can be selected in any battle zone.</param>
            <param name="attemptDamageEvenIfCannotDealDamage">If true, will follow through on the DealDamageAction to the target, even if damage cannot be dealt. Normally, the instance of damage would be avoided entirely.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.DealDamageToTarget(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTemporaryTriggerInhibitor``1(System.Func{Handelabra.Sentinels.Engine.Controller.ITrigger,System.Boolean},System.Func{``0,System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Adds a temporary inhibitor on any card sources which contain the matching associated trigger.
            This is rarely used, except in cases in which a card is being destroyed and needs to interrupt future GameActions caused by another Card.
            Ex. Overcharged Systems is destroyed, and needs to stop any "start of turn" actions from continuing to execute.
            Adds an ITrigger to the TriggerManager.
            </summary>
            <typeparam name="T">The type of GameAction that will be evaluated to see whether or not the temporary inhibitor has expired.</typeparam>
            <param name="triggerCriteria">Any ITriggers matching this criteria will be prevented from executing.</param>
            <param name="expiryCriteria">Whenever the expiryCriteria returns true, the temporary inhibitor on the Trigger will expire, and will be executed normally from that point on.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddInhibitor(Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Inhibits a specific CardController from performing any GameActions or Decisions until the inhibitor is removed.
            This is used by GameActions and is not intended from a direct call from another CardController.
            </summary>
            <param name="cardController">The CardController that is inhibited from performing any GameActions.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddInhibitorException(Handelabra.Sentinels.Engine.Controller.CardController,System.Func{Handelabra.Sentinels.Engine.Controller.GameAction,System.Boolean})">
            <summary>
            When a CardController is inhibited (via AddInhibitor), this method adds an exception, allowing the inhibited CardController to perform very specific GameActions.
            This is used by GameAction logic and is not generally necessary to be called directly from CardControllers, unless there is a special reason to do so.
            </summary>
            <param name="inhibitedCard">The inhibited CardController, to which an exception is granted.</param>
            <param name="criteriaToAllow">The type of GameActions that are permitted for the "inhibitedCard".</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanPerformPhaseAction(Handelabra.Sentinels.Engine.Model.TurnPhase)">
            <summary>
            Returns whether or not the GameAction associated with the provided TurnPhase can be performed.
            This is used by the views/tests, and not generally necessary for any CardControllers to call.
            Example: UsePowerAction during the UsePower TurnPhase, PlayCardAction during the PlayCard TurnPhase, etc.
            </summary>
            <param name="phase">The TurnPhase that may or may not be able to perform its primary GameAction.</param>
            <returns>Whether or not the GameAction associated with the provided TurnPhase can be performed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SendMessageEvent(Handelabra.Sentinels.Engine.Controller.MessageAction)">
            <summary>
            The actual event that causes a message to be shown on-screen.
            Not called directly by anything other than SendMessageAction.
            </summary>
            <param name="action">The MessageAction that is performing the event.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CyclePhasesToNextTurn(System.Int32)">
            <summary>
            Advances the game by cycling through the TurnPhases until it arrives at the next turn.
            Used for debugging purposes only, and not called directly by CardControllers.
            </summary>
            <param name="times">The number of turns to cycle through TurnPhases for.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DestroyCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},System.String,System.Nullable{System.Boolean},Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,System.Func{System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Destroys a specific Card in play.
            </summary>
            <param name="hero">The HeroTurnTakerController that is responsible for destroying the Card, if any.</param>
            <param name="cardToDestroy">The Card to be destroyed.</param>
            <param name="optional">Whether or not the destruction of the Card is optional. If it is, a Decision will be presented to the player(s).</param>
            <param name="storedResults">Stored results of all DestroyCardActions that occur as a result of calling this method.</param>
            <param name="overrideOutput">If set, will override the generic Message of the Card's destruction with a custom message.</param>
            <param name="showOutput">Whether or not to show a Message when when the Card is destroyed to the player(s).</param>
            <param name="actionSource">The GameAction that is causing the Card to be destroyed, if any.</param>
            <param name="responsibleCard">The Card that is responsible for causing the Card to be destroyed, if any.</param>
            <param name="overrideDestroyLocation">If set, overrides the Location that the Card will go to once it is destroyed. Example: Environment Deck instead of the Environment Trash.</param>
            <param name="postDestroyAction">If set, will perform an additional coroutine after the card has been fully destroyed.</param>
            <param name="associatedCards">Any additional Cards that are associated with the destruction of the "cardToDestroy" Card.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DestroyCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DestroyCardAction},System.Nullable{System.Boolean},System.Func{System.Boolean},Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Destroys all cards matching the "LinqCardCriteria" criteria.
            </summary>
            <param name="decisionMaker">The HeroCardController that decides the order in which the Cards are destroyed. If null, all players decide together.</param>
            <param name="cardCriteria">The criteria of Cards that will be destroyed.</param>
            <param name="autoDecide">If true, the order in which the Cards will be destroyed will be automatically decided by the game engine.</param>
            <param name="storedResults">A List storing all DestroyCardActions caused by the call to this method.</param>
            <param name="showOutput">Whether or not to show a Message to the players about the destruction of the cards.</param>
            <param name="cancelDecisionsIfTrue">If not null and returns true, will interpret the series of Card destroying. Example: if the Card that was destroying other Cards ends up getting destroyed itself before it has had a chance to destroy the originally-intended cards.</param>
            <param name="selectionType">The SelectionType used by the Decision when the destruction occurs. Is DestroyCard by default.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DetermineTurnTakersWithMostOrFewest(System.Boolean,System.Int32,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Int32},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.TurnTaker},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Finds the TurnTakers with the most or least of a given criteria. If there is ambiguity (a tie), players select which ones will represent the most/least in that situation.
            </summary>
            <param name="most">If true, determine the TurnTaker with the most of the criteria. If false, determine the TurnTaker with the least of the criteria.</param>
            <param name="ranking">The ordinal number that determines which most/least we are looking for. Example: 1 = The most/least, 2 = The second most/least, 3 = The third most/least, etc.</param>
            <param name="numberOfTurnTakers">The number of TurnTakers to determine. Example: The 2 targets with the highest HP.</param>
            <param name="turnTakerCriteria">The criteria of TurnTakers to look at. Example: "tt => tt.IsHero" only looks at HeroTurnTakers.</param>
            <param name="integerToEvaluate">Provides the integer that is evaluated as either the most/least of its value in the game. Example: "tt => tt.Deck.NumberOfCards" determines the TurnTaker that has the most/fewest number of Cards in their Deck.</param>
            <param name="selectionType">When there is ambiguity (a tie), this is the SelectionType that is used for the Decision in resolving that ambiguity.</param>
            <param name="storedResults">The TurnTaker(s) that match the criteria and/or are chosen by the players.</param>
            <param name="evenIfCannotDealDamage">Whether or not continue to determine the TurnTaker even if they cannot deal damage.</param>
            <param name="optional">Whether or not determining the TurnTaker with the most/fewest is optional.</param>
            <param name="gameAction">The GameAction that wants to know which TurnTaker has the most/fewest, if any.</param>
            <param name="battleZone">If not null, restricts the BattleZones in which the TurnTaker must be in.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsHighestHitPointsUnique(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns whether or not the Card (matching criteria) with the Highest HP is unique (the only one with an HP that high).
            </summary>
            <param name="criteria">The criteria of Cards to look at.</param>
            <param name="ranking">The ordinal ranking of the criteria. 1 = Highest, 2 = Second Highest, 3 = Third Highest, etc.</param>
            <param name="battleZone">If defined, limits the Cards to look at to the provided BattleZone.</param>
            <returns>Whether or not the Card (matching criteria) with the Highest HP is unique.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsLowestHitPointsUnique(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Returns whether or not the Card (matching criteria) with the Lowest HP is unique (the only one with an HP that low).
            </summary>
            <param name="criteria">The criteria of Cards to look at.</param>
            <param name="battleZone">If defined, limits the Cards to look at to the provided BattleZone.</param>
            <returns>Whether or not the Card (matching criteria) with the Lowest HP is unique.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.SelectTargetDecision,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns a collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage of a given SelectTargetDecision if the target were the provided "target" Card.
            </summary>
            <param name="decision">The SelectTargetDecision that we want a preview for.</param>
            <param name="target">Which Card target we want to generate the DamagePreviewResults for.</param>
            <returns>A collection of DamagePreviewResult objects, each which describes 1 step in the resolution of damage of a given SelectTargetDecision if the target were the provided "target" Card.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DamageSource,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},System.Nullable{Handelabra.Sentinels.Engine.Model.DamageType},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.GetDamagePreviewResults(Handelabra.Sentinels.Engine.Controller.DealDamageAction,Handelabra.Sentinels.Engine.Model.Card)"/>
            <seealso>See the Google Docs documentation for more details.</seealso>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetTryToPlayCardMessage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a string that explains why the provided HeroTurnTakerController cannot play Cards.
            If the HeroTurnTakerController CAN play Cards, returns null instead.
            </summary>
            <param name="hero">The HeroTurnTakerController that may or may not be able to play Cards.</param>
            <param name="isPutIntoPlay">If true, the HeroTurnTakerController is trying to put Cards into play rather than play them normally.</param>
            <param name="cardCriteria">If not null, the Cards that can be played must match criteria.</param>
            <param name="criteriaDescription">If "cardCriteria" is not null, a description that explains the kinds of Cards that can be played.</param>
            <param name="canBeCancelled">Whether or not the HeroTurnTakerController play Cards can be cancelled by other Cards.</param>
            <param name="mustBeFromHand">Whether or not the Card being played must be from the HeroTurnTakerController's Hand.</param>
            <returns>A string that explains why the provided HeroTurnTakerController cannot play Cards. If the HeroTurnTakerController CAN play Cards, returns null instead.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetTryToDiscardCardMessage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.String)">
            <summary>
            Returns a string that explains why the provided HeroTurnTakerController cannot discard Cards.
            If the HeroTurnTakerController CAN discard Cards, retruns null instead.
            </summary>
            <param name="hero">The HeroTurnTakerController that may or may not be able to discard Cards.</param>
            <param name="cardCriteria">If not null, the criteria of Cards that may be discarded.</param>
            <param name="criteriaDescription">If "cardCriteria" is not null, a description of the kinds of Cards that may be discarded.</param>
            <returns>A string that explains why the provided HeroTurnTakerController cannot discard Cards. If the HeroTurnTakerController CAN discard Cards, retruns null instead.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardsFromLocationAndMoveThem(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location,System.Nullable{System.Int32},System.Int32,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Func{System.Boolean},System.Nullable{Handelabra.Sentinels.Engine.Controller.SelectionType},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided DecisionMaker selects a number of Cards meeting the LinqCardCriteria from the provided Location, which are then moved to one of the provided MoveCardDestinations.
            </summary>
            <param name="hero">The HeroTurnTakerController that decides which Cards to move.</param>
            <param name="location">The Location from which Cards will be moved.</param>
            <param name="minNumberOfCards">If not null, the minimum number of Cards that MUST be selected to move. If null, then all moves are optional.</param>
            <param name="maxNumberOfCards">The maximum number of Cards that may be moved.</param>
            <param name="criteria">The LinqCardCriteria describing which kinds of Cards may be moved.</param>
            <param name="possibleDestinations">The list of possible MoveCardDestinations to which the selected Cards may be moved. If there is only one, that MoveCardDestination will automatically be chosen.</param>
            <param name="isPutIntoPlay">If true, and a Card is moving to a PlayArea, the Card will be treated as being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and a Card is moving to a PlayArea, the Card will be treated as being played, even if it was already in play to begin with.</param>
            <param name="shuffleAfterwards">If true, the original Location will be shuffled once the Cards have been moved.</param>
            <param name="optional">Whether or not the first Card to select is optional, if "maxNumberOfCards" is 1.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsMove">Stores all MoveCardActions that result from the call to this method.</param>
            <param name="autoDecideCard">Whether or not to automatically decide which Cards to move (when applicable).</param>
            <param name="flipFaceDown">If true, will flip the Cards face-down upon arrival at their destination.</param>
            <param name="showOutput">If true, shows output informing players that the Cards have been moved. Usually used when the Cards move at an unusual time.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Cards being moved, if any.</param>
            <param name="isDiscardIfMovingToTrash">If the Cards are moving to a Trash, whether or not this move counts as a "discard" for gameplay purposes.</param>
            <param name="allowAutoDecide">>Whether or not the "Choose For Me" button is available when deciding which Cards to move (when applicable).</param>
            <param name="cancelDecisionsIfTrue">If not null, whenever this Func returns true, cancels any futher Card decision-making.</param>
            <param name="selectionType">If provided, the SelectionType for the SelectCardDecisions related to moving the Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardFromLocationAndMoveIt(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Func{System.Boolean},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a Card from the provided Location meeting the provided LinqCardCriteria and moves it to one of the provided MoveCardDestinations.
            </summary>
            <param name="hero">The DecisionMaker that chooses which Card to move and where to move it.</param>
            <param name="location">The Location from which the Card will be moved.</param>
            <param name="criteria">The criteria of Cards that may be moved from the Location.</param>
            <param name="possibleDestinations">The list of possible MoveCardDestinations that the selected Card may move to.</param>
            <param name="isPutIntoPlay">If true, and the Card is being played, treat that Card as if it had been "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, treats the Card as if it had just been played, even if it was already in a PlayArea.</param>
            <param name="shuffleAfterwards">Whether or not to reshuffle the Location after the Card has been moved.</param>
            <param name="optional">Whether or not selecting a Card to move is optional.</param>
            <param name="storedResults">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="flipFaceDown">If true, flips the selected Card face-down after it has moved.</param>
            <param name="showOutput">Whether or not to show output indicating that the Card was moved.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Cards being moved, if different than the DecisionMaker.</param>
            <param name="isDiscardIfMovingtoTrash">If the Card moves to a Trash, this variable determines whether or not to treat that as a Card being discarded.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available for selecting which Cards to move.</param>
            <param name="storedResultsMove">Stores all MoveCardActions resulting from the call to this method.</param>
            <param name="cancelDecisionsIfTrue">If not null, when this Func returns true, it will cancel and further decision-making.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectLocationAndMoveCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.IDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardAction},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects one of the provided MoveCardDestinations, to which the provided Card will be moved.
            </summary>
            <param name="hero">The DecisionMaker that selects where to move the Card.</param>
            <param name="cardToMove">The Card that will be moved to the selected MoveCardDestination.</param>
            <param name="possibleDestinations">The collection of possible MoveCardDestinations to choose from.</param>
            <param name="isPutIntoPlay">If true, and a Card is moving to a PlayArea, the Card will be treated as being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, and a Card is moving to a PlayArea, the Card will be treated as being played, even if it was already in play to begin with.</param>
            <param name="offset">If not null, will offset the placement of the Card at the destination MoveCardDestination by that amount (eg. a value of 2 would place it 2 from the top).</param>
            <param name="decisionSources">The Decisions that are responsible for the selecting of a MoveCardDestination.</param>
            <param name="storedResults">Stores all MoveCardActions that result from the call to this method.</param>
            <param name="flipFaceDown">If true, flips the Card face-down once it is moved to its MoveCardDestination.</param>
            <param name="showOutput">Whether or not to show output indicating that the Card was moved.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Cards being moved, if different than the DecisionMaker.</param>
            <param name="isDiscardIfMovingToTrash">If the Card moves to a Trash, this variable determines whether or not to treat that as a Card being discarded.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectMoveCardDestination(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.MoveCardDestination},System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.IDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects one of the provided MoveCardDestinations for the provided Card.
            The selected MoveCardDestination is stored in the provided "storedResults", but the Card does not actually move to that Location.
            </summary>
            <param name="hero">The DecisionMaker that selects the MoveCardDestination for the Card.</param>
            <param name="cardToMove">The Card for which a MoveCardDestination is selected.</param>
            <param name="possibleDestinations">The collection of possible MoveCardDestinations to choose from.</param>
            <param name="storedResults">Stores the MoveCardDestination selected by the DecisionMaker.</param>
            <param name="isPutIntoPlay">Whether or not the MoveCardDestination being selected is for "put into play" purposes. Used to avoid unnecessary decisions.</param>
            <param name="showMessage">Whether or not to show a message to other players informing them of the chosen MoveCardDestination.</param>
            <param name="decisionSources">The Decisions that are responsible for the selecting of a MoveCardDestination.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectLocation(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.LocationChoice},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectLocationDecision},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects one of the provided LocationChoices and stores it in "storedResults" for a future purpose.
            </summary>
            <param name="hero">The DecisionMaker that selects a LocationChoice.</param>
            <param name="possibleDestinations">The LocationChoices to select from.</param>
            <param name="selectionType">The SelectionType of the SelectLocationDecision.</param>
            <param name="storedResults">Stores all SelectLocationDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a LocationChoice is optional.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectPhase(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.TurnPhase},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnPhaseDecision},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects one of the provided TurnPhases and stores it in "storedResults" for a future purpose.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects a TurnPhase.</param>
            <param name="possiblePhases">The collection of TurnPhases to select from.</param>
            <param name="selectionType">The SelectionType of the SelectTurnPhaseDecision presented to the DecisionMaker.</param>
            <param name="storedResults">Stores all SelectTurnPhaseDecision that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a TurnPhase is optional.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardsAndStoreResults(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardsDecision},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Func{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            The DecisionMaker selects the provided number of Cards matching criteria and stores it in the provided "storedResults".
            </summary>
            <param name="hero">The DecisionMaker that selects the Cards.</param>
            <param name="selectionType">The SelectionType of the SelectCardsDecision created.</param>
            <param name="criteria">The criteria of Cards that may be selected.</param>
            <param name="numberOfCards">The number of Cards to select.</param>
            <param name="storedResults">Stores all SelectCardsDecisions resulting from the call to this method.</param>
            <param name="optional">Whether or not selecting the Cards is optional.</param>
            <param name="requiredDecisions">If set, the minimum number of Cards that MUST be selected, after which the decisions become optional.</param>
            <param name="eliminateOptions">If true, eliminates selected Cards from future selectable Cards.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="allAtOnce">If true, all Cards must be selected at once before any futher effect occurs, rather than one at a time.</param>
            <param name="dynamicNumberOfCards">If not null, a Func that dynamically returns the number of Cards to select. Overrides "numberOfCards".</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="ignoreBattleZone">If true, the selectable Cards do not need to be made in the same BattleZone as the CardSource.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectDamageType(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectDamageTypeDecision},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.DamageType},Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a DamageType, and stores it in "storedResults" for a future purpose.
            </summary>
            <param name="hero">The DecisionMaker that selects a DamageType.</param>
            <param name="storedResults">Stores all SelectDamageTypeDecisions that result from the call to this method.</param>
            <param name="choices">The DamageTypes that are selectable.</param>
            <param name="gameAction">That GameAction that is responsible for the need to select a DamageType, if any.</param>
            <param name="selectionType">The SelectionType of the SelectDamageTypeDecision that will be presented.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDiscardCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to discard a Card.
            </summary>
            <param name="hero">The DecisionMaker that selects the HeroTurnTaker that will discard a Card.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to discard a Card is optional.</param>
            <param name="optionalDiscardCard">Once a HeroTurnTaker has been selected, whether or not the choice to discard a Card is optional for that hero.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="additionalHeroCriteria">If not null, additional criteria on which HeroTurnTakers can be selected to discard a Card.</param>
            <param name="additionalCardCriteria">If not null, additional criteria on which Cards the selected HeroTurnTaker may discard.</param>
            <param name="storedResultsTurnTaker">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="storedResultsDiscard">Stores all DiscardCardActions that result from the call to this method.</param>
            <param name="gameAction">The GameAction that is responsible for the need to select a HeroTurnTaker to discard a Card, if any.</param>
            <param name="selectionType">The SelectionType of the SelectCardDecision to select which Card to discard.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDiscardCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to discard Cards.
            </summary>
            <param name="hero">The DecisionMaker that selects the HeroTurnTaker that will discard Cards.</param>
            <param name="minNumberOfCards">The minimum number of Cards that the HeroTurnTaker will discard.</param>
            <param name="maxNumberOfCards">If set, the maximum number of Cards that the HeroTurnTaker may discard.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to discard Cards is optional.</param>
            <param name="optionalDiscardCard">Once a HeroTurnTaker has been selected, whether or not the choice to discard Cards is optional for that hero.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="additionalHeroCriteria">If not null, additional criteria on which HeroTurnTakers can be selected to discard Cards.</param>
            <param name="additionalCardCriteria">If not null, additional criteria on which Cards the selected HeroTurnTaker may discard.</param>
            <param name="storedResultsTurnTaker">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="storedResultsDiscard">Stores all DiscardCardActions that result from the call to this method.</param>
            <param name="associatedCards">Any Cards that are associated with the need to select a HeroTurnTaker to discard Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDiscardTheirHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to discard their entire Hand of Cards.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects the HeroTurnTaker that will discard Cards.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to discard their Hand is optional.</param>
            <param name="optionalDiscardCards">Once a HeroTurnTaker has been selected, whether or not the choice to discard their Hand is optional for that hero.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="additionalHeroCriteria">If not null, additional criteria on which HeroTurnTakers can be selected to discard Cards.</param>
            <param name="storedResultsTurnTaker">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="storedResultsDiscard">Stores all DiscardCardActions that result from the call to this method.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the need to select a HeroTurnTaker to discard their Hand, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DiscardHand(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DiscardCardAction},Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Discards all Cards that the provided HeroTurnTakerController has in their Hand.
            </summary>
            <param name="hero">The HeroTurnTakerController that will discard their entire Hand of Cards.</param>
            <param name="optional">Whether or not discarding the HeroTurnTakerController's Hand of Cards is optional.</param>
            <param name="storedResults">Stores all DiscardCardActions that result from the call to this method.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible the discarding, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDrawCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to draw a Card.
            </summary>
            <param name="hero">The DecisionMaker that selects the HeroTurnTaker that will draw a Card.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to draw a Card is optional.</param>
            <param name="optionalDrawCard">Once a HeroTurnTaker has been selected, whether or not the choice to draw a Card is optional for that hero.</param>
            <param name="allowAutoDecideHero">Whether or not the "Choose For Me" button is available when selecting a HeroTurnTaker.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="additionalCriteria">If not null, additional criteria on which HeroTurnTakers can be selected to draw a Card.</param>
            <param name="numberOfCards">No matter what this is set to, only 1 Card will be drawn.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToDrawCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Func{System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DrawCardAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker to draw Cards.
            </summary>
            <param name="hero">The DecisionMaker that selects the HeroTurnTaker that will draw Cards.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to draw Cards is optional.</param>
            <param name="optionalDrawCards">Once a HeroTurnTaker has been selected, whether or not the choice to draw Cards is optional for that hero.</param>
            <param name="requiredDraws">If set, the minimum number of Cards that the selected HeroTurnTaker must draw.</param>
            <param name="allowAutoDraw">If true, allows the HeroTurnTaker to automatically draw the Cards.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="additionalCriteria">If not null, additional criteria on which HeroTurnTakers can be selected to draw Cards.</param>
            <param name="stopCondition">If not null, a Func that, when returning true, will stop the HeroTurnTaker from drawing any more Cards.</param>
            <param name="storedDrawResults">Stores all DrawCardActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectHeroToMoveCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location},System.Func{Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Location},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker, who will then select a Card to move.
            </summary>
            <param name="hero">The DecisionMaker, who selects which HeroTurnTaker will select a Card to move.</param>
            <param name="fromLocation">A Func that returns the Location from which a Card can be moved, based on the HeroTurnTaker selected by the DecisionMaker.</param>
            <param name="toLocation">A Func that resturns the Location to which the selected Card will be moved, based on the HeroTurnTaker selected by the DecisionMaker.</param>
            <param name="optionalSelectHero">Whether or not selecting a HeroTurnTaker to move a Card is optional.</param>
            <param name="optionalMoveCard">Once a HeroTurnTaker is selected, whether or not selecting which Card to move Card is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="toBottom">If true, the selected Card will be moved to the bottom of "toLocation" rather than on top.</param>
            <param name="isPutIntoPlay">If the Card is moving to a PlayArea, whether or not to treat the Card as being "put into play".</param>
            <param name="playIfMovingToPlayArea">If true, will treat the move as playing the Card if it is moving to a PlayArea.</param>
            <param name="additionalCriteria">If not null, applies additional criteria to the HeroTurnTaker that can be selected to move a Card.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="cardCriteria">If not null, applies additional criteria to the Card that can be selected by the selected HeroTurnTaker.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetsAndDealDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.DamageSource,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Nullable{System.Int32},System.Func{System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.TargetInfo,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects multiple targets. The provided DamageSource deals a fixed amount of damage of the provided DamageType.
            </summary>
            <param name="hero">The DecisionMaker that selects which targets will be dealt damage.</param>
            <param name="source">The DamageSource that will deal damage to each selected target.</param>
            <param name="amount">The amount of damage that will be dealt to each selected target.</param>
            <param name="damageType">The DamageType of the damage that will be dealt to each selected target.</param>
            <param name="numberOfTargets">The number of targets that the DecisionMaker will select. If null, all applicable targets will be dealt damage.</param>
            <param name="optional">Whether or not dealing damage is optional.</param>
            <param name="requiredTargets">If not null, the minimum number of targets that must be selected, after which selection becomes optional.</param>
            <param name="isIrreducible">Whether or not the damage dealt to each target is irreducible.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="autoDecide">If true, the order of targets will be automatically selected without player input.</param>
            <param name="additionalCriteria">If not null, additional criteria to apply to the targets that may be selected.</param>
            <param name="storedResultsDecisions">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsDamage">Stores all DealDamageActions that result from the call to this method.</param>
            <param name="followUpDamageInformation">If not null, provides additional information when multiple instances of damage will be dealt to each selected target.</param>
            <param name="addStatusEffect">If not null, executes an IEnumerator that adds a status effect to each target when it is dealt damage.</param>
            <param name="selectTargetsEvenIfCannotDealDamage">If true, targets will be seleted even if damage cannot be dealt to them.</param>
            <param name="overrideSequenceIndex">If not null, overrides the ordinal number of the current target being selected.</param>
            <param name="stopDealingDamage">If not null, when this Func returns true, not further targets will be selected.</param>
            <param name="ignoreBattleZone">If true, targets can be selected that are not in the same BattleZone as the CardSource.</param>
            <param name="damageSourceInfo">If the "source" parameter is null, this is used to determine the source of the damage by its description. Example: "The villain target with the lowest HP", as opposed to a specific Card.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
            <seealso cref="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetsAndDealDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.DamageSource,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Func{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction}},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)"/>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTargetsAndDealDamage(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.DamageSource,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Nullable{System.Int32}},Handelabra.Sentinels.Engine.Model.DamageType,System.Func{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction}},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.TargetInfo,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects multiple targets. The provided DamageSource deals a dynamic amount of damage of the provided DamageType.
            </summary>
            <param name="hero">The DecisionMaker that selects which targets will be dealt damage.</param>
            <param name="source">The DamageSource that will deal damage to each selected target.</param>
            <param name="amount">A Func that returns a dynamic amount of damage based on the target Card selected.</param>
            <param name="damageType">The DamageType of the damage that will be dealt to each selected target.</param>
            <param name="dynamicNumberOfTargets">A Func that returns the number of targets that the DecisionMaker will select. If null, all applicable targets will be dealt damage.</param>
            <param name="optional">Whether or not dealing damage is optional.</param>
            <param name="requiredTargets">If not null, the minimum number of targets that must be selected, after which selection becomes optional.</param>
            <param name="isIrreducible">Whether or not the damage dealt to each target is irreducible.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="additionalCriteria">If not null, additional criteria to apply to the targets that may be selected.</param>
            <param name="storedResultsDecisions">Stores all SelectCardDecisions that result from the call to this method.</param>
            <param name="storedResultsDamage">Stores all DealDamageActions that result from the call to this method.</param>
            <param name="dynamicFollowUpDamageInformation">If not null, a Func that returns additional information when multiple instances of damage will be dealt to each selected target, based on the target Card selected.</param>
            <param name="addStatusEffect">If not null, executes an IEnumerator that adds a status effect to each target when it is dealt damage.</param>
            <param name="selectTargetsEvenIfCannotDealDamage">If true, targets will be seleted even if damage cannot be dealt to them.</param>
            <param name="overrideSequenceIndex">If not null, overrides the ordinal number of the current target being selected.</param>
            <param name="damageSourceInfo">If the "source" parameter is null, this is used to determine the source of the damage by its description. Example: "The villain target with the lowest HP", as opposed to a specific Card.</param>
            <param name="includeReturnedTargets">Whether or not target Cards that have left play and re-entered play should be added back into the list of selectable targets.</param>
            <param name="ignoreBattleZone">If true, targets can be selected that are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTurnTaker(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Boolean,System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a TurnTaker and stores it in "storedResults" for future use.
            </summary>
            <param name="hero">The Decisionmaker that selects a TurnTaker to store.</param>
            <param name="selectionType">The SelectionType of the presented SelectTurnTakerDecision.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a TurnTaker is optional.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available.</param>
            <param name="additionalCriteria">If not null, additional criteria that is applied to the TurnTakers that can be selected.</param>
            <param name="numberOfCards">If the SelectionType has to do with Cards, such as selecting them, provides the number of Cards involved.</param>
            <param name="dealDamageInfo">Any damage-related information related to the SelectTurnTakerDecision for presentation purposes.</param>
            <param name="checkExtraTurnTakersInstead">If true, will only include TurnTakers that are NOT in the current game, listed in Game.ExtraTurnTakers. If false, will only include TurnTakers that are actually in the Game.</param>
            <param name="canBeCancelled">Whether or not selecting a TurnTaker can be cancelled by other effects.</param>
            <param name="ignoreBattleZone">If true, includes TurnTakers that are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTurnTakerAndDoAction(Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.IEnumerator})">
            <summary>
            Presents a SelectTurnTakerDecision, then performs the "actionWithTurnTaker" based on the TurnTaker selected.
            </summary>
            <param name="selectTurnTaker">The SelectTurnTakerDecision to present.</param>
            <param name="actionWithTurnTaker">The IEnumerator to execute, based on the TurnTaker selected.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTurnTakersAndDoAction(Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Presents a SelectTurnTakersDecision, then performs the "actionWithTurnTaker" for each TurnTaker selected.
            </summary>
            <param name="selectTurnTakersDecision">The SelectTurnTakesrDecision to present.</param>
            <param name="actionWithTurnTaker">The IEnumerator to execute for each TurnTaker selected.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectTurnTakersAndDoAction(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Collections.IEnumerator},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Func{System.String},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a series of TurnTakers, and the provided Func will execute for each TurnTaker selected.
            </summary>
            <param name="hero">The DecisionMaker that selects TurnTakers to perform actions.</param>
            <param name="turnTakerCriteria">The criteria of TurnTakers that can be selected.</param>
            <param name="selectionType">The SelectionType of each SelectTurnTakerDecision that is presented.</param>
            <param name="actionWithTurnTaker">The Func that will be executed, taking in the selected TurnTaker as its parameter.</param>
            <param name="numberOfTurnTakers">If set, the number of TurnTakers to be selected.</param>
            <param name="optional">Whether or not selecting TurnTakers is optional.</param>
            <param name="requiredDecisions">If not null, the minimum number of TurnTakers that must be selected, after which the selection of TurnTakers becomes optional.</param>
            <param name="storedResults">Stores all SelectTurnTakerDecisions that result from the call to this method.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting a TurnTaker.</param>
            <param name="dealDamageInfo">Any damage-related information related to the SelectTurnTakerDecision for presentation purposes.</param>
            <param name="extraInfo">A Func that returns a string of any additional info to include to the player about the SelectTurnTakersDecision.</param>
            <param name="associatedCards">Any additional Cards related to the SelectTurnTakersDecision, other than the CardSource.</param>
            <param name="ignoreBattleZone">If true, TurnTakers can be selected even if they are not in the same BattleZone as the CardSource.</param>
            <param name="numberOfCards">If not null, provides additional "number of card" related information to the SelectTurnTakersDecision.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardsAndDoAction(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.IEnumerator},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},System.Boolean,System.Func{System.String},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            The DecisionMaker selects a series of Cards, and the provided Func will execute for each Card selected.
            </summary>
            <param name="hero">The DecisionMaker that selects TurnTakers to perform actions.</param>
            <param name="cardCriteria">The criteria of Cards that can be seleceted.</param>
            <param name="selectionType">The SelectionType of each SelectCardDecision that is presented.</param>
            <param name="actionWithCard">The Func that will be executed, taking in the selected Card as its parameter.</param>
            <param name="numberOfCards">If set, the number of Cards to be selected.</param>
            <param name="optional">Whether or not selecting Cards is optional.</param>
            <param name="requiredDecisions">If set, the minimum number of Cards that must be selected, after which selecting Cards becomes optional.</param>
            <param name="storedResults">Stores all SelectCardDecision that result from the call to this method.</param>
            <param name="allowAutoDecide">Whether or not the "Choose For Me" button is available when selecting Cards.</param>
            <param name="extraInfo">A Func that returns a string of any additional info to include to the player about the SelectTargetDecision.</param>
            <param name="ignoreBattleZone">If true, Cards can be selected even if they are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetActiveTurnTaker(System.String)">
            <summary>
            Manually sets the TurnTaker that is taking a turn.
            Used for Debugging purposes and not intended for general use from CardControllers.
            </summary>
            <param name="identifier">The identifier of the TurnTaker to make the ActiveTurnTaker.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Sets the HP of the provided target Card to the provided amount.
            </summary>
            <param name="hpGainer">The target Card that will have their HP set.</param>
            <param name="amount">THe value to which the target Card's HP will be set.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetHP(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectCardDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects target Cards. Each target Card selected sets their HP to a dynamic amount, based on the Card selected.
            </summary>
            <param name="hero">The DecisionMaker that selects which target Cards to set their HP.</param>
            <param name="criteria">The criteria of target Cards that can have their HP set.</param>
            <param name="amountBasedOnTarget">Func that returns the amount of HP the target Card will gain, based on the Card itself.</param>
            <param name="numberOfCardsToHeal">If set, the number of target Cards that will have their HP set.</param>
            <param name="optional">Whether or not setting the HP of target Cards is optional.</param>
            <param name="requiredHpGainers">If not null, the minimum number of target Cards that must set their HP, after which it becomes optional.</param>
            <param name="storedResults">Stores all SelectCardDeicions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetPhaseActionCountBasedOnNumberOfMatchingCards(Handelabra.Sentinels.Engine.Model.TurnPhase,Handelabra.Sentinels.Engine.Model.CardCriteria,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Sets the PhaseActionCount of the provided TurnPhase based on the number of Cards that match the provided CardCriteria.
            </summary>
            <param name="phase">The TurnPhase whose PhaseActionCount will be set.</param>
            <param name="cardCriteria">The criteria of Cards to be counted. This count will determine the TurnPhase's PhaseActionCount.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetPhaseActionCount(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Sets the PhaseActionCount of the provided TurnPhase to the provided amount.
            </summary>
            <param name="phase">The TurnPhase whose PhaseActionCount will be set.</param>
            <param name="amount">The amount to set the TurnPhase's PhaseActionCount to. Null indicates that it no longer has a PhaseActionCount.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetTurnPhase(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Changes the Game's TurnPhase to the provided TurnPhase.
            </summary>
            <param name="turnPhase">The new TurnPhase to set the Game's TurnPhase to.</param>
            <param name="isEphemeral">Whether or not the new TurnPhase is ephemeral. An ephemeral TurnPhase is a TurnPhase that occurs in the middle of another Turn.</param>
            <param name="forceIncrementTurnIndex">If true, the TurnIndex will be incremented even if the TurnTaker of the new TurnPhase is the same as the previous one.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShouldDrawTwoCardsInsteadOfOne(Handelabra.Sentinels.Engine.Model.TurnPhase)">
            <summary>
            Returns whether or not the Game should draw 2 Cards during a HeroTurnTaker's DrawCard TurnPhase instead of the usual 1.
            </summary>
            <param name="turnPhase">The TurnPhase for the TurnTaker that is being checked.</param>
            <returns>Whether or not the Game should draw 2 Cards during a HeroTurnTaker's DrawCard TurnPhase instead of the usual 1.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShuffleLocation(Handelabra.Sentinels.Engine.Model.Location,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.IDecision},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Shuffles all Cards at the provided Location.
            </summary>
            <param name="location">The Location, whose Cards will be shuffled.</param>
            <param name="decisionSources">Provides any Decisions that caused the Cards at the Location to be shuffled.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShuffleTrashIntoDeck(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Shuffles the Cards in the provided TurnTakerController's Trash into their Deck.
            </summary>
            <param name="turnTakerController">The TurnTakerController whose Trash Cards will be shuffled into their Deck.</param>
            <param name="necessaryToPlayCard">Whether or not the reason that the Cards are being shuffled is that a Card can be played from the top of the TurnTakerController's deck.</param>
            <param name="overrideDeck">If not null, overrides the normal Deck of the TurnTakerController to the provided Location instead, shuffling the Trash Cards into this Location.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SkipToNextTurn(Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Immediately skips to the next TurnTaker's turn, skipping all usual TurnPhases in between.
            </summary>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SkipToTurnTakerTurn(Handelabra.Sentinels.Engine.Controller.TurnTakerController)">
            <summary>
            Immediately skips to the provided TurnTakerController's turn, skipping everything in between.
            Used for debugging purposes only.
            </summary>
            <param name="turnTakerC">The TurnTakerController whose turn will be skipped to directly.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.StartGame(System.Boolean)">
            <summary>
            Starts the Game, which causes the Journal to start recording, each TurnTakerController to perform its StartGame() methods, and any other Start of Game checks.
            Called manually by Views, such as the Console, the UI and Tests.
            </summary>
            <param name="startTurnTakerControllers">Whether or not TurnTakerController should perform their StartGame() methods.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ResumeGame">
            <summary>
            Resumes a Game in progress, causing the Journal to start recording and the variant unlockables to be setup.
            Called manually by Views when required.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UpdateTurnPhasesForTurnTaker(Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean)">
            <summary>
            Immediately updates the TurnPhases that the provided TurnTakerController has.
            Example: A HeroTurnTaker becomes incapacitated. They lose their PlayCard/UsePower/DrawCard TurnPhases, and gain a UseIncapaciatedAbility TurnPhase instead.
            </summary>
            <param name="ttc">The TurnTakerController whose TurnPhases will be updated.</param>
            <param name="incapacitated">Whether or not the TurnTakerController is becoming incapacitated.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UseIncapacitatedAbility(Handelabra.Sentinels.Engine.Controller.IncapacitatedAbility)">
            <summary>
            The provided IncapacitatedAbility is used by its owning TurnTakerController.
            </summary>
            <param name="abilityToUse">The IncapacitatedAbility to be used.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UseIncapacitatedAbility(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32)">
            <summary>
            The provided HeroTurnTakerController uses one of their IncapacitatedAbilities, at the abilityIndex provided. 
            </summary>
            <param name="hero">The HeroTurnTakerController that uses ohe of their IncapacitatedAbility.</param>
            <param name="abilityIndex">The index of the HeroTurnTakerController's IncapacitatedAbility to be used.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UsePower(System.String,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The Card that matches the provided cardIdentifier uses its Power, with the provided powerIndex.
            Used primarily by Tests to directly use a Power on a Card.
            </summary>
            <param name="cardIdentifier">The identifier of the Card that will use its Power.</param>
            <param name="powerIndex">The index of the Power to be used on the Card.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UsePower(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            The Power at the powerIndex on the provided Card is used.
            </summary>
            <param name="card">The Card on which its CardController's UsePower() method will be called.</param>
            <param name="powerIndex">The index of the power to be used, passed as a parameter to the CardController's UsePower() method.</param>
            <param name="canBeCancelled">Whether or not the power use can be cancelled by other effects.</param>
            <param name="heroUsingPower">The HeroTurnTakerController that is using the Power.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UsePower(Handelabra.Sentinels.Engine.Controller.Power,System.Boolean,Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.HeroCharacterCardController)">
            <summary>
            The provided Power is used.
            </summary>
            <param name="powerToUse">The Power being used.</param>
            <param name="canBeCancelled">Whether or not the power use can be cancelled by other effects.</param>
            <param name="heroUsingPower">The HeroTurnTakerController that is using the Power.</param>
            <param name="heroCharacterCardUsingPower">If a specific HeroCharacterCardController is using the Power on another Card, this is the HeroCharacterCardController that is using the Power.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ActivateAbility(Handelabra.Sentinels.Engine.Controller.ActivatableAbility,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided ActivatableAbility is activated.
            </summary>
            <param name="abilityToUse">The ActivatableAbility to activate.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeYesNoCardDecision(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.YesNoCardDecision},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided DecisionMaker makes a YesNoDecision relating to the provided Card.
            </summary>
            <param name="hero">The DecisionMaker that makes the YesNoDecision.</param>
            <param name="type">The SelectionType of the presented YesNoDecision.</param>
            <param name="card">The Card relating to the YesNoDecision for context.</param>
            <param name="action">If not null, the GameAction that caused the YesNoDecision to occur.</param>
            <param name="storedResults">Stores all YesNoCardDecisions that result from the call to this method.</param>
            <param name="associatedCards">Any additional Cards that are associated with the YesNoDecision.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddStatusEffect(Handelabra.Sentinels.Engine.Model.StatusEffect,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Adds the provided StatusEffect to the Game, taking effect immediately.
            </summary>
            <param name="effect">The StatusEffect to add to the Game.</param>
            <param name="showMessage">Whether or not to show a message indicating the addition of the StatusEffect.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShouldAutoDecideHighestLowestHP(Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the Game should automatically decide which target Card is considered to be the highest or lowest HP.
            </summary>
            <param name="gameAction">If not null, the GameAction that needs to determine the highest/lowest HP.</param>
            <param name="dealDamageInfo">The information on the current and future damage that will be dealt for the purposes of finding the highest/lowest HP.</param>
            <param name="ambiguousCards">The Cards which are to be considered as either the highest or lowest HP.</param>
            <param name="evenIfCannotDealDamage">Whether or not to determine the highest/lowest HP even if the targets cannot deal damage.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>Whether or not the Game should automatically decide which target Card is considered to be the highest or lowest HP.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShouldAutoDecideTurnTakersWithMostFewest(Handelabra.Sentinels.Engine.Controller.GameAction,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.TurnTaker},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the Game should automatically decide which TurnTaker is considered to have the most or fewest of some value.
            </summary>
            <param name="gameAction">If not null, the GameAction that needs to determine the most/fewest TurnTaker.</param>
            <param name="ambiguousTurnTakers">The TurnTakers which are to be considered as either having the most or fewest of some value.</param>
            <param name="evenIfCannotDealDamage">Whether or not to determine the most/fewest of a value even if they cannot deal damage.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>Whether or not the Game should automatically decide which TurnTaker is considered to have the most or fewest of some value.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTarget(Handelabra.Sentinels.Engine.Model.Card,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided target Card becomes a non-target (ie. it has no Hit Points).
            </summary>
            <param name="card">The Card that will become a non-target.</param>
            <param name="leavesPlayIfInPlay">If true, when the target Card becomes a non-target Card, it is considered as a "target leaves play" event.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoNothing">
            <summary>
            Return this instead of null when you want nothing to happen from a coroutine.
            This is a workaround for any situations in which an IEnumerator is required, but there's no logic that needs to bed executed.
            </summary>
            <returns>A coroutine that does nothing.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetListOfActionsThatTurnTakersCannotPerform">
            <summary>
            Returns a list of PhaseActions that TurnTakerControllers in the Game cannot currently perform as a List of Phase objects.
            Each TurnTakerController is stored as a Key in the returned Dictionary, with their List of Phases representing unperformable actions.
            Phase.PlayCard = Cannot Play Cards, Phase.DrawCard = Cannot Draw Cards, Phase.UsePower = Cannot Use Powers
            </summary>
            <returns>A list of PhaseActions that TurnTakerControllers in the Game cannot currently perform.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetListOfActionsThatTurnTakersCannotPerformAsStrings">
            <summary>
            Returns a list of PhaseActions that TurnTakerControllers in the Game cannot currently perform, as an output string.
            </summary>
            <returns>A list of PhaseActions that TurnTakerControllers in the Game cannot currently perform, as an output string.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetSpecialStringsForEffectsList">
            <summary>
            Returns a collection of SpecialString objects, one for each Status Effect in the effects list of the Game (ie. the lightning bolt).
            </summary>
            <returns>A collection of SpecialString objects, one for each Status Effect in the effects list of the Game (ie. the lightning bolt).</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetSpecialStringsForCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns a collection of SpecialString objects, for all Status Effects that apply to the provided Card.
            </summary>
            <param name="card">The Card for each its SpecialString objects will be returned.</param>
            <returns>A collection of SpecialString objects, for all Status Effects that apply to the provided Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsPromoCardUnlocked(System.String)">
            <summary>
            Returns whether or not a Promo Card (Variant Card) with the provided identifier has been unlocked already.
            </summary>
            <param name="identifier">The identifier of the promo Card to check whether or not it has been unlocked.</param>
            <returns>Whether or not a Promo Card (Variant Card) with the provided identifier has been unlocked already.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsPromoCardUnlockableThisGame(System.String)">
            <summary>
            Returns whether or not the Promo Card (Variant Card) with the provided identifier is unlockable in the current Game.
            </summary>
            <param name="identifier">The identifier of the Promo Card to check whether or not it is unlockable.</param>
            <returns>Whether or not the Promo Card (Variant Card) with the provided identifier is unlockable in the current Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UnlockPromoCard(Handelabra.Sentinels.Engine.Controller.PromoCardUnlockController)">
            <summary>
            Unlocks the provided PromoCardUnlockController (Variant Card).
            </summary>
            <param name="promoCard">The Promo Card to be unlocked.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DestroyAnyCardsThatShouldBeDestroyed(System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Performs a manual check for any Cards in play that should be destroyed, but are not already destroyed for some reason, such as being indestructible.
            </summary>
            <param name="ignoreBattleZone">If true, will check for Cards to destroy even if they are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsTurnTakerInGame(System.String)">
            <summary>
            Returns whether or not there is a TurnTaker in the game that has the provided id.
            </summary>
            <param name="id">The identifier of the TurnTaker to look for.</param>
            <returns>Whether or not there is a TurnTaker in the game that has the provided id.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetPersistentValueInView(System.String,System.Object)">
            <summary>
            Sets a key-value pair on the View side, rather than within the Model or Controller layer.
            </summary>
            <param name="key">The key of the value to set in the View.</param>
            <param name="value">The value to set in the view.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetPersistentValueFromView(System.String,System.Type)">
            <summary>
            Gets the object with a matching key from the View side, if any matching pair is found.
            </summary>
            <param name="key">The key of the value to retrieve from the View.</param>
            <param name="type">The Type of object to expect when looking up the Key.</param>
            <returns>The object with a matching key from the View side, if any matching pair is found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetPersistentValueFromView``1(System.String)">
            <summary>
            Gets the object with a matching key from the View side, if any matching pair is found.
            </summary>
            <param name="key">The key of the value to retrieve from the View.</param>
            <returns>The object with a matching key from the View side, if any matching pair is found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetHeroCardsInBox(System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean})">
            <summary>
            Returns all Hero Cards meeting criteria that are "in the box" (out of Game but available to the player based on the game content they own).
            The information is returned as a KeyValuePair, where the first element is the identifier of the HeroCard and the second is the identifier of the HeroTurnTaker.
            </summary>
            <param name="identifierCriteria">The criteria of identifiers that are acceptable when getting HeroCard identifiers from the box.</param>
            <param name="turnTakerCriteria">The criteria of identifiers that are acceptable when getting HeroTurnTaker identifiers from the box.</param>
            <returns>All Hero Cards meeting criteria that are "in the box" (out of Game but available to the player based on the game content they own).</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetVillainAsDefeated(System.String)">
            <summary>
            Informs the View that the villain of the specified identifier has been defeated.
            Not intended for general use by CardControllers.
            </summary>
            <param name="identifier">The identifier of the Villain to be marked as defeated in the View.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.HasVillainEverBeenDefeated(System.String)">
            <summary>
            Returns whether or not the villain of the provided identifier has ever been defeated by the player.
            </summary>
            <param name="identifier">The identifier of the villain to check whether or not they have ever been defeated.</param>
            <returns>Whether or not the provided villain of matching identifier has ever been defeated by the player.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.HasPromoCardAlreadyBeenUnlocked(System.String)">
            <summary>
            Returns whether or not the Promo Card (Variant Card) of the provided identifier has already been unlocked by the player.
            </summary>
            <param name="identifier">The identifier of the Promo Card to check whether or not it has already been unlocked.</param>
            <returns>Whether or not the Promo Card (Variant Card) of the provided identifier has already been unlocked by the player.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PromoCardHasBeenUnlockedKey(System.String)">
            <summary>
            Generates a string key used for unlocking Promo Cards (Variant Cards).
            Not used by individual CardControllers.
            </summary>
            <param name="promoIdentifier">The identifier of the Promo Card to generate a string key for.</param>
            <returns>A generated string key used for unlocking Promo Cards (Variant Cards).</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.VillainHasBeenDefeatedKey(System.String)">
            <summary>
            Generates a string key used for checking whether or not a given Villain has been defeated.
            Not used by individual CardControllers.
            </summary>
            <param name="villainCharacterCardIdentifier">The identifier of the Villain to generate a string key for.</param>
            <returns>A generated string key used for checking whether or not a given Villain has been defeated.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.WasLastHeroStandingKey(System.String)">
            <summary>
            Generates a string key used for checking whether or not the given hero was the last hero standing in a battle.
            Not used by individual CardControllers.
            </summary>
            <param name="heroCharacterCardIdentifier">The identifier of the hero to generate a string key for.</param>
            <returns>A genearated string key used for checking whether or not the given hero was the last hero standing in a battle.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.HasLostToVillainKey(System.String,System.String)">
            <summary>
            Generates a string key used for checking whether or not the given hero has lost a battle to the given villain.
            Not used by individual CardControllers.
            </summary>
            <param name="heroCharacterCardIdentifier">The identifier of the hero to check against their battles vs the villain.</param>
            <param name="villainCharacterCardIdentifier">The identifier of the villain to check against their battles vs the hero.</param>
            <returns>A generated string key used for checking whether or not the given hero has lost a battle to the given villain.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PrintTriggers(System.Boolean)">
            <summary>
            Prints all Triggers that are currently in the Game.
            Used for debugging purposes only.
            </summary>
            <param name="includingRemoved">Whether or not to also include Triggers that are going to soon be removed.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CheckForPromoCardUnlock(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Checks whether or not the provided GameAction causes a Promo Card (Variant Card) to be unlocked.
            </summary>
            <param name="action">The GameAction that may or may not cause a Promo Card (Variant Card) to be unlocked.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CheckForAchievements(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Checks whether or not the provided GameAction causes an Achievement to be achieved or its count incremented (makes progress towards being achieved).
            </summary>
            <param name="action">The GameAction that may or may not cause an Achievement to be achieved or to make progress.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UnlockAchievement(Handelabra.Sentinels.Engine.Controller.Achievements.AchievementController)">
            <summary>
            Unlocks the provided AchievementController.
            Not called by CardControllers.
            </summary>
            <param name="achievement">The Achievement to unlock.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IncrementAchievement(Handelabra.Sentinels.Engine.Controller.Achievements.IncrementalAchievementController,System.Double)">
            <summary>
            Increments the counting value of the provided IncrementalAchievementController.
            Not called by CardControllers.
            </summary>
            <param name="achievement">The IncrementalAchievementController to increment.</param>
            <param name="totalProgress">The total progress of the Achievement so far.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddCardControllerToList(Handelabra.Sentinels.Engine.Controller.CardControllerListType,Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Adds the provided CardController to the Ask list of type CardControllerListType.
            As such, whenever the appropriate "Ask" method is called, it will include the provided CardController.
            CardControllers not in this list will NOT have their Ask() methods called, even if they are overridden.
            </summary>
            <param name="type">The CardControllerListType type of the Ask to be included.</param>
            <param name="cardController">The CardController to add to the CardControllerListType Ask list.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveCardControllerFromList(Handelabra.Sentinels.Engine.Controller.CardControllerListType,Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            Removes the provided CardController from the Ask list of type CardControllerListType.
            Nothing will happen if the provided CardController is not in the list already.
            </summary>
            <param name="type">The CardControllerListType type of the Ask to be removed.</param>
            <param name="cc">The CardController to remove from the CardControllerListType Ask list.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeTargettable(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Int32},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes ALL Cards that match the cardCriteria and turns them into targets, with a dynamic Maximum HitPoints returned by the maxHP Func.
            For the Cards that are already in play, the DecisionMaker will decide in which order they become targets in situations where it may affect the outcome.
            </summary>
            <param name="decider">The DecisionMaker that decides the order in which Cards in play become targets, if it may affect the outcome.</param>
            <param name="cardCriteria">All Cards matching this criteria will become target Cards.</param>
            <param name="maxHP">A Func that returns the Maximum HitPoints of the new target Card, based on the Card itself.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MakeTargettable(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes the provided Card a target Card with the provided Maxmimum HitPoints and the provided Current HitPoints.
            </summary>
            <param name="card">The Card that will become a target Card.</param>
            <param name="maxHP">The Maximum HitPoints of the new target Card.</param>
            <param name="currentHP">The Current HitPoints of the new target Card.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTargets(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Makes ALL target Cards matching the cardCriteria into non-targets by removing their HitPoints and Maximum HitPoints.
            </summary>
            <param name="cardCriteria">The criteria of Cards that will have their "targetness" removed.</param>
            <param name="ignoreBattleZone">If true, will also apply to target Cards that are not in the same BattleZone as the CardSource.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ModifyKeywords(System.String,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Produces a ModifyKeywordsAction, which allows Cards to react to the Cards that are changing their keywords.
            </summary>
            <param name="keyword">The new keyword that is being added to or removed from the affectedCards.</param>
            <param name="addingOrRemoving">If true, the new keyword is being added to the affectedCards. If false, it is being removed from the affectedCards.</param>
            <param name="affectedCards">The Cards that are changing their keywords.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SwitchCardsAtLocations(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Swaps all Cards at 2 different Locations in bulk.
            </summary>
            <param name="tt">The TurnTakerController that is swapping the Cards of the 2 different Location.</param>
            <param name="source">The first Location that the Cards are moving from/to.</param>
            <param name="destination">The second Location that the Cards are moving from/to.</param>
            <param name="shuffleSourceAfterwards">Whether or not to shuffle the SOURCE Location after the Cards have been moved.</param>
            <param name="shuffleDestinationAfterwards">Whether or not to shuffle the DESTINATION Location after the Cards have been moved.</param>
            <param name="reverseCardOrder">Whether or not to reverse the Cards order once they have moved to their new Locations.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndFlipCards(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.FlipCardAction},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Object},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects Cards meeting the LinqCardCriteria. Those Cards are all flipped.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects which Cards will be flipped.</param>
            <param name="cardCriteria">The criteria of Cards that can be selected for flipping.</param>
            <param name="numberOfCardsToFlip">If not null, the number of Cards that will be selected to flip. If null, ALL Cards matching the LinqCardCriteria will be flipped.</param>
            <param name="toFaceDown">If true, they the selected Cards will be flipped face-down. If false, they will be flipped face-up.</param>
            <param name="optional">Whether or not the selecting of Cards to flip is optional.</param>
            <param name="requiredDecisions">If not null, the minimum number of Cards that must be selected, after which point selecting Cards becomes optional.</param>
            <param name="storedResults">Stores all FlipCardActions that result from the call to this method.</param>
            <param name="treatAsPutIntoPlay">If true, treats newly-flipped Cards as if they had just been put into play.</param>
            <param name="choiceOrdering">If not null, will first order all Card choices according to this Func before selecting and flipping the Cards.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveIntoPlay(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided Card moves into the provided TurnTaker's PlayArea without actually playing it.
            </summary>
            <param name="mover">The TurnTakerController that is moving the Card (not necessarily to their own PlayArea).</param>
            <param name="card">The Card that is moving to the PlayArea.</param>
            <param name="whosePlayArea">The TurnTaker whose PlayArea the Card is moving to.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.LoadAchievementControllers(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.Achievements.Achievement})">
            <summary>
            Loads the achievement controllers. This should be called before starting the game, 
            with all of the available achievements that the player has not yet earned.
            Not used by CardControllers.
            </summary>
            <param name="achievements">The Achivements for which AchivementControllers will be created.</param>
            <returns>A collection of AchievementControllerBase objects, one for each Achievement provided to this method.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveAllStatusEffectControllers">
            <summary>
            Removes all StatusEffectControllers from the GameController.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsTurnTakerVisibleToCardSource(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided TurnTaker is "visible" to the provided CardSource.
            That is, whether or not the provided CardSource is allowed to interact with the provided TurnTaker.
            </summary>
            <param name="tt">The TurnTaker that may or may not be visible to the CardSource.</param>
            <param name="cardSource">The CardSource that may or may not be visible to the TurnTaker.</param>
            <returns>Whether or not the provided TurnTaker is "visible" to the provided CardSource.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsCardVisibleToCardSource(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided Card is "visible" to the provided CardSource.
            That is, whether or not the provided CardSource is allowed to interact with the provided Card.
            </summary>
            <param name="card">The Card  that may or may not be visible to the CardSource.</param>
            <param name="cardSource">The CardSource that may or may not be visible to the Card.</param>
            <returns>Whether or not the provided Card is "visible" to the provided CardSource.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsGameWinnable">
            <summary>
            Returns whether or not it is possible to win the Game in the current state.
            Usually true, but a villain can set this to false by returning false in its own overridden "IsGameWinnable()" method.
            </summary>
            <returns>Whether or not it is possible to win the Game in the current state.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsOnlyNonIncapacitatedHero(System.String,System.String)">
            <summary>
            Returns whether or not the HeroTurnTaker with identifier of "identifier" and their HeroCharacterCard with identifier "characterIdentifier" is the ONLY HeroCharacterCard that is NOT incapacitated.
            </summary>
            <param name="identifier">The identifier of the HeroTurnTaker.</param>
            <param name="characterIdentifier">The identifier of their HeroCharacterCard.</param>
            <returns>Whether or not the HeroTurnTaker with identifier of "identifier" and their HeroCharacterCard with identifier "characterIdentifier" is the ONLY HeroCharacterCard that is not incapacitated.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsOnlyIncapacitatedHero(System.String,System.String)">
            <summary>
            Returns whether or not the HeroTurnTaker with identifier of "ttIdentifier" and their HeroCharacterCard with identifier "characterIdentifier" is the ONLY HeroCharacterCard that IS incapacitated.
            </summary>
            <param name="ttIdentifier">The identifier of the HeroTurnTaker.</param>
            <param name="characterIdentifier">The identifier of their HeroCharacterCard.</param>
            <returns>Whether or not the HeroTurnTaker with identifier of "ttIdentifier" and their HeroCharacterCard with identifier "characterIdentifier" is the ONLY HeroCharacterCard that IS incapacitated.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DidAnswerYes(Handelabra.Sentinels.Engine.Controller.YesNoDecision)">
            <summary>
            Returns whether or not the player(s) answered "Yes" to the provided YesNoDecision.
            </summary>
            <param name="decision">The YesNoDecision to check whether or not the answer was "Yes".</param>
            <returns>Whether or not the player(s) answered "Yes" to the provided YesNoDecision.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DidAnswerNo(Handelabra.Sentinels.Engine.Controller.YesNoDecision)">
            <summary>
            Returns whether or not the player(s) answered "No" to the provided YesNoDecision.
            </summary>
            <param name="decision">The YesNoDecision to check whether or not the answer was "No".</param>
            <returns>Whether or not the player(s) answered "Np" to the provided YesNoDecision.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.WillBeDestroyed(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card will be destroyed in its current state.
            Takes indestructibility into account.
            </summary>
            <param name="card">The Card that may or may not be destroyed.</param>
            <returns>Whether or not the provided Card will be destroyed in its current state.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetSelectedTurnTaker(System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision})">
            <summary>
            Returns the TurnTaker that was selected from the first completed SelectTurnTakerDecision in the provided List of SelectTurnTakerDecisions.
            </summary>
            <param name="list">The List of SelectTurnTakerDecisions from which the First completed SelectTurnTakerDecision's SelectedTurnTaker will be returned.</param>
            <returns>The TurnTaker that was selected from the first completed SelectTurnTakerDecision in the provided List of SelectTurnTakerDecisions.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetSelectedPhase(System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectTurnPhaseDecision})">
            <summary>
            Returns the TurnPhase that was selected from the first completed SelectTurnPhaseDecision in the provided List of SelectTurnPhaseDecisions.
            </summary>
            <param name="list">The List of SelectTurnPhaseDecisions from which the First completed SelectTurnPhaseDecisions's SelectedTurnPhase will be returned.</param>
            <returns>The TurnPhase that was selected from the first completed SelectTurnPhaseDecision in the provided List of SelectTurnPhaseDecisions.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsLeavingPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location)">
            <summary>
            Returns whether or not the act of the provided Card moving to the provided Location would count as the Card leaving play.
            </summary>
            <param name="card">The Card that may or may not be leaving play.</param>
            <param name="destination">The Location to which the Card would be moved.</param>
            <returns>Whether or not the act of the provided Card moving to the provided Location would count as the Card leaving play.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsPlayAreaVisibleToActiveTurnTaker(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns whether or not the PlayArea of the provided TurnTaker is visible to the players.
            The visible PlayAreas are the HeroTurnTaker whose turn it is (if any), the Environment's, and the Villain's.
            </summary>
            <param name="tt">The TurnTaker to check for PlayArea visibility.</param>
            <returns>Whether or not the PlayArea of the provided TurnTaker is visible to the players.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SwitchCards(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Swaps provided Card A with provided Card B, including their TurnTaker Owners, those Cards' current HitPoints, Cards next to or under those Cards, etc.
            </summary>
            <param name="cardA">The first Card to swap.</param>
            <param name="cardB">The second Card to swap.</param>
            <param name="playCardIfMovingToPlayArea">Whether or not the Cards should be "played" if they are moving to a PlayArea.</param>
            <param name="ignoreFlipped">Whether or not to also swap the two Cards's flipped state (so if Card A is flipped and Card B is not, then Card A will not be flipped and Card B will be flipped).</param>
            <param name="ignoreHitPoints">Whether or not to swap the HitPoints of Card A and Card B.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FlipTokens(Handelabra.Sentinels.Engine.Model.TokenPool,Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.FlipTokensAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Flips the provided number of tokens from the originPool and moves them to the destinationPool. 
            </summary>
            <param name="originPool">The TokenPool from which tokens will be flipped.</param>
            <param name="destinationPool">The TokenPool to which tokens will be moved when flipped.</param>
            <param name="numberOfTokens">The number of tokens to flip.</param>
            <param name="storedResults">Stores all FlipTokensActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTokensToPool(Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Adds the provided number of tokens to the provided TokenPool.
            </summary>
            <param name="pool">The TokenPool to which tokens will be added.</param>
            <param name="numberOfTokens">The number of tokens to add to the TokenPool.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTokensFromPool(Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.RemoveTokensFromPoolAction},System.Boolean,Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Removes the provided number of tokens from the provided TokenPool.
            </summary>
            <param name="pool">The TokenPool from which tokens will be removed.</param>
            <param name="numberOfTokens">The number of tokens to remove from the TokenPool.</param>
            <param name="storedResults">Stores all RemoveTokensFromPoolActions that result from the call to this method.</param>
            <param name="optional">Whether or not removing tokens from the TokenPool is optional.</param>
            <param name="gameAction">The GameAction that is causing the tokens to be removed, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.MoveTokensFromPoolToPool(Handelabra.Sentinels.Engine.Model.TokenPool,Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Moves the provided number of tokens from one TokenPool to another TokenPool.
            </summary>
            <param name="fromPool">The TokenPool from which the tokens will be moved.</param>
            <param name="toPool">The TokenPool to which the tokens will be moved.</param>
            <param name="numberOfTokens">The number of tokens that will be moved.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReplaceStatusEffectReferences(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Finds any StatusEffects which refer to Card A as part of their criteria, and update them to apply instead to Card B.
            Not used directly by CardControllers.
            </summary>
            <param name="cardA">The Card to which the StatusEffects currently refer.</param>
            <param name="cardB">The new Card to which the StatusEffects should refer.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReplaceStatusEffectReferences(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Finds any StatusEffects which refer to TurnTaker A as part of their criteria, and update them to apply instead to TurnTaker B.
            Not used directly by CardControllers.
            </summary>
            <param name="ttA">The TurnTaker to which the StatusEffects currently refer.</param>
            <param name="ttB">The new TurnTaker to which the StatusEffects should refer.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetMostRecentTriggerIndex">
            <summary>
            Rerturns the index of the most recently-added Trigger. This index is used to uniquely identify each Trigger in the Game.
            Not called directly by CardControllers.
            </summary>
            <returns>The index of the most recently-added Trigger. This index is used to uniquely identify each Trigger in the Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RunReflectionEnumerator(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Object[])">
            <summary>
            Manually executes a method with the same name as the "methodToExecute" with provided parameters on the CardController of the provided Card.
            Not called directly by CardControllers.
            </summary>
            <param name="cardWithMethod">The Card of the CardController on which the method will be executed.</param>
            <param name="methodToExecute">The name of the method to find on the CardController to execute.</param>
            <param name="parameters">The parameters to provide for the method to execute.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesCardGetReplaced(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns the Card that replaces the provided Card, if any.
            Used by Cards that copy the behaviour of other Cards, such as many of Guise's Cards.
            </summary>
            <param name="card">The Card to check if it should be replaced by another Card.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The Card that replaced the provided Card, if any. Null if there is no replacement.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesCardSourceGetReplaced(Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.GameAction,Handelabra.Sentinels.Engine.Controller.ITrigger)">
            <summary>
            Returns the CardSource that replaces the provided CardSource, if any.
            Used by Cards that copy the behaviour of other Cards, such as many of Guise's Cards.
            </summary>
            <param name="cardSource">The CardSource to check if it should be replaced by another CardSource.</param>
            <param name="gameAction">The GameAction that is checking if the CardSource should be replaced, if any.</param>
            <param name="trigger">The Trigger that is checking if the CardSource should be replaced, if any.</param>
            <returns>The CardSource that replaced the provided CardSource, if any. Null if there is no replacement.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesTurnTakerControllerGetReplaced(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns the TurnTakerController that replaces the provided TurnTakerController, if any.
            Used by Cards that copy the behaviour of other Cards, such as many of Guise's Cards.
            </summary>
            <param name="ttc">The TurnTakerController to check if it should be replaced by another TurnTakerController.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The Card that replaced the provided Card, if any. Null if there is no replacement.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardsIncreasingPhaseActionCount">
            <summary>
            Returns a List of CardControllers that are increasing the current TurnPhase's PhaseActionCount.
            </summary>
            <returns>A List of CardControllers that are increasing the current TurnPhase's PhaseActionCount.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GiveHighFiveToAnotherHero(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GiveHighFiveAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects another HeroTurnTakerController to which they will give a high five.
            </summary>
            <param name="decisionMaker">The DecionMaker that selects which HeroTurnTakerController to give a High Five to.</param>
            <param name="storedResults">All GiveHighFiveActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GiveHighFive(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.GiveHighFiveAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided "highFiveGiver" gives a high five to the provided "highFiveReceiver".
            </summary>
            <param name="highFiveGiver">The HeroTurnTakerController that is giving a high five.</param>
            <param name="highFiveReceiver">The HeroTurnTakerController that is receiving a high five.</param>
            <param name="storedResults">Stores all GiveHighFiveActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PlayAirGuitar(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided HeroTurnTakerController plays the Air Guitar.
            </summary>
            <param name="guitarist">The HeroTurnTakerController that plays the Air Guitar.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.VossTakesOver(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.BattleZone,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Rainek Kel'Voss takes over and replaces OblivAeon.
            Only used in OblivAeon mode.
            </summary>
            <param name="vossCard">The Rainek Kel'Voss Card.</param>
            <param name="oblivaeonBookletCard">The OblivAeon Booklet Card.</param>
            <param name="originalVossBattleZone">The BattleZone that Rainek Kel'Voss was originally in.</param>
            <param name="oblivaeonTurnTaker">The TurnTaker for OblivAeon.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnPhasesWhere(System.Func{Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean})">
            <summary>
            Returns all TurnPhase objects that match the provided criteria.
            </summary>
            <param name="turnPhaseCriteria">The criteria of TurnPhases to match.</param>
            <returns>All TurnPhase objects that match the provided criteria.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindTurnPhase(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.Phase)">
            <summary>
            Returns the TurnPhase object with the provided TurnTaker for the provided Phase.
            </summary>
            <param name="tt">The TurnTaker of the TurnPhase to return.</param>
            <param name="phase">The Phase of the TurnPhase to return.</param>
            <returns>The TurnPhase object with the provided TurnTaker for the provided Phase.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindNextTurnTaker">
            <summary>
            Returns the next TurnTaker that will take a turn.
            </summary>
            <returns>The next TurnTaker that will take a turn.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectWord(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{System.String},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectWordDecision},System.Boolean,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a single word (string) from a collection of words (strings).
            </summary>
            <param name="hero">The DecisionMaker that is selecting a word.</param>
            <param name="words">The choices of words to choose from.</param>
            <param name="selectionType">The SelectionType of the SelectWordDecision presented to the player.</param>
            <param name="storedResults">All SelectWordDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a word is optional.</param>
            <param name="associatedCards">Any other Cards that are associated with the need to select a word, if any.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectFromBox(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean},Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectFromBoxDecision},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a Card from outside the current Game, based on the Cards that player owns (Base Game + DLC).
            </summary>
            <param name="hero">The DecisionMaker that selects a Card from outside the current Game.</param>
            <param name="identifierCriteria">The criteria of Card identifiers that are allowed to be chosen by the DecisionMaker.</param>
            <param name="turnTakerCriteria">The criteria of TurnTaker identifiers that are own the Cards allowed to be chosen by the DecisionMaker.</param>
            <param name="selectionType">The SelectionType of the SelectFromBoxDecision presented to the DecisionMaker.</param>
            <param name="storedResults">All SelectFromBoxDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a Card from the box is optional.</param>
            <param name="allowMultiCardSelection">Whether or not to provide special handling for TurnTakers that have multiple CharacterCards (Example: The Sentinels).</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShuffleCardsInPlayArea(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.ShuffleCardsInPlayAreaAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Shuffles all the Cards in the provided TurnTakerController's PlayArea.
            </summary>
            <param name="whosePlayArea">The TurnTakerController whose PlayArea's Cards will be shuffled.</param>
            <param name="cardCriteria">The criteria of Cards to shuffle in the TurnTakerController's PlayArea.</param>
            <param name="storedResults">All ShuffleCardsInPlayAreaActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoneRoundOfDamage(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Sends out a DoneRoundOfDamageAction, indicating that a round of damage has completed. 
            This is used for Cards which wait until a round of damage is complete to execute their Triggers.
            </summary>
            <param name="results">All DealDamageActions that have occured during this "round of damage".</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndUnincapacitateHero(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Int32,System.Int32,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction},Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria)">
            <summary>
            The DecisionMaker selects a HeroTurnTaker whose HeroCharacterCard is incapacitated. That HeroTurnTaker is unincapaciated.
            Its HeroCharacterCard's HitPoints are set to "setHitPoints", and its HeroTurnTaker adds "putCardsInHand" number of Cards into its Hand.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects which HeroTurnTaker to unincapacitated.</param>
            <param name="setHitPoints">The HitPoints to set the unincapacitated HeroCharacterCard's HitPoints to.</param>
            <param name="putCardsInHand">The number of Cards to put back into the unincapacitated HeroTurnTaker's Hand.</param>
            <param name="storedResults">Stores all UnincapacitateHeroAction that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="heroCriteria">If not null, the criteria of HeroTurnTakers that can be selected.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndUnincapacitateHeroCharacter(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction},Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            The DecisionMaker selects an incapacitated HeroCharacterCard. That HeroCharacterCard is unincapaciated.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects which HeroCharacterCard to unincapacitated.</param>
            <param name="setHitPoints">The HitPoints to set the unincapacitated HeroCharacterCard's HitPoints to. If null, the HeroCharacterCard's HitPoints will be set to its MaximumHitPoints.</param>
            <param name="putCardsInHand">The number of Cards to put back into the unincapacitated HeroTurnTaker's Hand. If null, the HeroTurnTaker receives no Cards in their Hand.</param>
            <param name="optional">Whether or not unincapacitating a HeroCharacterCard is optional.</param>
            <param name="storedResults">Stores all UnincapacitateHeroAction that result from the call to this method.</param>
            <param name="heroCriteria">If not null, the criteria of HeroTurnTakers that can be selected.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="forceNormalBehavior">If true, the HeroCharacterCard will be unincapacitated the normal way, even in OblivAeon mode.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.UnincapacitateHero(Handelabra.Sentinels.Engine.Controller.CardController,System.Int32,System.Nullable{System.Int32},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction},Handelabra.Sentinels.Engine.Controller.CardSource,System.Boolean)">
            <summary>
            Unincapacitates the provided incapacitated CardController, setting their HitPoints to the provided "setHitPoints" amount.
            </summary>
            <param name="heroCharacterCard">The HeroCharacterCard to unincapacitated.</param>
            <param name="setHitPoints">The value to set the HeroCharacterCard's HitPoints to after they have been unincapacitated.</param>
            <param name="putCardsInHand">Puts this amount of of Cards into the HeroCharacterCard's owner HeroTurnTaker's Hand. If null no Cards will be put in their Hand.</param>
            <param name="storedResults">Stores all UnincapacitateHeroAction that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="forceNormalBehavior">If true, the HeroCharacterCard will be unincapacitated the normal way, even in OblivAeon mode.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.TargetEntersPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Creates a TargetEntersPlayAction, which allows Triggers that respond to a target entering play to execute.
            </summary>
            <param name="target">The target Card that is entering play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.TargetLeavesPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource,Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Creates a TargetLeavesPlayAction, which allows Triggers that respond to a target leaving play to execute.
            </summary>
            <param name="target">The target Card that is leaving play.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <param name="overrideBattleZone">If not null, overrides the normal BattleZone of the CardSource with the one provided.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindCharacterCard(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Model.Card},System.Boolean,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.DealDamageAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Finds the CharacterCard of the provided TurnTaker.
            The DecisionMaker selects which CharacterCard to consider to be "THE Character Card" if the TurnTaker has multiple CharacterCards.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects a single CharacterCard if the TurnTaker has multiple CharacterCards.</param>
            <param name="tt">The TurnTaker whose CharacterCard will be returned in storedResults.</param>
            <param name="selectionType">The SelectionType for why a CharacterCard needs to be selected, if ambiguous.</param>
            <param name="storedResults">Stores the CharacterCard found for the provided TurnTaker.</param>
            <param name="activeOnly">If true, only returns CharacterCards that are "active" (not incapaciated, out of game, etc)</param>
            <param name="additionalCriteria">If not null, additional criteria that must be applied to the CharacterCard.</param>
            <param name="damageInfo">Any Damage-related information pertaining for the reason to get the CharacterCard.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetStackTrace">
            <summary>
            Debug method that returns the current Stack Trace without throwing an Exception.
            </summary>
            <returns>The current Stack Trace without throwing an Exception.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PushFastCoroutines(System.Boolean)">
            <summary>
            Pushes whether or not to use FastCoroutines at this time.
            FastCoroutines are used during simulations that do not actually occur in the view in real-time.
            Not used by CardControllers.
            </summary>
            <param name="value">Whether or not to use FastCoroutines.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PopFastCoroutines">
            <summary>
            Pops (removes) the previously-called PushFastCoroutines(), restoring it to its previous value.
            FastCoroutines are used during simulations that do not actually occur in the view in real-time.
            Not called by CardControllers.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.PeekFastCoroutines">
            <summary>
            Peeks (returns without removing) the previously-called PushFastCoroutines().
            FastCoroutines are used during simulations that do not actually occur in the view in real-time.
            Not called by CardControllers.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsFastCoroutinesSet">
            <summary>
            Returns whether or not the Game is currently using Fast Coroutines.
            FastCoroutines are used during simulations that do not actually occur in the view in real-time.
            Not called by CardControllers.
            </summary>
            <returns>Whether or not the Game is currently using Fast Coroutines.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetPretendMode(System.Boolean)">
            <summary>
            Sets the Game to PretendMode, in which GameActions will only simulate their behaviour without causing the Game's state to change.
            Used for damage previewing purposes.
            Not called by CardControllers.
            </summary>
            <param name="value">The value to set PretendMode to.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectCardsAndPerformFunction(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.LinqCardCriteria,System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.Function}},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects a Card matching the provided LinqCardCriteria and executes a Function using the chosen Card.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects a Card to execute a method on.</param>
            <param name="criteria">The criteria of Cards that can be selected by the DecisionMaker.</param>
            <param name="functionsBasedOnCard">The Function that will execute with the selected Card as a parameter.</param>
            <param name="optional">Whether or not selecting a Card to execute a Function on is optional for the DecisionMaker.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPropertyJournalEntryBoolean(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns the nullable boolean value of the key-value pair stored as a CardProperty on the provided Card with the provided key.
            Returns null if the key-value pair was not found.
            </summary>
            <param name="card">The Card on which to returns the nullable boolean key-value pair's value.</param>
            <param name="key">The key of of the key-value pair whose nullable boolean value will be returned.</param>
            <returns>The nullable boolean value of the key-value pair stored as a CardProperty on the provided Card with the provided key. The value is null if the key-value pair was not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPropertyJournalEntryInteger(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns the nullable integer value of the key-value pair stored as a CardProperty on the provided Card with the provided key.
            Returns null if the key-value pair was not found.
            </summary>
            <param name="card">The Card on which to returns the nullable integer key-value pair's value.</param>
            <param name="key">The key of of the key-value pair whose nullable integer value will be returned.</param>
            <returns>The nullable integer value of the key-value pair stored as a CardProperty on the provided Card with the provided key. The value is null if the key-value pair was not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPropertyJournalEntryCard(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns the Card value of the key-value pair stored as a CardProperty on the provided Card with the provided key.
            Returns null if the key-value pair was not found.
            </summary>
            <param name="card">The Card on which to returns the Card key-value pair's value.</param>
            <param name="key">The key of of the key-value pair whose nullable integer value will be returned.</param>
            <returns>The Card value of the key-value pair stored as a CardProperty on the provided Card with the provided key. The value is null if the key-value pair was not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPropertyJournalEntryTurnTaker(Handelabra.Sentinels.Engine.Model.Card,System.String)">
            <summary>
            Returns the TurnTaker value of the key-value pair stored as a CardProperty on the provided Card with the provided key.
            Returns null if the key-value pair was not found.
            </summary>
            <param name="card">The Card on which to returns the TurnTaker key-value pair's value.</param>
            <param name="key">The key of of the key-value pair whose nullable integer value will be returned.</param>
            <returns>The TurnTaker value of the key-value pair stored as a CardProperty on the provided Card with the provided key. The value is null if the key-value pair was not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetCardPropertyJournalEntryStringList(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Boolean)">
            <summary>
            Returns the list of strings value of the key-value pair stored as a CardProperty on the provided Card with the provided key.
            Returns null if the key-value pair was not found.
            </summary>
            <param name="card">The Card on which to returns the list of strings key-value pair's value.</param>
            <param name="key">The key of of the key-value pair whose nullable boolean value will be returned.</param>
            <returns>The list of strings value of the key-value pair stored as a CardProperty on the provided Card with the provided key. The value is null if the key-value pair was not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddCardPropertyJournalEntry(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new key-value pair to the provided Card's CardProperties, where the value is a nullable boolean.
            </summary>
            <param name="card">The Card to which the key-value pair will be added.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="boolValue">The nullable boolean value of the key-value pair.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddCardPropertyJournalEntry(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new key-value pair to the provided Card's CardProperties, where the value is a collection of strings.
            </summary>
            <param name="card">The Card to which the key-value pair will be added.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="list">The collection of strings value of the key-value pair.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddCardPropertyJournalEntry(Handelabra.Sentinels.Engine.Model.Card,System.String,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Adds a new key-value pair to the provided Card's CardProperties, where the value is a Card.
            </summary>
            <param name="card">The Card to which the key-value pair will be added.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="cardValue">The Card value of the key-value pair.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddCardPropertyJournalEntry(Handelabra.Sentinels.Engine.Model.Card,System.String,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Adds a new key-value pair to the provided Card's CardProperties, where the value is a TurnTaker.
            </summary>
            <param name="card">The Card to which the key-value pair will be added.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="tt">The TurnTaker value of the key-value pair.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CompletedCardPlay(Handelabra.Sentinels.Engine.Controller.PlayCardAction)">
            <summary>
            Sends out a CompletedCardPlayAction once a Card has been played and all its Play() actions have been resolved.
            Used primarily for Triggers that must wait until a Card has fully-resolved its Play() actions before taking effect.
            </summary>
            <param name="play">The PlayCardAction that will be wrapped in a CompletedCardPlayAction, indicating that the PlayCardAction has completed fully.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReplaceTurnTaker(Handelabra.Sentinels.Engine.Model.TurnTaker,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.HashSet{System.String},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Replaces one TurnTaker with another TurnTaker matching the provided identifier from outside the Game.
            </summary>
            <param name="currentTurnTaker">The TurnTaker to be replaced.</param>
            <param name="newTurnTakerIdentifier">The idenrifier of the new TurnTaker to replace the old one, from outside the Game.</param>
            <param name="newPromoIdentifier">The promo identifier of the new TurnTaker. Only necessary if a TurnTaker other than the default TurnTaker is desired.</param>
            <param name="keepTurnTakerController">If true, the same TurnTakerController only has its internal TurnTaker replaced. If false, then the entire TurnTakerController is replaced.</param>
            <param name="keepCards">Whether or not to keep all the Cards out from the previous TurnTaker to be used by the new TurnTaker.</param>
            <param name="storedResults">Stores all ReplaceTurnTakerActions that result from the call to this method.</param>
            <param name="promoSwappingIdentifiers">For characters will multiple character cards, contains the promo identifiers that will replace the default character cards, if any. Example: The Sentinels' Adamant variants.</param>
            <param name="foilIdentifiers">Contains the identifiers of the character cards to use the foil version of their Card instead of the regular version.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ReplaceTurnTaker(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction},Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Replaces on TurnTaker with another TurnTaker that is already loaded into the Game.
            </summary>
            <param name="currentTurnTaker">The TurnTaker to be replaced.</param>
            <param name="newTurnTaker">The TurnTaker to replace the "currentTurnTaker" with.</param>
            <param name="keepTurnTakerController">If true, the same TurnTakerController only has its internal TurnTaker replaced. If false, then the entire TurnTakerController is replaced.</param>
            <param name="keepCards">Whether or not to keep all the Cards out from the previous TurnTaker to be used by the new TurnTaker.</param>
            <param name="storedResults">Stores all ReplaceTurnTakerActions that result from the call to this method.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AddTurnTakerController(Handelabra.Sentinels.Engine.Model.TurnTaker,System.Nullable{System.Int32})">
            <summary>
            Adds a new TurnTakerController to the Game.
            Not directly called by CardControllers.
            </summary>
            <param name="turnTaker">The TurnTaker whose TurnTakerController will be created.</param>
            <param name="index">The index of the new TurnTakerController, which determines where it fits into the turn order. If null, it will be added after the last TurnTaker's index.</param>
            <returns>The newly-added TurnTakerController.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveTurnTakerController(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Removes a TurnTakerController from the Game.
            Not directly called by CardControllers.
            </summary>
            <param name="turnTaker">The TurnTaker whose TurnTakerController will be removed from the Game.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RemoveAllCardsFromGame(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.TurnTakerController,System.Boolean)">
            <summary>
            Removes all Cards belonging to the provided TurnTakerController from the Game.
            Not directly called by CardControllers.
            </summary>
            <param name="ttc">The TurnTakerController whose Cards will all be removed from the Game.</param>
            <param name="responsibleTurnTaker">The TurnTakerController that is responsible for the Cards being removed from the Game. May differ from the "ttc" TurnTakerController.</param>
            <param name="performBeforeDestroyActions">Whether or not to perform "BeforeDestroy" actions on the Cards that are being removed from the Game before they are removed.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesHaveSameVillainsNowAsWhenCreated(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns whether or not the Game has the same VillainCharacterCard identifiers now as when the VillainTurnTakers were originally created.
            Not directly called by CardControllers. 
            </summary>
            <param name="villainCharacterIdentifiers">The VillainCharacterCard identifiers that are checked against the VillainTurnTakers.</param>
            <returns>Whether or not the Game has the same VillainCharacterCard identifiers now as when the VillainTurnTakers were originally created.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SetPretendGameOver(System.Boolean)">
            <summary>
            Sets the Game to a state of being a in a fake GameOver. 
            Example: When GloomWeaver SkinWalker replaces Spite: Agent of Gloom.
            </summary>
            <param name="value">The value to which to set the PretendGameOver value.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SkipToTurnPhase(Handelabra.Sentinels.Engine.Model.TurnPhase,System.Boolean,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Immediately skips from the current TurnPhase to another one.
            </summary>
            <param name="turnPhase">The TurnTaker that will be immediately skipped to.</param>
            <param name="isEphemeral">Whether or not the new TurnPhase is ephemeral, meaning that it takes place "within" another TurnPhase, after which it returns to the current TurnPhase.</param>
            <param name="forceIncrementRound">If true, the TurnIndex will be forced to increase by this sudden change of TurnPhases. Otherwise it will follow normal TurnIndex incrementing rules.</param>
            <param name="interruptActions">Whether or not to interrupt all other GameActions before the change to the new TurnPhase occurs.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.FindLastPhase(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns the Phase of the last TurnPhase that the provided TurnTaker has.
            </summary>
            <param name="tt">The TurnTaker whose last Phase will be returned.</param>
            <returns>The Phase of the last TurnPhase that the provided TurnTaker has.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShuffleCardIntoLocation(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Shuffles the provided Card into the provided Location.
            </summary>
            <param name="decisionMaker">If the shuffle is optional, this is the DecisionMaker that decides whether or not the Card will be shuffled into the Location.</param>
            <param name="card">The Card that will be shuffled into the Location.</param>
            <param name="location">The Location into which the Card will be shuffled.</param>
            <param name="optional">Whether or not it is optional for the Card to be shuffled into the Location.</param>
            <param name="toBottom">If true, the Card will be placed on the bottom of the Location before it is shuffled. Otherwise it will be placed on top.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ShuffleCardsIntoLocation(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.Card},Handelabra.Sentinels.Engine.Model.Location,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Shuffles the provided Cards into the provided Location.
            </summary>
            <param name="decisionMaker">If the shuffle is optional, this is the DecisionMaker that decides whether or not the Cards will be shuffled into the Location.</param>
            <param name="cards">The Cards that will be shuffled into the Location.</param>
            <param name="location">The Location into which the Card will be shuffled.</param>
            <param name="individualMoves">If true, all Cards will create a MoveCardAction to the Location individually, rather than a BulkMoveCardAction.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ExpireStatusEffect(Handelabra.Sentinels.Engine.Model.StatusEffect,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The provided StatusEffect expires and no longer takes effect.
            </summary>
            <param name="effect">The StatusEffect that is expiring.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.HowManyTimesIsDamagePrevented(Handelabra.Sentinels.Engine.Controller.DamageSource)">
            <summary>
            Returns a count of the number of times that attempted damage from the provided DamageSource would be prevented. 
            If damage will not be prevented, will return 0.
            If the damage would always be prevented, will return null instead.
            </summary>
            <param name="source">The DamageSource that will count the number of times its damage would be prevented</param>
            <returns>A count of the number of times that attempted damage from the provided DamageSource would be prevented. </returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AskCardControllersIfIsVillainTarget(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks CardControllers whether or not the provided Card is considered to be a Villain Target.
            </summary>
            <param name="card">The Card that may or may not be considered a Villain Target.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AskCardControllersIfIsVillain(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks CardControllers whether or not the provided Card is considered to be a Villain.
            </summary>
            <param name="card">The Card that may or may not be considered a Villain.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.AskCardControllersIfIsVillain(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Asks CardControllers whether or not the provided TurnTaker is considered to be a Villain.
            </summary>
            <param name="tt">The TurnTaker that may or may not be considered a Villain.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsInCardControllerList(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Controller.CardControllerListType)">
            <summary>
            Returns whether or not the provided Card is in the provided CardControllerListType, which determines whether or not it will have its associated "Ask()" methods called.
            </summary>
            <param name="card">The Card that may or may not be in the CardControllerListType list.</param>
            <param name="type">The CardControllerListType of the list that the Card may be in.</param>
            <returns>Whether or not the provided Card is in the provided CardControllerListType, which determines whether or not it will have its associated "Ask()" methods called.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsEquipment(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card is considered to be an Equipment Card.
            </summary>
            <param name="card">The Card that may or may not be an Equipment Card.</param>
            <returns>Whether or not the provided Card is considered to be an Equipment Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsMechanicalGolem(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the provided Card is considered to be a Mechanical Golem Card.
            </summary>
            <param name="card">The Card that may or may not be a Mechanical Golem Card.</param>
            <returns>Whether or not the provided Card is considered to be a Mechanical Golem Card.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ChooseNextPhase(Handelabra.Sentinels.Engine.Controller.PhaseChangeAction,Handelabra.Sentinels.Engine.Model.ChoosePhaseOrderStatusEffect,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The HeroTurnTaker whose turn is being entered (ToPhase) in a PhaseChangeAction chooses the order of Phases of their next turn.
            </summary>
            <param name="p">The PhaseChangeAction where the ToPhase belongs to the HeroTurnTaker whose turn is being entered.</param>
            <param name="effect">If the cause of choosing TurnPhases is from a ChoosePhaseOrderStatusEffect, this is that source ChoosePhaseOrderStatusEffect. It will expire immediately.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetUnenteredCoreTurnPhasesForHeroThisTurn(Handelabra.Sentinels.Engine.Model.HeroTurnTaker)">
            <summary>
            Returns all core (Play, Power, Draw) TurnPhases that the provided HeroTurnTaker has not yet entered this turn.
            </summary>
            <param name="hero">The HeroTurnTaker whose unentered TurnPhases will be returned.</param>
            <returns>All core (Play, Power, Draw) TurnPhases that the provided HeroTurnTaker has not yet entered this turn.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetNextTurnPhaseIfChoosable(Handelabra.Sentinels.Engine.Model.HeroTurnTaker,Handelabra.Sentinels.Engine.Model.TurnPhase,Handelabra.Sentinels.Engine.Model.TurnPhase,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns the next TurnPhase in a situation where the TurnPhase order is choosable.
            Returns null if the next TurnPhase will not be any different than its default order.
            </summary>
            <param name="hero">The HeroTurnTaker who is choosing the order of their TurnPhases.</param>
            <param name="fromPhase">The TurnPhase from which the HeroTurnTaker is exiting.</param>
            <param name="toPhase">The TurnPhase to which the HeroTurnTaker would be entering under normal circumstances.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The next TurnPhase in a situation where the TurnPhase order is choosable. Null if the next TurnPhase will not be any different than its default order.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetBattleZones">
            <summary>
            Returns all BattleZones in the Game.
            </summary>
            <returns>All BattleZones in the Game.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetBattleZone(System.String)">
            <summary>
            Returns the BattleZone that matches the provided identifier.
            </summary>
            <param name="identifier">The identifier of the BattleZone to return.</param>
            <returns>The BattleZone that matches the provided identifier.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetOtherBattleZone(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns the opposite BattleZone of the provided TurnTaker.
            </summary>
            <param name="tt">The TurnTaker whose opposite BattleZone will be returned.</param>
            <returns>The opposite BattleZone of the provided TurnTaker.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SwitchBattleZone(Handelabra.Sentinels.Engine.Controller.TurnTakerController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Switches the BattleZone of the provided TurnTakerController from their current one to the other one.
            </summary>
            <param name="ttc">The TurnTakerController who will switch BattleZones.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RunAfterEndOfTurn">
            <summary>
            Runs the "After End of Turn" phase. This should only be used in OblivAeon Mode.
            This is not called by individual CardControllers.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.DoesCardPreventSelectionOfCharacter(System.String,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            When selecting a Card from the box, returns whether or not the provided Card prevents another Card with the provided identifier to be prevented from being selected.
            </summary>
            <param name="identifier">The identifier of the Card to be selected from the box, which may be prevented.</param>
            <param name="card">The Card that may prevent the Card with matching "identifier" from being selected.</param>
            <returns>Whether or not the provided Card prevents another Card with the provided identifier to be prevented from being selected.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RunBeforeStartOfTurn(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            Runs the "Before Start of Turn" phase. This should only be used in OblivAeon Mode.
            This is not called by individual CardControllers.
            </summary>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.TakeAnObjective(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            The provided HeroTurnTakerController takes an Objective Card from the Mission Deck.
            </summary>
            <param name="httc">The HeroTurnTakerController that takes an Objective Card from the Mission Deck.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SwapOutAnObjective(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            Swaps the Objective Card that the provided HeroTurnTakerController currently has with a new Objective Card.
            </summary>
            <param name="httc">The HeroTurnTakerController that is swapping their Objective Cards.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.TradeAnObjective(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            The provided HeroTurnTakerController trades an Objective Card with another HeroTurnTakerController.
            </summary>
            <param name="httc">The HeroTurnTakerController that is trading an Objective Card with another HeroTurnTakerController.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectIncapacitatedHeroAndUseAbility(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            The provided HeroTurnTakerController selects another incapacitated HeroTurnTakerController and uses one of their incapacitated abilities.
            Used in OblivAeon mode.
            </summary>
            <param name="httc">The HeroTurnTakerController that uses another HeroTurnTakerController's incapacitated ability.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectAndRegainReward(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController)">
            <summary>
            The provided HeroTurnTakerController selects a Reward Card to gain from another incapacitate HeroTurnTakerController in their PlayArea.
            Used in OblivAeon mode.
            </summary>
            <param name="httc">The HeroTurnTakerController that selects and regains a Reward Card.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectADeck(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectLocationDecision},System.Boolean,System.String,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects the Deck of a TurnTaker, which is stored for future use.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects a Deck.</param>
            <param name="type">The SelectionType of the SelectLocationDecision that is presented.</param>
            <param name="deckCriteria">The criteria for the Deck Locations that can be selected.</param>
            <param name="storedResults">Stores all SelectLocationDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a Deck is optional.</param>
            <param name="noValidLocationsMessage">If not null, a custom message to display if there are no matching Decks to select from.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectATrash(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Boolean},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectLocationDecision},System.Boolean,System.String,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            The DecisionMaker selects the Trash of a TurnTaker, which is stored for future use.
            </summary>
            <param name="decisionMaker">The DecisionMaker that selects a Trash.</param>
            <param name="type">The SelectionType of the SelectLocationDecision that is presented.</param>
            <param name="trashCriteria">The criteria for the Trash Locations that can be selected.</param>
            <param name="storedResults">Stores all SelectLocationDecisions that result from the call to this method.</param>
            <param name="optional">Whether or not selecting a Trash is optional.</param>
            <param name="noValidLocationsMessage">If not null, a custom message to display if there are no matching Trashes to select from.</param>
            <param name="useOwnerName">Whether or not to display the name of the TurnTaker that owns the Trash (Example: "Unity"), rather than the "friendly" name for the Trash (Example: "Unity's Trash").</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectLocationAndDoAction(Handelabra.Sentinels.Engine.Controller.SelectLocationDecision,System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Collections.IEnumerator})">
            <summary>
            A Location is selected using the provided SelectLocationDecision, followed by a method that is executed with the selected Location as its sole parameter.
            </summary>
            <param name="selectLocation">The SelectLocationDecision that will be made.</param>
            <param name="actionWithLocation">The method to be executed based on the Location selected.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.SelectLocationsAndDoAction(Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController,Handelabra.Sentinels.Engine.Controller.SelectionType,System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Location,System.Collections.IEnumerator},System.Collections.Generic.List{Handelabra.Sentinels.Engine.Controller.SelectLocationDecision},System.Nullable{System.Int32},System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Multiple Locations are selected by the DecisionMaker, followed by a method that is executed for each selected Location.
            </summary>
            <param name="heroTurnTakerController">The DecisionMaker that selects the Locations.</param>
            <param name="selectionType">The SelectionType of the SelectLocationDecisions created by the call to this method.</param>
            <param name="locationCriteria">The criteria of Locations that can be selected.</param>
            <param name="actionWithLocation">The method that is executed on each Location selected.</param>
            <param name="storedResults">Stores all SelectLocationDecisions that result from the call to this method.</param>
            <param name="requiredDecisions">The minimum number of Decisions that are not optional, after which the Decisions become optional.</param>
            <param name="isOptional">Whether or not the Decisions are optional.</param>
            <param name="cardSource">The CardSource of the CardController that is calling this method.</param>
            <returns>The coroutine to be executed.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsCardLocationVisibleToSource(Handelabra.Sentinels.Engine.Controller.CardController,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the Location of the provided CardController is visible to the CardSource.
            Used for OblivAeon mode to see if OblivAeon's sub-decks (i.e. Aeon Men Deck/Scion Deck) are visible to the CardSource performing an action.
            </summary>
            <param name="cardController">The CardController whose Location may or may not be visible to the CardSource.</param>
            <param name="cardSource">The CardSource to which the CardController's Location may or may not be visible.</param>
            <returns>Whether or not the Location of the provided CardController is visible to the CardSource.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.IsLocationVisibleToSource(Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Returns whether or not the provided Location is visible to the CardSource.
            Used for OblivAeon mode to see if OblivAeon's sub-decks (i.e. Aeon Men Deck/Scion Deck) are visible to the CardSource performing an action.
            </summary>
            <param name="location">The Location that may or may not be visible to the CardSource.</param>
            <param name="cardSource">The CardSource to which the Location may or may not be visible.</param>
            <returns>Whether or not the provided Location is visible to the CardSource.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.ChangeCardOwnership(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Changes the Owner TurnTaker of the provided Card to the provided TurnTaker.
            </summary>
            <param name="card">The Card that will change its Owner TurnTaker.</param>
            <param name="newOwner">The new Owner TurnTaker of the Card.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RecordMoveCardJournalEntry(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Records a MoveCardJournalEntry to the Journal with all the provided parameters as its properties.
            Not called directly by CardControllers.
            </summary>
            <param name="cardSource">The Card that is creating the JournalEntry.</param>
            <param name="card">The Card that is moving.</param>
            <param name="fromLocation">The Location from which the Card is moving.</param>
            <param name="toLocation">The Location to which the Card is moving.</param>
            <param name="toBottom">Whether or not the Card moved to the bottom of the "toLocation".</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being moved.</param>
            <param name="isDiscard">Whether or not the Card moving is considered to be a Card being discarded.</param>
            <param name="cardSourcePlayIndex">The PlayIndex of the CardSource, if any.</param>
            <param name="shuffledTrashIntoDeck">Whether or not the move is because of a Trash being shuffled into a Deck.</param>
            <param name="keywords">The Keywords of the Card being moved. If null, the keywords will be added automatically based on the current situation of the Game, including those modified by other Cards.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RecordPlayCardJournalEntry(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Records a PlayCardJournalEntry to the Journal with all the provided parameters as its properties.
            Not called directly by CardControllers.
            </summary>
            <param name="card">The Card that is being played.</param>
            <param name="responsibleTurnTaker">The TurnTaker that is responsible for the Card being played.</param>
            <param name="isInitialCard">Whether or not the Card is being played as one of the initial Cards that the TurnTaker starts the Game with.</param>
            <param name="isPutIntoPlay">Whether or not the Card is being "put into play" instead of just being played.</param>
            <param name="cardSource">The Card that is causing the "card" to be played.</param>
            <param name="keywords">The Keywords of the Card being played. If null, the keywords will be added automatically based on the current situation of the Game, including those modified by other Cards.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.RecordDestroyCardJournalEntry(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,Handelabra.Sentinels.Engine.Model.DealDamageJournalEntry,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Records a DestroyCardJournalEntry to the Journal with all the provided parameters as its properties.
            Not called directly by CardControllers.
            </summary>
            <param name="cardSource">The CardSource responsible for the Card being destroyed.</param>
            <param name="card">The Card that is being destroyed.</param>
            <param name="originalLocation">The Location that the Card was at prior to being destroyed.</param>
            <param name="postDestroyLocation">The Location that the Card ends up at after being destroyed, usually its Owner TurnTaker's Trash.</param>
            <param name="wasTargetWhenDestroyed">Whether or not the Card was considered a target when it was destroyed (even if it is not one now).</param>
            <param name="dealDamageEntry">The DealDamageJournalEntry of the DealDamageAction that caused this Card to be destroyed, if any.</param>
            <param name="responsibleCard">The Card that is responsible for the Card being destroyed, if not the "cardSource".</param>
            <param name="keywords">The Keywords of the Card being destroyed. If null, the keywords will be added automatically based on the current situation of the Game, including those modified by other Cards.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.CanUsePowers(Handelabra.Sentinels.Engine.Controller.HeroCharacterCardController)">
            <summary>
            Returns whether or not the provided HeroCharacterCardController is able to use Powers.
            </summary>
            <param name="hero">The HeroCharacterCardController that may or may not be able to use powers.</param>
            <returns>Whether or not the provided HeroCharacterCardController is able to use Powers.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameController.GetNativeDeck(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns the Native Deck to the Card provided (that is, the Deck to which the Card originally belonged).
            Some cards, such as Mission Cards, are special, in that their Native Deck is the Mission Deck while they are Missions, and their Hero deck when they become rewards.
            </summary>
            <param name="card">The Card whose NativeDeck will be returned.</param>
            <returns>The Native Deck to the Card provided.</returns>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CancelAction">
            <summary>
            GameAction that cancels another GameAction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CancelAction.CancelRelatedDecisions">
            <summary>
            If the action being cancelled is a decision, this boolean determines whether or not 
            future related decisions should also be cancelled so that they don't need to all be canclled individually.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CancelAction.IsRedundant">
            <summary>
            A cancel action is redundant if the action has already been cancelled by something else.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CancelAction.IsPreventEffect">
            <summary>
            Keeps track of if this action is part of a prevention effect
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DrawCardAction">
            <summary>
            GameAction that draws a Card.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.GainHPAction">
            <summary>
            GameAction that allows a target Card to gain HP, up to its Maximum HP.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IDecision">
            <summary>
            Interface for all Decisions.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IDecision.DecisionIdentifier">
            <summary>
            Used in multiplayer to coordinate decision answering between different players.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IDecision.PendingConsequences">
            <summary>
            This property is set to true in multi-decision contexts where the view needs to wait for the consequences of a decision before proceeding.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IDecision.SequenceIndex">
            <summary>
            Indicates how first along this decision is in a sequence of decisions.
            It is set to null if it is the only decision, otherwise a positive integer to indicate its index in the sequence.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IDecision.WasCancelled">
            <summary>
            True only if the decision action was cancelled before it was presented.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IDecision.CancelRelatedDecisions">
            <summary>
            If this is set to true, then whenever "WasCancelled" is set to true, all future related deicions will also be cancelled.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.IDecision.AutoDecide">
            <summary>
            Automatically decide, if the decision allows it.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.IDecision.ChooseIndex(System.Int32)">
            <summary>
            Makes the choice at the given index.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.IDecision.Skip">
            <summary>
            Make no choice, if the decision allows it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.Trigger`1">
            <summary>
            Contains all information related to a Trigger, which reacts to specific GameActions as they occur.
            </summary>
            <typeparam name="T">The type of GameAction to which this Trigger responds.</typeparam>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Trigger`1.IsConditionalOnSimilar">
            <summary>
            Sets whether or not the action taken is conditional on other similar actions being taken.
            For example, if the card reads "Whenever this hero would be dealt 5 or more damage, reduce that damage by 3."
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Trigger`1.IgnoreBattleZone">
            <summary>
            Returns whether or not this trigger responds to both BattleZones
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Trigger`1.OrderMatters">
            <summary>
            Can be set when the trigger is made to specify if the trigger order matters or not for this trigger.
            This is used to override the default trigger mananger behaviour. 
            For example, usually a CancelAction trigger doesn't matter the order, since the action will just be cancelled.
            But between The Unbreakable and Silver Lining, the order does matter because it determines how much life will be regained and which card will be destroyed.
            </summary>
            <value>If set to a value, the trigger is specifically saying whether or not the order matters. If not set, the trigger mananger can decide.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Trigger`1.Priority">
            <summary>
            Setting the priority will allow some triggers to go before other triggers is very special situations.
            Ex. Sustained Influence and Chokepoint when a Construct is destroyed. SI goes first to determine if it comes back into play, or goes to Chokepoint's play area, flipped.
            This will ONLY take effect if two compared triggers each have a priority defined, and one is higher than the other.
            So even Priority.High will still get "mixed in" with other triggers that do not have a defined Priority.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DestroyCardAction">
            <summary>
            GameAction that destroys a Card.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DestroyCardAction.PreventMoveToTrash">
            <summary>
            Set to true to prevent the destroy action from moving the card to the trash.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DestroyCardAction.PreventRemoveTriggers">
            <summary>
            Set to true to prevent the destroy action from removing triggers on the card. You should handle that yourself if you do so.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DestroyCardAction.WasCardDestroyed">
            <summary>
            Set to true by this class if the card was actually destroyed.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DestroyCardAction.ResponsibleCard">
            <summary>
            This is the card that gets credit for having destroyed the card.
            It is usually null, but some cards (like Title: Death-Caller) will give credit to another card (for example, the card it is next to).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.DestroyCardAction.AddAfterDestroyedAction(System.Func{System.Collections.IEnumerator},Handelabra.Sentinels.Engine.Controller.CardController)">
            <summary>
            These methods are ran after the card has been fully destroyed.
            This exists because any "After" triggers applied to a DestroyCardAction actually happen before the game controller is fully finished destroying the card, as per the rules.
            Example cards: Sustained Influence, Prime Wardens Captain Cosmic.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DiscardCardAction">
            <summary>
            GameAction that discards a Card.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectCardDecision">
            <summary>
            Decision that selects a single Card from a choice of Cards.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.YesNoDecision">
            <summary>
            Decision that allows for a Yes/No answer.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.YesNoDecision.RequireUnanimous">
            <summary>
            If true, it means that the decision is intended for all players to agree to, for example, all players discarding a card.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.YesNoDecision.Index">
            <summary>
            Returns 0 if no, 1 if yes, null if not yet answered.
            </summary>
            <value>The index.</value>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.YesNoDecision.ChooseIndex(System.Int32)">
            <summary>
            0 means No, 1 means Yes
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.MoveCardDestination.FlipFaceDown">
            <summary>
            Determines if the card should just be flipped face down after it moves.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.MoveCardDestination.ShowMessage">
            <summary>
            Setting this to true allows the method that is using this MCD to know that a message showing the destination has been requested.
            Used when a card is moved to a location that can't be seen by the player (ex a hero's play area when it is not their turn).
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MoveCardDecision">
            <summary>
            Decision that selects which MoveCardDestination the given Card should move to.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MoveCardAction">
            <summary>
            GameAction that moves a Card from one Location to another.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.MoveCardAction.DoesNotEnterPlay">
            <summary>
            If this is false, a card that would cause a CardEntersPlayAction does not do so
            </summary>
            <value><c>true</c> if does not enter play; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.Bunker.ModeCardController">
            <summary>
            Superclass for Recharge, Turret, and Upgrade Mode card controllers that handles the common functionality they share.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.GameAction">
            <summary>
            A GameAction is an encapsulation of any event in the game that causes a change in game state. The model is only ever changed by GameActions (with very few exceptions).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameAction.#ctor(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Copy constructor that preserves everything including InstanceIdentifier, but excluding the action identifier.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.BattleZone">
            <summary>
            Returns the BattleZone of this action's card source
            </summary>
            <value>The battle zone.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.IsRedundant">
            <summary>
            Allows the GameAction to be probed to see if its action is redundant or not.
            For example, "ChangeDamageType" to Fire if the damage type is already fire.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.ShowOutput">
            <summary>
            This is a property that can be set to inform the view whether or not we want output for this action.
            True means "show output even if you normally don't". False means "Do not show output even if you normally do".
            Null means "do whatever you want".
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.DecisionSources">
            <summary>
            The decisions that caused this action to occur, if any.
            This is different than the card source.
            For example, if The Visionary uses "Englighten" on Legacy, then the DiscardCardAction's CardSource is 
            TheVisionaryCharacter, but its DecisionSource would be a SelectCardDecision that was presented to Legacy, not The Visionary.
            This property can be null.
            It can contain multiple decisions. For example, a MoveCardAction can have one decision that determines where the card should be moved,
            and another with which card to move.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.DecisionMaker">
            <summary>
            Gets the decision maker of the card source.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.MostRecentTriggerIndexBeforeActionOccurred">
            <summary>
            Returns the highest trigger index right before the action does its thing.
            This is only used for the TriggerManager so that any cards played after or as a result of the action won't respond to it unless desired.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.AllowTriggersToRespond">
            <summary>
            Determines whether or not triggers are allowed to respond to this action, even if it is successful. 
            Most of the time this is true, but some cases require it to be false.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.VillainCharacterIdentifiers">
            <summary>
            The identifiers of all villains that are in play when the action is created.
            Allows actions to be cancelled/prevented if the villain changes.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameAction.EvenIfPretendGameOver">
            <summary>
            Whether or not the card should be moved even if there is a pretend game over (ex changing turn takers)
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameAction.DoesFirstCardAffectSecondCard(System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean})">
            <summary>
            Asks this implementation of a GameAction if a card matching criteria "first" affects a card matching criteria "second".
            For example, "Does a hero card affect a non-hero card"?
            </summary>
            <returns>True if the first card affects the second card, false if not, and null if undefined.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.GameAction.DoesFirstTurnTakerAffectSecondTurnTaker(System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean})">
            <summary>
            Asks this implementation of a GameAction if a turn taker matching criteria "first" affects a turn taker matching criteria "second".
            For example, "Does a hero card cause a hero to draw a card?"
            </summary>
            <returns>True if the first turn taker affects the second card, false if not, and null if undefined.</returns>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PhaseChangeAction">
            <summary>
            GameAction that changes the TurnPhase from one to another.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.PhaseChangeAction.BattleZone">
            <summary>
            Gets the current battle zone of the ToPhase TurnTaker if non-null, otherwise checks GameAction property
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeDecisionAction">
            <summary>
            GameAction that presents a Decision to the player(s).
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DummyCardController">
            <summary>
            This class does nothing. You can ignore it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TriggerManager">
            <summary>
            A class that manages all Triggers in the Game.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.TriggerManager.FindCardSource(Handelabra.Sentinels.Engine.Controller.ITrigger,Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Made this its own helper method because some cards (ie Uh Yeah I'm That Guy) replace the card source temporarily.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ITrigger">
            <summary>
            Interface used for all Triggers.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ITrigger.IsConditionalOnSimilar">
            <summary>
            Sets whether or not the action taken is conditional on other similar actions being taken.
            For example, if the card reads "Whenever this hero would be dealt 5 or more damage, reduce that damage by 3."
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ITrigger.IsActionOptional">
            <summary>
            Returns whether or not the action that would result from this trigger is optional or not.
            Primiarily used by redirect triggers to reduce unnecessary "ambiguous" triggers.
            Null if undefined.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ITrigger.IgnoreBattleZone">
            <summary>
            Returns whether or not this trigger responds to both BattleZones
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ITrigger.AssociatedTriggers">
            <summary>
            These associated triggers will all be removed with the removal of this trigger
            </summary>
            <value>The associated triggers.</value>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UsePowerDecision">
            <summary>
            Decision that selects a Power from a list of Powers.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision">
            <summary>
            Decision that allows multiple Cards to be selected in a row from a choice of Cards.
            Creates individual SelectCardDecisions to achieve this.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.AllAtOnce">
            <summary>
            Tells the view whether to allow the player to make all decisions at once, or one at a time.
            Usually this will be false, but for some cards (like Visionary's "Suggestion") it is true.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.ReadyForNext">
            <summary>
            Manually set to "true" by the view when ready for the next decision.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.RequiredDecisions">
            <summary>
            If this is null, then ALL decisions are required.
            If this is set, then the first N decisions are required, and the rest are optional.
            For example, if set to 0, all decisions are optional. If set to 1, the first decision is required, the rest are optional, etc.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.Completed">
            <summary>
            The SelectCardsDecision is considered done when either it has been manually set to done through FinishedSelecting, or when the number of SelectCardDecisions has reached the "NumberOfCards" value.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.EliminateOptions">
            <summary>
            Determines whether or not the options that are available are eliminated from the choices once chosen.
            For example, eliminating target options once they've been attacked.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.NumberOfCards">
            <summary>
            If this is null, then the user can select as many (or as few) cards as they want.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.SelectCardDecisions">
            <summary>
            Get the list of SelectCardDecisions created so far.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SelectCardsDecision.GetNextSelectCardDecision(Handelabra.Sentinels.Engine.Model.BattleZone)">
            <summary>
            Access the next "SelectCardDecision" in the sequence.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.YesNoAmountDecision">
            <summary>
            Decision that allows for a Yes/No answer, including a relevant amount, such as the number of Cards involved.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.YesNoAmountDecision.UpTo">
            <summary>
            If true, it means that the decision takes affect on "up to" the amount, rather than the exact amount.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.YesNoCardDecision">
            <summary>
            Decision that allows for a Yes/No answer, including a relevant Card.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectDamageTypeDecision">
            <summary>
            Decision that selects a DamageType from a choice of DamageTypes.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.RevealCardsAction">
            <summary>
            GameAction that reveals Cards at a Location.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CharacterCardController">
            <summary>
            A Character card controller is the superclass of all character card controllers and supports flipping.
            Subclasses of this should call base on AddTriggers() if overriding it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.Power">
            <summary>
            Contains information related to a Power that can be used.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Power.IsContributionFromCardSource">
            <summary>
            Returns true if the power is contributed by another card, rather than on the card itself.
            Ex. Plague Rat's flipped side powers or Captain Cosmic's Cosmic Weapon.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Power.IsInnatePower">
            <summary>
            Returns whether or not this power is its user's innate power.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.Power.HeroCharacterCardUsingPower">
            <summary>
            The actual HeroCharacterCardController that is using the Power.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncapacitatedAbility">
            <summary>
            Contains information related to a hero's incapacitated ability that can be used.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UseIncapacitatedAbilityDecision">
            <summary>
            Decision that selects an IncapacitatedAbility from a list of IncapacitatedAbilitys.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncreasePhaseActionCountAction">
            <summary>
            GameAction that increases the current TurnPhase's PhaseActionCount, which is the number of times the TurnPhase is allowed to perform its primary action.
            Example: The number of Cards that can be played during the PlayCard TurnPhase.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SetPhaseActionCountAction">
            <summary>
            Sets the a TurnPhase's PhaseActionCount, which is the number of times the TurnPhase is allowed to perform its primary action.
            Example: The number of Cards that can be played during the PlayCard TurnPhase.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SetPhaseActionCountAction.IsRedundant">
            <summary>
            The action is redundant if it is strying to set the amount to the amount it already is.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.FlipCardAction">
            <summary>
            GameAction thta flips a Card to its other side.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectTurnTakerDecision">
            <summary>
            Decision that selects a TurnTaker from a list of TurnTakers.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.RemoveTargetAction">
            <summary>
            GameAction that turns a target Card into a non-target Card by removing its HP and Maximum HP.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PreventPhaseAction">
            <summary>
            GameAction that prevents the regular phase action of a TurnPhase from occurring.
            Example: Prevents Cards from being played during the PlayCard phase.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeDecisionsAction">
            <summary>
            GameAction that presents multiple Decisions to the player(s) at the same time.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.GameOverAction">
            <summary>
            GameAction that ends the game, whether in Victory or Defeat.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.GameOverAction.ActionSource">
            <summary>
            The last action that caused the game over to occur. It is usually a DestroyCardAction, but could be something else, or null.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.Function">
            <summary>
            A single choice in a SelectFunctionDecision, which includes its displayed text, a SelectionType, and the Func to execute.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision">
            <summary>
            Decision that selects a Function from a list of possible Functions.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SelectFunctionDecision.ChooseIndex(System.Int32)">
            <summary>
            Makes the choice at the given index.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectTargetDecision">
            <summary>
            Decision that selects a target Card from a choice of Cards.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTargetDecision.DynamicNumberOfTimes">
            <summary>
            Indicates the number of times that the target will be dealt damage, based on the target.
            For example, "Technological Singularity" deals X instances of 2 damage, where X is the amount of equipment cards destroyed owned by that target.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTargetDecision.FollowUpDamageInformation">
            <summary>
            Should be provided if the target that will be selected will be dealt more than 1 instance of damage,
            for example Fanatic's innate power or Explosives Wagon.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTargetDecision.DynamicFollowUpDamageInformation">
            <summary>
            Should be provided if the target that may be selected will be dealt more than 1 instance of damage,
            depending on which target is selected. An example of this is Supersonic Response.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectTargetsDecision">
            <summary>
            Decision that allows multiple target Cards to be selected in a row from a choice of target Cards.
            Creates individual SelectTargetDecisions to achieve this.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision">
            <summary>
            Decision that selects multiple TurnTakers from a list of TurnTakers.
            Creates individual SelectTurnTakerDecisions to achieve this.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.RequiredDecisions">
            <summary>
            If this is set, then the first OptionalAfter decisions are mandatory and the rest are optional.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.ReadyForNext">
            <summary>
            Manually set to "true" by the view when ready for the next decision.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.Completed">
            <summary>
            The SelectTurnTakersDecision is considered done when either it has been manually set to done through FinishedSelecting, or when the number of SelectCardDecisions has reached the "NumberOfCards" value.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.EliminateOptions">
            <summary>
            Determines whether or not the options that are available are eliminated from the choices once chosen.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.NumberOfTurnTakers">
            <summary>
            If this is null, then the user can select as many (or as few) turn takers as they want.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.NumberOfCards">
            <summary>
            If this is null, assume it's not applicable or 1.
            </summary>
            <value>The number of cards for the decisions involved.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelectTurnTakersDecision.SelectCardDecisions">
            <summary>
            Get the list of SelectCardDecisions created so far.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ChangeMaximumHPAction">
            <summary>
            GameAction that changes the Maximum HP that a target Card has.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncreaseHPGainAction">
            <summary>
            GameAction that increases the amount of HP of a GainHPAction. 
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DealDamageAction">
            <summary>
            GameAction which deals damage from one DamageSource to a a target Card, including all information necessary.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DealDamageAction.AllTargets">
            <summary>
            Returns a list of all targets that were or are, at one point, a target for this deal damage action.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DealDamageAction.Target">
            <summary>
            The current target.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DealDamageAction.IsResolved">
            <summary>
            Set to true once "DoActionOnSuccess" has completed or is cancelled.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ChangeDamageTypeAction">
            <summary>
            GameAction that changes the DamageType of a DealDamageAction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ChangeDamageTypeAction.IsRedundant">
            <summary>
            Changing the damage type is redundant if it is already that damage type.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ImmuneToDamageAction">
            <summary>
            GameAction that makes the target Card of a DealDamageAction immune to damage.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeDamageIrreducibleAction">
            <summary>
            GameAction that makes the damage irreducible for a DealDamageAction.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncreaseDamageAction">
            <summary>
            GameAction that increases the amount of damage dealt in a DealDamageAction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IncreaseDamageAction.IsNemesisEffect">
            <summary>
            True only if the reason for this action's existence is because of the "Nemesis" rule.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IncreaseDamageAction.IsRedundant">
            <summary>
            An increase is redundant if the amount to increase is 0.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ReduceDamageAction">
            <summary>
            GameAction that reduces the amount of damage for a DealDamageACtion.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReduceDamageAction.IsRedundant">
            <summary>
            A reduce is redundant if the amount to reduce is 0.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReduceDamageAction.TriggerSource">
            <summary>
            Returns the trigger whose criteria was met in order to allow this action to occur.
            Used very rarely, but important for cards like "Title: The Seeker".
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.RedirectDamageAction">
            <summary>
            GameAction that redirects the damage to a new target for a DealDamageAction.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ModifyDealDamageAction">
            <summary>
            Superclass used for GameActions which modify DealDamageActions.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CardSource">
            <summary>
            Contains all the information related to which Card is causing an event to occur.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardSource.SourceLimitation">
            <summary>
            This provides a limitation on when this card can be considered an "associated" card.
            It is very rarely used, and is only here for special cases with Uh, Yeah, I'm That Guy.
            Ex. Heroic Interception + I'm That Guy = I'm That Guy copies Heroic and Guise deals himself 3 damage.
            BUT the triggers on Heroic interrupt that damage and make him immune. Without this limitation, it can't tell that
            during Play(), this.CharacterCard is Guise, but for the TRIGGER, this.CharacterCard is Legacy ("all hero targets except for Legacy")
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardSource.AllowReplacements">
            <summary>
            Shortcut to return whether or not this card source has the "NoReplacements" SourceLimitation active.
            Not used very often, but by some cards, such as when "Lemme See That" uses an instrument to allow AA to use his own insturment, we don't want that instrument to make replacements.
            </summary> 
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardSource.DecisionSources">
            <summary>
            Whenever a card source is responsible for a decision, that decision is added to the card source for reference.
            They are in order, so the last decision source is the most recent one.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardSource.ActionSources">
            <summary>
            Any actions responsible for the action this card source will perform.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CardSource.GameAction">
            <summary>
            Stores the action that this CardSource is responsible for
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CardSource.FindMostRecentDecisionMaker">
            <summary>
            Finds out who made the most recent decision related to this card source, if anyone.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectNumberDecision">
            <summary>
            Decision that selects a number from a list of numbers.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SelectNumberDecision.ChooseIndex(System.Int32)">
            <summary>
            Makes the choice at the given index.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ImmediatelyEndTurnAction">
            <summary>
            GameAction that immediately ends the current turn, regardless of where it currently is.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ReducePhaseActionCountAction">
            <summary>
            GameAction that reduces a TurnPhase's PhaseActionCount, which is the number of times the TurnPhase is allowed to perform its primary action.
            Example: The number of Cards that can be played during the PlayCard TurnPhase.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SetHPAction">
            <summary>
            GameAction that sets the HP of a target Card to a specific value.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DamagePreviewResult">
            <summary>
            Class that contains an information related to a single step when creating the Damage Preview in-game.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.DamagePreviewResult.IsTransientRedirect(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Determines if the action is part of a transient redirect, meaning that it is either a redirect or part of the same card that has a redirect.
            This is to isolate the cases in which a modifier will take effect after the redirect, but won't be reapplied.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PlayerPolicies">
            <summary>
            A class that keeps track of various preferences the player has set relating to automatic actions in the game.
            Example: Automatically drawing Cards.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MessageAction">
            <summary>
            GameAction that sends a Message to the player(s), displayed on-screen.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.StatusEffectMessageAction">
            <summary>
            MessageAction that also includes information about a StatusEffect.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.PromoCardUnlockController.FindHeroPosition(System.String)">
            <summary>
            Returns which position the provided hero is in, from 1 to 5.
            For example, the first hero is 1, the second is 2, etc.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UnlockPromoCardAction">
            <summary>
            GameAction that unlocks a Variant Card.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectLocationDecision">
            <summary>
            Decisions that selects a LocationChoice from a list of LocationChoices.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncreasePowerNumberOfUsesAction">
            <summary>
            GameAction that increasese the number of times the provided Power can be used.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SpecialString">
            <summary>
            A class that contains SpecialString information to be displayed with a Card or in the Effects List.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SpecialStringMaker">
            <summary>
            Class that allows SpecialStrings to be made to a standardized format.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SpecialStringMaker.ShowIfLimitedAndInPlay">
            <summary>
            Show a message if the card is limited, not in play, and a copy of it already is in play.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SpecialStringMaker.ShowTokenPool(Handelabra.Sentinels.Engine.Model.TokenPool,Handelabra.Sentinels.Engine.Controller.CardController,System.String)">
            <summary>
            Shows the token pool.
            </summary>
            <returns>The token pool.</returns>
            <param name="pool">Pool.</param>
            <param name="source">Source.</param>
            <param name="format">Format string with 4 parameters: "is/are", pool value, "token/tokens", name of pool. </param>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.LinqCardCriteria">
            <summary>
            A class that contains information when providing criteria for Cards.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.LinqDamageTypeCriteria">
            <summary>
            A class that contains information when providing criteria for DamageTypes.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TargetInfo">
            <summary>
            A class that contains information on an intended Target, but not a specific target Card.
            Example: The hero with the lowest HP.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ActivatableAbility">
            <summary>
            Contains all information related to an Ability text that is usable by a hero.
            Example: The Argent Adept's "Perform" and "Accompany" text his Cards.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ActivateAbilityDecision">
            <summary>
            Decision that allows players to decide which Ability to activate.
            Example: The Argent Adept's "Perform" and "Accompany" text.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeTargetAction">
            <summary>
            GameAction that turns the provided Card into a target.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DecisionBase">
            <summary>
            Base class for all Decision classes.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DecisionBase.SequenceIndex">
            <summary>
            Indicates how first along this decision is in a sequence of decisions.
            It is set to null if it is the only decision, otherwise a positive integer to indicate its index in the sequence.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DecisionBase.Index">
            <summary>
            Returns the selected choice as a number value representing its index in the choices rather than the item itself.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DecisionBase.CancelRelatedDecisions">
            <summary>
            If this is set to true, then whenever "WasCancelled" is set to true, all future related deicions will also be cancelled.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.DecisionBase.AutoDecide">
            <summary>
            Automatically decide, if the decision allows it.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.DecisionBase.ChooseIndex(System.Int32)">
            <summary>
            Makes the choice at the given index.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.DecisionBase.Skip">
            <summary>
            Make no choice, if the decision allows it.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.DecisionBase.ExtraInfo">
            <summary>
            If not null, this string will be shown in association with the decision.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.AchievementManager.LoadAchievementControllers(System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.Achievements.Achievement},System.Boolean)">
            <summary>
            Loads all achievements that have a controller matching the list of identifiers provided.
            If the achievement is achievable this game, it will be checked for.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.AchievementManager.CheckForAchievements(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Checks all achievement controllers to see if any of them have just been unlocked by the most recent action.
            </summary>
            <returns>A list of any achievements that have just been unlocked.</returns>
            <param name="gameAction">The most recent game action.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.IncrementalAchievementController.CheckForIncrement(Handelabra.Sentinels.Engine.Controller.GameAction)">
            <summary>
            Checks for increment and returns the new total progress (from 0.0 to 100.0)
            Returns null if the check did not change the progress.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.IncrementalAchievementController.GetProgress">
            <summary>
            Get the current progress based on persistent storage. Defaults to getting a single double based on the achievement identifier.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.IncrementalAchievementController.SetProgress(System.Double)">
            <summary>
            Saves the current progress to persistent storage. Defaults to using a single double based on the achievement identifier.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.Achievements.IncrementalAchievementController.ClearProgress">
            <summary>
            Clears the progress from persistent storage.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UnlockAchievementAction">
            <summary>
            GameAction that unlocks an achievement.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncrementAchievementAction">
            <summary>
            GameAction that increments a value keeping track of achievement progress.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ChangeDamageTypeTrigger">
            <summary>
            Special Trigger to be used for changing DamageTypes.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ChangeDamageTypeTrigger.IsDecisionBetweenTypes">
            <summary>
            Returns whether this is a decision between decision types, or just one type.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.ChangeDamageTypeTrigger.#ctor(Handelabra.Sentinels.Engine.Controller.GameController,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.TriggerType},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.DamageType},Handelabra.Sentinels.Engine.Controller.CardSource,System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Controller.ActionDescription},System.Boolean,System.Boolean)">
            <summary>
            Creates a trigger that is specific to changing damage types.
            </summary>
            <param name="possibleDamageTypes">Possible damage types that this trigger can allow. Set to NULL for all damage types.</param>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PreMadeDecision`1">
            <summary>
            Special class used for game-replaying purposes. Not for general use.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.LinqTurnTakerCriteria">
            <summary>
            A class that contains information when providing criteria for TurnTakers.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ReduceHPGainAction">
            <summary>
            GameAction that reduces the amount of HP that the given GainHPAction provides.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.StatusEffectController">
            <summary>
            Class that acts as the Controller side of a StatusEffect.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.StatusEffectManager">
            <summary>
            A class that manages all the StatusEffects in the Game.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.StatusEffectManager.ReplaceStatusEffectReferences(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Finds any status effects which refer to Card A as part of their criteria, and update them to apply instead to Card B.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.StatusEffectManager.ReplaceStatusEffectReferences(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Finds any status effects which refer to TurnTaker A as part of their criteria, and update them to apply instead to TurnTaker B.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SwitchCardsAction">
            <summary>
            GameAction that switches one Card for another Card, taking its place.
            The new Card has the same HP, Cards next to it, Cards under it, etc as the old Card.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.AddTokensToPoolAction">
            <summary>
            GameAction that adds tokens to a TokenPool.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MoveTokensFromPoolToPoolAction">
            <summary>
            GameAction that moves Tokens from one TokenPool to another.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ModifyTokensAction">
            <summary>
            Superclass for GameActions that modify TokenPools.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.GiveHighFiveAction">
            <summary>
            This action allows one HeroTurnTakerController to give a high five to another!
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeDamageNotRedirectableAction">
            <summary>
            GameAction that makes the damage not redirectable for a DealDamageAction.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PlayAirGuitarAction">
            <summary>
            This action allows one HeroTurnTakerController to play air guitar!
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PhaseChangeTrigger">
            <summary>
            Special Trigger to be used for anything that reacts when the Game moves into a specific TurnPhase.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.PhaseChangeTrigger.#ctor(Handelabra.Sentinels.Engine.Controller.GameController,System.Func{Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Phase,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.PhaseChangeAction,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.PhaseChangeAction,System.Collections.IEnumerator},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.TriggerType},Handelabra.Sentinels.Engine.Controller.TriggerTiming,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Creates a trigger that reacts when entering a new phase, specified by the Phase and all additional criteria.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.PhaseChangeTrigger.AddAdditionalCriteria(System.Func{Handelabra.Sentinels.Engine.Controller.PhaseChangeAction,System.Boolean})">
            <summary>
            This is used to provide additional criteria required for the base turn taker and phase conditions.
            For example, it can turn "p => p.ToPhase.IsEnd" to "p => p.ToPhase.IsEnd &amp;&amp; p.ToPhase.IsVillain".
            This is mainly used for cards that modify start/end of turn actions, like Subzero Atmosphere or Overcharged Systems.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.PhaseChangeTrigger.AddAlternativeCriteria(System.Func{Handelabra.Sentinels.Engine.Controller.PhaseChangeAction,System.Boolean})">
            <summary>
            This is used to provide alternative criteria required for the base turn taker and phase conditions.
            For example, it can turn "p => p.ToPhase.IsEnd &amp;&amp; p.ToPhase.IsVillain" to "p => (p.ToPhase.IsEnd &amp;&amp; p.ToPhase.IsVillain) || (p.ToPhase.IsStart &amp;&amp; p.ToPhase.IsHero)".
            This is mainly used for cards that modify start/end of turn actions, like Subzero Atmosphere or Overcharged Systems.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectWordDecision">
            <summary>
            Decision that selects a Word from a list of Word choices.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ShuffleCardsAction">
            <summary>
            GameActin that shuffles the Cards at the provided Location.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ShuffleTrashIntoDeckAction">
            <summary>
            GameAction that shuffles the provided TurnTakerController's Trash into their Deck.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ShuffleCardsInPlayAreaAction">
            <summary>
            GameAction that shuffles the cards in a given TurnTakerController's PlayArea.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.RemoveTokensFromPoolAction">
            <summary>
            GameAction that removes Tokens from a TokenPool.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.DoneRoundOfDamageAction">
            <summary>
            GameAction which allows the engine to know that it has completed a round of damage.
            Used primarily for Triggers which should not execute until all intended damage has completed.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ReduceDamageTrigger">
            <summary>
            Special Trigger to be used for reducing damage.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReduceDamageTrigger.OncePerTurn">
            <summary>
            Indicates if this reduction only takes effect once per turn so that it goes after other damage reduction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReduceDamageTrigger.OneTimeUse">
            <summary>
            Indicates if this reduction only takes effect once, and then is used up.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.ReduceDamageTrigger.#ctor(Handelabra.Sentinels.Engine.Controller.GameController,System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Model.Card,System.Boolean},System.Func{Handelabra.Sentinels.Engine.Controller.DealDamageAction,System.Collections.IEnumerator},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Controller.CardSource)">
            <summary>
            Creates a trigger that is specific to reducing damage.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction">
            <summary>
            GameAction that turns an incapacitated hero into an unincapacitated hero, and restores its HP to the provided amount.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction.HeroCharacterCard">
            <summary>
            Which hero character card to unincapacitate.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction.SetToHitPoints">
            <summary>
            Determines how many hit points to set the hero to once unincapacitated.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction.PutCardsInHand">
            <summary>
            Determines how many cards to put in the hero's hand once they are unincapacitated. These are not card draws.
            Null means no cards are moved to their hand.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction.MaximumHitPoints">
            <summary>
            Sets the maximum HP for the unincapacited hero, in case different from their usual max.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.UnincapacitateHeroAction.ForceNormalBehavior">
            <summary>
            This action has special behavior in modes like OblivAeon where heroes cannot be unincapacited normally
            This field forces this action's behavior to be normal in those situations
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelfDestructTrigger">
            <summary>
            Special Trigger for Cards that react to their own destruction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SelfDestructTrigger.HasResolved">
            <summary>
            This is set to true once this trigger has had a chance to resolve its on-destroy effects so we know we can safely get rid of it.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.SelfDestructTrigger.#ctor(Handelabra.Sentinels.Engine.Controller.GameController,System.Func{Handelabra.Sentinels.Engine.Controller.DestroyCardAction,System.Collections.IEnumerator},System.Collections.Generic.IEnumerable{Handelabra.Sentinels.Engine.Model.TriggerType},Handelabra.Sentinels.Engine.Controller.CardSource,System.Func{Handelabra.Sentinels.Engine.Controller.DestroyCardAction,System.Boolean},System.Nullable{Handelabra.Sentinels.Engine.Controller.TriggerPriority})">
            <summary>
            A special kind of trigger for cards that react to their own destruction. 
            This was created because sometimes a card needs a chance to respond to itself being destroyed, but has already left play by another on-destroy event.
            Ex. Chokepoint moving the card to her play area and flipping it face-down.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.AddStatusEffectAction">
            <summary>
            GameAction that adds a StatusEffect to the Game.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TurnTakerController">
            <summary>
            The TurnTakerController, which is created to represent each TurnTaker in the Game.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TurnTakerControllerFactory">
            <summary>
            Factory that creates TurnTakerControllers of the appropriate configuation.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController">
            <summary>
            Special TurnTakerController specifically created for each HeroTurnTaker in the Game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController.IncapacitationCardController">
            <summary>
            Returns the card for the given hero that has their incapacitated abilities on it.
            99% of the time, this is their character card, but it could be a different card (ex. The Sentinels Instructions card)
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.HeroTurnTakerController.PutInHand(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Puts a card in hand - used for debugging.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CharacterCardWithIncapacitationController">
            <summary>
            A superclass for all CharacterCardControllers that also can be incapacitated.
            Used for HeroCharacterCardControllers and VillainTeamCharacterCardControllers.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.IncreaseDamageTrigger">
            <summary>
            Special Trigger to be used for increasing damage.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IncreaseDamageTrigger.IsNemesisEffect">
            <summary>
            Returns whether or not this increase is because of the nemesis rule.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.IncreaseDamageTrigger.NemesisCard">
            <summary>
            If this trigger is for a nemesis effect, return the card that it is applied to.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.TheSentinels.TheSentinelsTurnTakerController.IncapacitationCardController">
            <summary>
            The Sentinels have an instruction card for their incap abilities.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.TheSentinels.TheSentinelsTurnTakerController.CharacterCard">
            <summary>
            If the player tries to get The Sentinels "CharacterCard", show a warning, as it is null.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.TheNaturalist.CorneredBeastCardController.CurrentlyActiveDamageIncreaseKeys">
            <summary>
            This is used to differentiate between this card and cards that are copying it
            This is also used to avoid storing a model property during preview
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.PlayCardAction">
            <summary>
            GameAction that plays a Card or puts it into play.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.PlayCardAction.Origin">
            <summary>
            The location that the card was at before it was played.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.PlayCardAction.FromBottom">
            <summary>
            Simply returns a read-only value indicating if the card was played from the bottom of a location.
            Only important for very few cards (ex Shinobi Assassin).
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CardEntersPlayAction">
            <summary>
            GameAction that occurs when a Card enters play, allowing other Cards to Trigger off of it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ActivateAbilityAction">
            <summary>
            GameAction that activates an "ActivatableAbility" on a Card.
            Example: The Argent Adept's "Perform" and "Accompany" text his Cards.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.BulkMakeTargetsAction">
            <summary>
            This action sets the MaximumHitPoints and HitPoints to not null for all provided cards, making them targets.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.BulkMoveCardsAction">
            <summary>
            GameAction that moves a collection of Cards all at once. Used whenever individual Card movements would be cumbersome and unncessary.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.BulkRemoveTargetsAction">
            <summary>
            This action removes the targetness from the Cards provided, and removes the target from play (if it is in play).
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.BulkRemoveTargetsAction.RemoveCardFromBulkProcess(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Removes a card from the CardsToRemoveTargets list.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TargetEntersPlayAction">
            <summary>
            GameAction that occurs when a target Card enters play, allowing other Cards to Trigger off of it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UseIncapacitatedAbilityAction">
            <summary>
            GameAction that uses the incapaciated ability on a HeroTurnTakerController.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.UsePowerAction">
            <summary>
            GameAction that uses a Power on a Card that has Powers.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CompletedCardPlayAction">
            <summary>
            GameAction that is sent out once a card has been played, has already entered play, AND has completed all its "Play()" actions.
            Used for special situations in which a Trigger should occur after everything else has resolved.
            Example: Shinobi Assassin playing the top card of the deck it came from.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.TargetLeavesPlayAction">
            <summary>
            GameAction that occurs when a target Card leaves play, allowing other Cards to Trigger off of it.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SetNemesisIdentifiersAction">
            <summary>
            GameAction that sets the NemesisIdentifiers of a Card.
            Example: Greazer or BugBear setting their nemesis.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction">
            <summary>
            GameAction that replaces one TurnTaker with another.
            Example: Spite: Agent of Gloom becoming Gloomweaver: Skin Walker
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.OldTurnTaker">
            <summary>
            The old turn taker, which is replaced by this action.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.NewTurnTaker">
            <summary>
            The new turn taker. Will be null until the action has run.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.NewTurnTakerIdentifier">
            <summary>
            The identifier of the intended new turn taker.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.NewTurnTakerPromoIdentifier">
            <summary>
            The identifier of the new turn taker's promo to use, if any.
            Can be null.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.KeepTurnTakerController">
            <summary>
            Gets a value indicating whether this action keeps the original TurnTakerController when replacing
            <see cref="T:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction"/> keep turn taker controller.
            </summary>
            <value><c>true</c> if keep turn taker controller; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.KeepCards">
            <summary>
            Gets a value indicating whether this action keeps cards from the original TurnTaker when replacing
            <see cref="T:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction"/> keep cards.
            </summary>
            <value><c>true</c> if keep cards; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.ReplaceTurnTakerAction.PromoSwappingIdentifiers">
            <summary>
            The extra identifiers used for Promo Swapping in the new TurnTaker
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CitizensHammerAndAnvilTeam.CitizensHammerAndAnvilTeamTurnTakerController.CharacterCard">
            <summary>
            If the player tries to get the Citizens "CharacterCard", show a warning, as it is null.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SkipToTurnPhaseAction">
            <summary>
            GameAction that skips from the current TurnPhase to another one out of regular TurnPhase order.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SkipToTurnPhaseAction.IsEphemeral">
            <summary>
            If true, the phase will be skipped to immediately.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SkipToTurnPhaseAction.FromTurnPhase">
            <summary>
            The turn phase that we are skiping from.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SkipToTurnPhaseAction.ForceIncrementRound">
            <summary>
            If true, increment the game round counter
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.SkipToTurnPhaseAction.InterruptActions">
            <summary>
            If true, this interrupts everything that is currently in progress to skip to the target phase
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.ExpireStatusEffectAction">
            <summary>
            GameAction that causes a StatusEffect to expire.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.MakeDamageUnincreasableAction">
            <summary>
            GameAction that makes the damage unincreasable for a DealDamageAction.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.EntersPlayAction">
            <summary>
            Superclass for GameActions that indicate a Card entering play.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectTurnPhaseDecision">
            <summary>
            Decision that selects a TurnPhase from a list of TurnPhases.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SelectFromBoxDecision">
            <summary>
            Decision that selects the identifier of a Card from outside the current game, from a KeyValuePair of possible choices.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.AdjustDamageAmountAction">
            <summary>
            Superclass used for GameActions which modify the amount of damage a DealDamageAction instance deals.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.FlipTokensAction">
            <summary>
            GameAction that flips a number of tokens in a TokenPool into another TokenPool.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.FlipTokensAction.#ctor(Handelabra.Sentinels.Engine.Controller.GameController,Handelabra.Sentinels.Engine.Model.TokenPool,Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32)">
            <summary>
            This action moves a token from one pool to another. Used for The Harpy's Control Tokens.
            </summary>
            <param name="gameController">Game controller.</param>
            <param name="originPool">Origin pool</param>
            <param name="destinationPool">Destination pool</param>
            <param name="numberOfTokens">Number of tokens.</param>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.SwitchBattleZoneAction">
            <summary>
            GameAction that switches a TurnTaker's BattleZone from one to another.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.HeroCharacterCardController">
            <summary>
            A special CharacterCardController specifically for Heroes.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.VillainCharacterCardController">
            <summary>
            A special CharacterCardController used for villains.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.VillainTeamCharacterCardController">
            <summary>
            A special CharacterCardController used for team-based villains.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CustomDecisionText">
            <summary>
            A collection of text to display to the player for the custom decision selection type.
            
            To use this, use <see cref="F:Handelabra.Sentinels.Engine.Controller.SelectionType.Custom"/> and override <see cref="M:Handelabra.Sentinels.Engine.Controller.CardController.GetCustomDecisionText(Handelabra.Sentinels.Engine.Controller.IDecision)"/> in your CardController and return one.
            
            If HasFormatStrings is true, the text will be passed to string.Format() by the UI. Otherwise it will just overwrite whatever the UI was going to show. If you want to show an icon in a format string, you must use {{Icon}} (double parentheses) or string.Format() will throw an exception.
            
            Any values that are left null will use whatever the UI was already going to show by default.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key">
            <summary>
            The following keywords used below have these meanings:
            
            card count: "a card" or "X cards" where X is a number
            
            location: common type of location, such as "trash", "deck", etc.
            
            ordinal rank: "", "second ", "third " - used with highest/lowest or most/fewest
            
            sequence: "a", "the first", "the second", etc.
            
            turn taker kind: "deck", "player", or "villain"
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.Question">
             <summary>
             Shown to the active player. e.g. "Select the first hero to use a power"
             
             String format variables when <see cref="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.HasFormatStrings"/> is true:
            
             ActivateAbilityDecision: 0 = ability key
             
             MoveCardDecision: 0 = card title
            
             SelectCardDecision: 0 = sequence
            
             SelectLocationDecision: 0 = location
            
             SelectTurnTakerDecision: 0 = sequence, turn taker kind, ordinal rank (from NumberOfCards or SelectionTypeOrdinal), card count
            
             YesNoCardDecision: 0 = card title
             
             YesNoAmountDecision: 0 = amount, 1 = card/cards
             
             </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.TextForOtherPlayers">
             <summary>
             Shown to other players in multiplayer when you are making a decision. e.g. "HeroName is selecting the first hero to use a power"
            
             String format variables when <see cref="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.HasFormatStrings"/> is true:
            
             ActivateAbilityDecision: 0 = hero name, 1 = is/are, 2 = ability key
             
             MoveCardDecision: 0 = hero name, 1 = is/are, 2 = card title
            
             SelectCardDecision: 0 = sequence. Note: used as a phrase combined with "HeroName is/are X"
            
             SelectNumberDecision: Note: used as a phrase combined with "HeroName is/are X"
            
             SelectLocationDecision: 0 = hero name, 1 = is/are, 2 = location
            
             SelectTurnTakerDecision: 0 = sequence, turn taker kind, ordinal rank (from NumberOfCards or SelectionTypeOrdinal), card count. Note: used as a phrase combined with "HeroName is/are X"
             
             </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.TextForVotingPlayers">
             <summary>
             Shown to other players in multiplayer when you are AFK or it's a group choice. e.g. "Vote for the first hero to use a power"
            
             String format variables when <see cref="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.HasFormatStrings"/> is true:
            
             ActivateAbilityDecision: 0 = hero name, 1 = ability key
             
             MoveCardDecision: 0 = card title
            
             SelectCardDecision: 0 = sequence, 1 = hero name. Note: used as a phrase combined with "Vote for X"
            
             SelectLocationDecision: 0 = location
            
             SelectNumberDecision: 0 = hero name
            
             SelectTurnTakerDecision: 0 = sequence, turn taker kind, ordinal rank (from NumberOfCards or SelectionTypeOrdinal), card count. Note: used as a phrase combined with "Vote for X"
            
             SelectWordDecision: 0 = hero name
             
             YesNoDecision: 0 = hero name
             
             YesNoCardDecision: 0 = hero name, 1 = card title
            
             YesNoAmountDecision: 0 = hero name, 1 = amount, 2 = card/cards
             
             </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.RepeatedDecisionQuestionText">
             <summary>
             Shown in the effects list when you repeat a decision for this turn or the whole game. e.g. "Hero to use a power"
            
             String format variables when <see cref="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.HasFormatStrings"/> is true:
            
             ActivateAbilityDecision: 0 = ability key
             
             MoveCardDecision: 0 = card title
            
             SelectLocationDecision: 0 = location
             
             </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.FullCardPrimaryAction">
            <summary>
            Text for the button to answer the decision from full card view. This is only needed for decisions that show up there (e.g. select card).
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.Address">
            <summary>
            Defaults to the hero name. Normally you don't need to change this.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.SkipText">
            <summary>
            Skip button text, defaults to "Skip". Normally you don't need to change this.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.AutoDecideText">
            <summary>
            Choose for me button text, defaults to "Choose for me". Normally you don't need to change this.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Strings">
            <summary>
            Collection of all the text to be used. Any values that are null will use whatever the UI was already going to show by default.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.HasFormatStrings">
            <summary>
            If true, all of the other text will be passed to string.Format() by the UI (see documentation on each key). If false, the text will be used directly.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Create a collection of text to display to the player for the custom decision selection type.
            See <see cref="T:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key"/> for details of how each string is used as a format string. If you want to show an icon in a format string, you must use {{Icon}} (double parentheses) or string.Format() will throw an exception.
            Any values that are left null will use whatever the UI was already going to show by default.
            </summary>
            <param name="question">Shown to the active player. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.Question"/> e.g. "Select the first hero to use a power"</param>
            <param name="textForOtherPlayers">Shown to other players in multiplayer when you are making a decision. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.TextForOtherPlayers"/> e.g. "HeroName is selecting the first hero to use a power"</param>
            <param name="textForVotingPlayers">Shown to other players in multiplayer when you are AFK or it's a group choice. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.TextForVotingPlayers"/> e.g. "Vote for the first hero to use a power"</param>
            <param name="repeatedDecisionQuestionText">Shown in the effects list when you repeat a decision for this turn or the whole game. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.RepeatedDecisionQuestionText"/> e.g. "Hero to use a power"</param>
            <param name="hasFormatStrings">If true, the text will be passed to string.Format() by the UI and replace variables like {0}, {1}, etc (see the documentation for each <see cref="T:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key"/> for details). Otherwise it will just overwrite whatever the UI was going to show.</param>
            <param name="fullCardPrimaryAction">Text for the button to answer the decision from full card view. This is only needed for decisions that show up there (e.g. select card). Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.FullCardPrimaryAction"/></param>
            <param name="address">Defaults to the hero name. Normally you don't need to change this. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.Address"/></param>
            <param name="skipText">Skip button text, defaults to "Skip". Normally you don't need to change this. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.SkipText"/></param>
            <param name="autoDecideText">Choose for me button text, defaults to "Choose for me". Normally you don't need to change this. Details: <see cref="F:Handelabra.Sentinels.Engine.Controller.CustomDecisionText.Key.AutoDecideText"/></param>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Model.Card._useAlternateTitle">
            <summary>
            Gets or sets use of the alternate title.
            </summary>
            <value>Use alternate title or not.</value>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Model.Card._mayRegainHPAboveMaxHP">
            <summary>
            If set to true by its controller, this card may go beyond its max HP.
            Needs to be in the model so that CardCriteria can evaluate it.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsFaceUp">
            <summary>
            Gets a value indicating whether this instance is face up (in the deck).
            </summary>
            <value><c>true</c> if this instance is face up in the deck (e.g. Ambuscade's trap cards); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsDoubleSided">
            <summary>
            Used by the view to determine if it should show a deck back image or something specific to the card.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsFullCardWide">
            <summary>
            Used by the view to help determine card layouts.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsFaceDownNonCharacter">
            <summary>
            Gets a value indicating whether this instance is a card that is face-down in play without a flip side.
            </summary>
            <value><c>true</c> if this instance is a non-character card that is face-down in play; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsInfected">
            <summary>
            A card is "Infected" if it has the card "Infection" next to it.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.QualifiedIdentifier">
            <summary>
            The identifier of the Card including namespace if specified (i.e. for mod decks)
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsJinxed">
            <summary>
            A hero is "Jinxed" if it has a "Jinx" card next to it.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.TargetKind">
            <summary>
            Should only return a value if the target kind is specifically set
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.ResponsibleTarget">
            <summary>
            The responsible target is either this card if it is already a target, or the card's owner's character card (if any).
            This is so far only used for cards like Sucker Punch, in which although Sucker Punch technically destroyed a card, Tachyon's character card is the target responsible for it.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsIncapacitated">
            <summary>
            A helper that returns true if the card is a hero character card or villain team member and is flipped.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsOutOfGame">
            <summary>
            Gets a value indicating whether this card is at an out of game location (OutOfGame/InTheBox).
            </summary>
            <value><c>true</c> if is out of game; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsInTheBox">
            <summary>
            Gets a value indicating whether this card is at the InTheBox location.
            </summary>
            <value><c>true</c> if is in the box; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.IsActive">
            <summary>
             An "Active" card is a character card that is not incapacitated or out of game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Card.MayRegainHPAboveMaxHP">
            <summary>
            A property, set by its controller, to indicate if this card is allowed to go above its max hit points or not.
            This needs to be in the model so that CardCriteria can evaluate it, and should be set in the Controller's constructor.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Card.SetHitPoints(System.Int32)">
            <summary>
            Sets the current HP of this card to the specified amount.
            </summary>
            <param name="amount">The new HP.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Card.SetMaximumHP(System.Int32,System.Boolean)">
            <summary>
            Sets the maximum HP to a specific value. This function is typically used by villain card flips.
            </summary>
            <param name="amount">Amount of HP.</param>
            <param name="alsoSetHP">If true, also sets HitPoints to the same amount.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Card.IsAtLocationRecursive(Handelabra.Sentinels.Engine.Model.Location)">
            <summary>
            Returns whether or not this card is in the provided location, or is recursively in that location (for example, if it is next to a card at that location).
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardDefinition.Namespace">
            <summary>
            The namespace that this Card belongs to. This is null or empty for Handelabra or normal mod cards, and must be specified for mod promo cards.
            Recorded automatically during construction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardDefinition.QualifiedPromoIdentifier">
            <summary>
            The promo identifier of the card including namespace if specified (i.e. from a mod)
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardDefinition.QualifiedPromoIdentifierOrIdentifier">
            <summary>
            The promo identifier or identifier of the card including namespace if specified (i.e. from a mod)
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardDefinition.OverrideTurnTakerController">
            <summary>
            The identifier of the TurnTakerController that should be used instead of the default one
            Checked on variant character cards (i.e. CosmicOmnitron)
            If unset, then TurnTakerController is defined by the DeckDefinition
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardDefinition.AssociatedPromoIdentifiers">
            <summary>
            The promo identifiers of cards that go with this card. For example, this is populated on AdamantSentinelsInstructions with the identifiers of the other promo cards.
            </summary>
        </member>
        <member name="F:Handelabra.Sentinels.Engine.Model.CardDefinition.ActivatableAbilityDefinition.Number">
            <summary>
            Specify to distinguish between two abilities with the same name when activated.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DeckDefinition.SupportsPromoSwapping">
            <summary>
            Returns true only if this deck allows you to swap out individual character cards, such as The Sentinels.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DeckDefinition.Namespace">
            <summary>
            The namespace that this Deck belongs to. This is null or empty for Handelabra decks, and must be specified for mod decks.
            Recorded automatically during construction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DeckDefinition.QualifiedIdentifier">
            <summary>
            The identifier of the deck including namespace if specified (i.e. for mod decks)
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DeckDefinition.IsValid">
            <summary>
            True if the definition was properly loaded.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Model.DamageType">
            <summary>
            All damage in the game is of one of these types.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.Model.CannotDealDamageReason">
            <summary>
            A reason why a card cannot deal damage.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Int32},System.Boolean,System.Random,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Handelabra.Sentinels.Engine.Model.Game"/> class.
            </summary>
            <param name="turnTakerIdentifiers">Turn taker identifier in turn order.</param>
            <param name="isAdvanced">If set to <c>true</c> the game will use advanced difficulty.</param>
            <param name="promoIdentifiers">Promo card identifiers to use; key = turn taker identifier, value = promo card identifier.</param>
            <param name="randomSeed">Seed with which to initialize the RNG</param>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.OverrideNextTurnPhase">
            <summary>
            If this is set, then when EnterNextTurnPhase() is called it will go directly to this turn phase.
            Used for skipping turns and immediately ending turns.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.ForceIncrementTurnIndex">
            <summary>
            If this is true, then when EnterNextTurnPhase() is called it will increment the index.
            Used for InMediasRes
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.PeriodicalObjectID">
            <summary>
            This is recorded for use by the Weekly One-Shots (game of the week) feature. We need to keep track of
            whether a game is part of that system so we can record awards at the end of the game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.RandomSeed">
            <summary>
            The specified random seed that the game was started with, if any.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.OrderedCardsInPlay">
            <summary>
            Keeps an ongoing list of all the cards in play and the order they were played.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.RNG">
            <summary>
            The random number generator that should be used for all game-related things. Created when necessary.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.ExtraTurnTakers">
            <summary>
            Gets the list of extra turn takers that are not in the game, but are loaded for later
            </summary>
            <value>The extra turn takers.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Game.RemovedTurnTakers">
            <summary>
            The list of turn takers who have been removed from the game.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.FindTurnTaker(System.String)">
            <summary>
            Looks up a turn taker.
            </summary>
            <param name="identifier">Qualified identifier of a turn taker.</param>
            <returns>The turn taker, or null if not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.NameForTurnTakerIdentifier(System.String)">
            <summary>
            Returns a user visible name given a turn taker identifier. Can be used to look up names to display instead of {Identifier}. Works for any turn taker who has a deck definition.
            </summary>
            <returns>The name for the turn taker, or null if not found.</returns>
            <param name="identifier">Qualified or non-qualified identifier of a turn taker.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.SetRound(System.Int32)">
            <summary>
            Only to be used for debug/testing purposes!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.TitleForCardIdentifier(System.String,System.Boolean)">
            <summary>
            Returns a user visible title given a card identifier. Can be used to look up names to display instead of {Identifier}. Only works for cards in this game.
            </summary>
            <returns>The title for the card.</returns>
            <param name="identifier">Identifier of a card.</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Game.AreNemeses(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Find out if one card is the nemesis of the other.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Location.OverrideIsInPlay">
            <summary>
            Set this value to override the IsInPlay property to a specific value.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Location.IsHeroPlayAreaRecursive">
            <summary>
            Returns true if this is a hero play area or a "next to" location within a hero play area.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Location.HighestRecursiveLocation">
            <summary>
            Looks up chain of locations until it reaches the highest
            ex. PlayArea/Deck/Trash
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Location.IsOutOfGame">
            <summary>
            Gets a value indicating whether this location is the OutOfGame location.
            </summary>
            <value><c>true</c> if is out of game; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.Location.IsInTheBox">
            <summary>
            Gets a value indicating whether this location is the InTheBox location.
            </summary>
            <value><c>true</c> if is in the box; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Location.IsPlayAreaOf(Handelabra.Sentinels.Engine.Model.TurnTaker)">
            <summary>
            Returns whether or not this location is in the play area of the provided turn taker.
            For example, this would return true if it were that turn taker's play area, or next to/under a card in that play area.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.PromoIdentifier">
            <summary>
            The promo character card identifier used by this TurnTaker. This could change during the game via Completionist Guise.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.CharacterPromoIdentifiers">
            <summary>
            The promo character card identifiers used by this TurnTaker if it has multiple character cards (e.g. The Sentinels). This could change during the game via Completionist Guise.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.InitialCharacterCardIdentifier">
            <summary>
            The qualified character card identifier the TurnTaker started the game with - whether regular or promo.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.InitialCharacterCardIdentifiers">
            <summary>
            The qualified character card identifiers the TurnTaker started the game with- whether regular or promo.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.IsInGame">
            <summary>
            Usually true, but set to false if this turn taker is removed from the game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.Namespace">
            <summary>
            The namespace that this TurnTaker's deck belongs to. This is null or empty for Handelabra decks, and must be specified for mod decks.
            Recorded automatically during construction.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.TurnTaker.QualifiedIdentifier">
            <summary>
            The identifier of the TurnTaker including namespace if specified (i.e. for mod decks)
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.TurnTaker.GetAllCards(System.Boolean,System.Boolean)">
            <summary>
            Gets all cards belonging to this turn taker.
            </summary>
            <returns>All the cards.</returns>
            <param name="realCardsOnly">If set to <c>true</c>, only real cards will be returned (ex, not The Ennead Instruction card).</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.TurnTaker.GetCardsAtAllLocations">
            <summary>
            Used when all cards in TurnTaker are needed (even ones owned by other TurnTakers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.TurnTaker.SetCharacterCard(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Updates the character card for this turn taker to the one provided.
            This should probably not be called directly, but by an action.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordChangeMaximumHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Boolean)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordDecisionAnswer(System.String,Handelabra.Sentinels.Engine.Model.HeroTurnTaker,System.Nullable{System.Int32},System.Boolean,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordDealDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,Handelabra.Sentinels.Engine.Model.Card,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordDealDamage(Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.DamageType,Handelabra.Sentinels.Engine.Model.Card,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordIncreaseDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordReduceDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Boolean,System.Int32,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordRedirectDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordImmuneToDamage(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordDrawCard(Handelabra.Sentinels.Engine.Model.HeroTurnTaker,Handelabra.Sentinels.Engine.Model.Card,System.Boolean,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordFlipCard(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordGainHP(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordSetHP(Handelabra.Sentinels.Engine.Model.Card,System.Int32,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordGameState">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordMoveCard(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordSwitchCard(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordDestroyCard(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Location,Handelabra.Sentinels.Engine.Model.Location,System.Boolean,Handelabra.Sentinels.Engine.Model.DealDamageJournalEntry,Handelabra.Sentinels.Engine.Model.Card,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordPlayCard(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.TurnTaker,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordUseIncapacitatedAbility(Handelabra.Sentinels.Engine.Model.Card,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordUsePower(Handelabra.Sentinels.Engine.Model.Card,System.Int32,System.Int32,Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.HeroTurnTaker,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordActivateAbility(Handelabra.Sentinels.Engine.Model.Card,System.String,System.Int32,Handelabra.Sentinels.Engine.Model.TurnTaker,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordPhaseChange(Handelabra.Sentinels.Engine.Model.TurnPhase,Handelabra.Sentinels.Engine.Model.TurnPhase,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordCardEntersPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordTargetEntersPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordTargetLeavesPlay(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.RecordModifyTokens(Handelabra.Sentinels.Engine.Model.Card,Handelabra.Sentinels.Engine.Model.TokenPool,System.Int32,System.Int32)">
            <summary>
            Journal entries are recorded automatically by the GameActions responsible. Do not call this directly!
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.Journal.WasCardFlippedThisGame(Handelabra.Sentinels.Engine.Model.Card)">
            <summary>
            Returns whether or not the given card has been flipped this game.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.MoveCardJournalEntry.ToLocationRecursive">
            <summary>
            Gets highest location recursively (same location as ToLocation if not relative to another card.
            ex. NextTo Something would return the PlayArea/Deck/Trash location of Something rather than the NextTo location
            </summary>
            <value>To location recursive.</value>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.MoveCardJournalEntry.CardKeywords">
            <summary>
            The keywords that the card had when it was moved.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.StatusEffect.DoesDealDamage">
            <summary>
            Whether or not this status effect deals damage. Assumed false.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.StatusEffect.CombineWithStatusEffect(Handelabra.Sentinels.Engine.Model.StatusEffect)">
            <summary>
            Combines this status effect with another one. Does nothing by default.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.StatusEffect.CreateImplicitExpiryConditions">
            <summary>
            Automatically creates expiry conditions that are not written on the card, but are implicit to the type of effect.
            For example, "reduce damage dealt by target X" has an implict "until that target leaves play" expiry.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.CardCriteria.MustBeCard">
            <summary>
            If set to true, the comparison must be a card. If false, a turn taker could also be evaluated in rare cases. (Ex. Prime Wardens Tempest)
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.CardCriteria.IsSingular">
            <summary>
            Returns true if this criteria applies to a single card only. Returns false if it could apply to more than one.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DestroyCardJournalEntry.ResponsibleCard">
            <summary>
            The card that gets credit for having destroyed the card, even if it did not do so itself.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.DestroyCardJournalEntry.CardKeywords">
            <summary>
            The keywords that the card had when it was destroyed.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.SetPhaseActionCountBaseStatusEffect.#ctor">
            <summary>
            Sets the phase action count of a particular phase to a number provided by a function.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.AllowSetNumberOfPowerUseStatusEffect.Amount">
            <summary>
            The amount of times this power can be used.
            </summary>
        </member>
        <member name="P:Handelabra.Sentinels.Engine.Model.StatusEffectCriteria.CardWithPower">
            <summary>
            If the status effect that this is affecting is the power of a card, this is the card whose power is affected.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.AddAssembly(System.String,System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Register an assembly for a mod with the given namespace. This also caches the promo cards defined by the mod.
            Only one assembly may be registered for a namespace.
            </summary>
            <param name="space">The namespace used by the mod</param>
            <param name="assembly">The assembly with the mod's code</param>
            <returns>True if the assembly was registered, false otherwise.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.RemoveAssembly(System.String)">
            <summary>
            Remove the mod assembly that goes with the namespace.
            </summary>
            <param name="space">The namespace used by the mod</param>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.ResetAllMods">
            <summary>
            Clear our assembly and promo caches.
            </summary>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetAssemblyForNamespace(System.String)">
            <summary>
            Find the mod assembly that goes with the namespace.
            </summary>
            <param name="space">The namespace used by the mod</param>
            <returns>The matching assembly, if loaded.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetAssemblyForAssemblyName(System.Reflection.AssemblyName)">
            <summary>
            Find the mod assembly that goes with the assembly name. Compares the simple name, not the version.
            </summary>
            <param name="name">The assembly name used by the mod</param>
            <returns>The matching assembly, if loaded.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetAssemblyForTurnTaker(System.String)">
            <summary>
            Find the mod assembly that goes with the fully qualified deck identifier e.g. MyMod.Workshopping.MigrantCoder (namespace is MyMod.Workshopping, identifier is MigrantCoder)
            </summary>
            <param name="identifierWithNamespace">The qualified identifier</param>
            <returns>Returns null if it's not a mod but Handelabra code.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetNamespaceFromQualifiedIdentifier(System.String,System.String@)">
            <summary>
            Given a fully qualified identifier (e.g. Workshopping.Sample.MigrantCoder), returns the namespace part (Workshopping.Sample). The identifier part is also returned in the out parameter.
            </summary>
            <param name="identifierWithNamespace">The qualified identifier</param>
            <param name="identifier">The deck identifier (e.g. MigrantCoder)</param>
            <returns></returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetTypeForCardController(System.String,System.String)">
            <summary>
            Find a CardController class for the given deck and card identifiers (looks up in assemblies)
            </summary>
            <param name="deckIdentifier">Qualified or non-qualified deck identifier</param>
            <param name="cardIdentifier">Qualified or non-qualified card identifier</param>
            <returns>The CardController subclass, if found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetTypeForTurnTakerController(System.String,System.String)">
            <summary>
            Find a TurnTakerController class for the given deck (looks up in assemblies)
            </summary>
            <param name="deckIdentifier">Non-qualified deck identifier</param>
            <returns>The TurnTakerController subclass, if found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetPromoDefinition(System.String,System.String)">
            <summary>
            Find a promo card definition from a mod. Mod promos are defined in a special card list file, and are loaded and cached with AddAssembly().
            </summary>
            <param name="deckIdentifier">Qualified deck identifier (e.g. Bunker) </param>
            <param name="promoIdentifier">Qualified promo identifier (e.g. Workshopping.MyBunkerCharacter)</param>
            <returns>The matching promo card definition, or null if not found.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetSharedPromoDefinitions(Handelabra.Sentinels.Engine.Model.CardDefinition)">
            <summary>
            Find any promo definitions that have the same (non-null) shared identifier as the given definition. Used for Sky-Scraper variants.
            </summary>
            <param name="promoDefinition">The promo definition (from <see cref="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetPromoDefinition(System.String,System.String)"/>).</param>
            <returns>Any matching promo definitions.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.GetAllPromoDefinitions">
            <summary>
            Get all of the promo definitions found for this mod.
            </summary>
            <returns>All of the definitions.</returns>
        </member>
        <member name="M:Handelabra.Sentinels.Engine.Model.ModHelper.LoadPromoCardList(System.String,System.Reflection.Assembly)">
            <summary>
            Reads the PromoCardList.json from the assembly and caches the promo card definitions.
            </summary>
            <param name="space">The namespace used by the mod</param>
            <param name="assembly">The assembly with the mod's code</param>
            <returns>True if the promo card list was loaded successfully or was missing, false otherwise.</returns>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.SentinelsEnumerationExtensions">
            <summary>
            A class that contains a helpful method that can be used anywhere in the code.
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.TurnTakerCriteria">
            <summary>
            NOTE: The namespace for this class is incorrect but cannot be fixed because it's serialized (and would break loading old save games).
            </summary>
        </member>
        <member name="T:Handelabra.Sentinels.Engine.TargetRemovedExpiryCriteria">
            <summary>
            NOTE: The namespace for this class is incorrect but cannot be fixed because it's serialized (and would break loading old save games).
            </summary>
        </member>
    </members>
</doc>
